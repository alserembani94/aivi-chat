{"version":3,"sources":["components/Chatbox/Chatbox.tsx","components/CustomComponent/InputBox.tsx","components/CustomComponent/InputDropdown.tsx","components/CustomComponent/TabBar.tsx","components/CustomComponent/Checkbox.tsx","components/Leftbox/CashFromCard/CashFromCardForm.tsx","components/Leftbox/SubmittedView.tsx","components/Leftbox/CashFromCard/CashFromCard.tsx","components/Leftbox/Credit Card/AvailableCard.tsx","components/Leftbox/Credit Card/CreditCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Chatbox","userInput","updateInput","submitInput","conversation","React","useEffect","Array","from","document","getElementsByClassName","forEach","element","scrollIntoView","block","inline","behavior","handleSubmit","pressedKey","Fragment","className","src","alt","map","conversationItem","index","length","data-side","user","id","key","message","moment","timestamp","format","Provider","value","placeholder","onChange","currentTarget","onKeyPress","onClick","disabled","InputBox","slot","inputProps","handleInputChange","inputLabel","inputName","type","inputType","onFocus","e","parentElement","style","boxShadow","onBlur","inputState","InputDropdown","useState","isDropdown","setDropdown","dropdownElement","useRef","handleClickOutside","event","current","contains","target","prevState","addEventListener","removeEventListener","toggleDropdown","ref","readOnly","console","log","data-show","toString","optionList","optionItem","label","TabBar","currentTab","updateTab","data-active","name","selectedTab","tabBody","getElementById","handleTabChange","content","Checkbox","updateSelected","rows","active","data-rows","MultipleCheckbox","selectedOptions","maxOption","Infinity","handleArrayUpdate","isActive","removedOptions","filter","selected","some","CashFromCardForm","slotInput","updateSubmitted","slotInputItem","transferFrom","phone","email","amount","check","SubmittedView","CashFromCard","submitted","AvailableCard","setSelectedOptions","tempRef","rowSpan","setRowSpan","scrollWidth","CreditCard","setCurrentTab","tabMenuList","mockConversation","App","userSlot","setUserSlot","setSubmitted","userChatInput","setUserChatInput","setConversation","showChatInMobile","setShowChatInMobile","renderSection","setRenderSection","renderModel","setRenderModel","handleChatInputUpdate","handleChatSubmit","conversationMap","prevConversation","stateName","data-visible","section","handleChangeSection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6b176206.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    MdAdd,\n    MdMic,\n} from 'react-icons/md';\nimport {\n    // RiEmotionHappyLine,\n    RiSendPlaneFill,\n} from 'react-icons/ri';\nimport { IconContext } from 'react-icons/lib';\nimport moment from 'moment';\n\ninterface ChatboxProps {\n    userInput: string;\n    updateInput: (userInput: string) => void;\n    submitInput: () => void,\n    conversation: {\n        user?: string;\n        timestamp?: string;\n        message?: string;\n    }[];\n}\n\nconst Chatbox: React.FC<ChatboxProps> = ({userInput, updateInput, submitInput, conversation}) => {\n    React.useEffect(() => {\n        // Single Element only\n        // const element = document.getElementById('Last-Dialog');\n        // element?.scrollIntoView({block: 'end', inline: 'end', behavior: 'smooth'});\n        // element?.scrollIntoView(false);\n        const elements: Element[] = Array.from(document.getElementsByClassName('Last-Dialog'));\n        elements.forEach(element => element.scrollIntoView({block: 'end', inline: 'end', behavior: 'smooth'}));\n    }, [conversation]);\n\n    const handleUpdate = (text: string) => updateInput(text);\n    const handleSubmit = (pressedKey: string) => pressedKey === 'Enter' && submitInput();\n\n    return (\n        <React.Fragment>\n            <div className=\"Chatbox-Container\">\n                    <div className=\"Chatbox-Avatar Button\">\n                        <img\n                            src=\"https://i.imgur.com/gqSZQbW.png\"\n                            alt=\"AIVI Avatar\"\n                        />\n                    </div>\n                    <div className=\"Chatbox-Box\">\n                        <div className=\"Chatbox-Dialog\">\n                            {\n                                conversation.map((conversationItem, index) => (\n                                    <div\n                                        className={`Dialog-Container ${index === (conversation.length - 1) ? 'Last-Dialog' : 'Not-Last-Dialog'}`}\n                                        data-side={conversationItem.user === 'bot' ? 'left' : 'right'}\n                                        id={index === (conversation.length - 1) ? 'Last-Dialog' : 'Not-Last-Dialog'}\n                                        key={index}\n                                    >\n                                        <div className=\"Dialog-Bubble\">\n                                            <p>{conversationItem.message}</p>\n                                        </div>\n                                        <p className=\"Dialog-Timestamp\">{moment(conversationItem.timestamp).format('Do MMM YYYY h:mmA')}</p>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                        <div className=\"Chatbox-Input\">\n                            <button className=\"Chatbox-Input-UploadOptions Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Rotate Icon-Light Icon-Add' }} >\n                                    <MdAdd />\n                                </IconContext.Provider>\n                            </button>\n                            {/* <textarea\n                                className=\"Chatbox-Input-InputBox\"\n                                placeholder=\"Input here\"\n                                value={userInput}\n                                onChange={({ currentTarget: {value} }) => handleUpdate(value)}\n                                onKeyPress={({ key: pressedKey}) => handleSubmit(pressedKey)}\n                            /> */}\n                            <input\n                                className=\"Chatbox-Input-InputBox\"\n                                placeholder=\"Input here\"\n                                value={userInput}\n                                onChange={({ currentTarget: {value} }) => handleUpdate(value)}\n                                onKeyPress={({ key: pressedKey}) => handleSubmit(pressedKey)}\n                            />\n                            \n                            <button className=\"Chatbox-Input-Audible Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Audible' }} >\n                                    <MdMic />\n                                </IconContext.Provider>\n                            </button>\n                            {/* <button className=\"Chatbox-Input-Smiley Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Smiley' }} >\n                                    <RiEmotionHappyLine />\n                                </IconContext.Provider>\n                            </button> */}\n                            <button\n                                className=\"Chatbox-Input-Send Button Button-Send\"\n                                onClick={() => handleSubmit('Enter')}\n                                disabled={userInput === ''}\n                            >\n                                <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Send' }} >\n                                    <RiSendPlaneFill />\n                                </IconContext.Provider>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n        </React.Fragment>\n    );\n}\n\nexport default Chatbox;","import React from 'react';\n\ntype slotInputType = {\n    [inputName: string]: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ntype slotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ninterface InputBoxProps {\n    slot: slotType;\n    inputProps: slotInputType;\n    index: number;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\nconst InputBox: React.FC<InputBoxProps> = ({slot, inputProps, index, handleInputChange}) => {\n    const handleInputFocus = (e: React.FocusEvent) => {\n        if (e.currentTarget.parentElement?.parentElement) e.currentTarget.parentElement.parentElement.style.boxShadow = 'var(--selected-box-shadow)';\n    };\n\n    const handleInputBlur = (e: any) => {\n        if (e.currentTarget.parentElement?.parentElement)  e.currentTarget.parentElement.parentElement.style.boxShadow = 'var(--box-shadow)';\n    };\n\n    return (\n        <div\n            className=\"InputBox-Container\"\n            key={index}\n        >\n            <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n            <div className=\"InputBox-InputArea\">\n                {\n                    inputProps.inputName === 'amount' && <p className=\"InputBox-Currency\">RM</p>\n                }\n                <input\n                    type={inputProps.inputType}\n                    onFocus={handleInputFocus}\n                    onBlur={handleInputBlur}\n                    value={slot[inputProps.inputState]}\n                    onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default InputBox;","import React from 'react';\nimport {\n    IoIosArrowDown,\n    IoIosClose,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\n// Input Configuration Formatting\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    optionList?: InputOptionType[],\n};\n\n// All slot data\ntype slotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\n// Props Configuration\ninterface InputDropdownProps {\n    slot: slotType;\n    inputProps: slotInputType;\n    index: number;\n    handleInputChange: (value: string, stateName: string) => void;\n    \n}\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\n// function useOutsideAlerter(ref: React.MutableRefObject<null | HTMLElement>) {\n//     React.useEffect(() => {\n//         /**\n//          * Alert if clicked on outside of element\n//          */\n//         function handleClickOutside(event: { target: any; }) {\n//             if (ref.current && !ref.current.contains(event.target)) {\n//                 alert(\"You clicked outside of me!\");\n//             }\n//         }\n\n//         // Bind the event listener\n//         document.addEventListener(\"mousedown\", handleClickOutside);\n//         return () => {\n//             // Unbind the event listener on clean up\n//             document.removeEventListener(\"mousedown\", handleClickOutside);\n//         };\n//     }, [ref]);\n// }\n\nconst InputDropdown: React.FC<InputDropdownProps> = ({slot, inputProps, index, handleInputChange}) => {\n    const [isDropdown, setDropdown] = React.useState(false);\n\n    const dropdownElement = React.useRef<null | HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        function handleClickOutside(event: { target: any; }) {\n            if (dropdownElement.current && !dropdownElement.current.contains(event.target)) {\n                if (isDropdown) {\n                    setDropdown(prevState => { return false });\n                }\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [dropdownElement, isDropdown]);\n\n    const toggleDropdown = () => {\n        setDropdown(prevState => { return !prevState });\n    };\n\n    const handleChooseOption = (value: string) => {\n        handleInputChange(value, inputProps.inputState);\n        setDropdown(prevState => { return !prevState });\n    };\n\n    const handleInputFocus = (e: React.FocusEvent) => {\n        // if (e.currentTarget.parentElement?.parentElement?.parentElement) e.currentTarget.parentElement.parentElement.parentElement.style.boxShadow = 'var(--selected-box-shadow)';\n        // setDropdown(prevState => { return true });\n    };\n\n    const handleInputBlur = (e: any) => {\n        // if (e.currentTarget.parentElement?.parentElement?.parentElement)  e.currentTarget.parentElement.parentElement.parentElement.style.boxShadow = 'var(--box-shadow)';\n        setDropdown(prevState => { return false });\n    };\n\n    return (\n        <div className=\"InputDropdown-Wrapper\" ref={dropdownElement}>\n            <div\n                className=\"InputBox-Container InputDropdown-Container\"\n                key={index}\n            >\n                <div\n                    className=\"InputDropdown-Thumb\"\n                    onClick={toggleDropdown}\n                >\n                    <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n                    <div className=\"InputBox-InputArea\">\n                        {\n                            inputProps.inputName === 'amount' && <p className=\"InputBox-Currency\">RM</p>\n                        }\n                        <input\n                            type={inputProps.inputType}\n                            readOnly={true}\n                            onFocus={handleInputFocus}\n                            onBlur={handleInputBlur}\n                            value={slot[inputProps.inputState]}\n                            onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                        />\n                    </div>\n                </div>\n                <div className=\"InputDropdown-Action\">\n                    <button\n                        className=\"InputDropdown-Button Button\"\n                        onClick={()=> console.log()}\n                    >\n                        <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Close' }} >\n                            <IoIosClose />\n                        </IconContext.Provider>\n                    </button>\n                    <button\n                        className=\"InputDropdown-Button Button\"\n                        onClick={toggleDropdown}\n                    >\n                        <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Down' }} >\n                            <IoIosArrowDown />\n                        </IconContext.Provider>\n                    </button>\n                </div>\n            </div>\n            <div\n                className=\"InputDropdown-List\"\n                data-show={isDropdown.toString()}\n            >\n                <ul>\n                    {/* <li\n                        onClick={handleChooseOption}\n                    >\n                        Hello\n                    </li>\n                    <li>Everyone</li> */}\n                    {\n                        inputProps.optionList && inputProps.optionList.map((optionItem, index) => (\n                            <li\n                                key={index}\n                                onClick={() => handleChooseOption(optionItem.value)}\n                            >\n                                {optionItem.label}\n                            </li>\n                        ))\n                    }\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default InputDropdown;\n\n// eslint-disable-next-line no-lone-blocks\n{/* <div\n            className=\"InputBox-Container\"\n            key={index}\n        >\n            <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n            <div className=\"InputBox-InputArea\">\n                {\n                    inputProps.inputName === 'amount' && <p className=\"InputBox-Currency\">RM</p>\n                }\n                <input\n                    type={inputProps.inputType}\n                    onFocus={handleInputFocus}\n                    onBlur={handleInputBlur}\n                    value={slot[inputProps.inputState]}\n                    onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                />\n            </div>\n        </div> */}","import React from 'react';\n\ntype optionList = {\n    label: string,\n    name: string,\n    content: JSX.Element;\n};\n\ninterface TabBarProps {\n    currentTab: string;\n    updateTab: (selectedTab: string) => void;\n    optionList: optionList[];\n}\n\nconst TabBar: React.FC<TabBarProps> = ({currentTab, updateTab, optionList}) => {\n    const handleTabChange = (selectedTab: string) => {\n        const tabBody = document.getElementById(selectedTab);\n        tabBody && tabBody.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n        updateTab(selectedTab);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"TabBar-Container\">\n                <ul className=\"TabBar-Header\">\n                    {\n                        optionList.map((optionItem, index) => (\n                            <li\n                                data-active={(optionItem.name === currentTab).toString()}\n                                onClick={() => handleTabChange(optionItem.name)}\n                                key={index}\n                            >\n                                {optionItem.label}\n                            </li>\n                        ))\n                    }\n                </ul>\n                <div className=\"TabBar-Body\" id=\"TabBar-Body\">\n                    {\n                        optionList.map((optionItem, index) => (\n                            <div className=\"TabBar-Body-Item\" id={optionItem.name} key={index}>\n                                {optionItem.content}\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TabBar;","import React from 'react';\nimport {\n    IoIosCheckmark,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype optionType = {\n    name: string,\n    label: string,\n};\n\ninterface CheckboxProps {\n    name: string;\n    label: string;\n    updateSelected: (value: string, isActive: boolean) => void;\n    rows?: number;\n    active: boolean;\n}\n\ninterface MultipleCheckboxProps {\n    optionList: optionType[];\n    selectedOptions: string[];\n    updateSelected: (selectedList: string[]) => void;\n    maxOption?: number;\n    rows?: number;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = ({name, label, updateSelected, rows, active}) => {\n    const handleUpdate = (value: string) => {\n        updateSelected(value, active);\n    }\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"Checkbox-Container\"\n                data-rows={rows?.toString()}\n                data-active={active}\n                onClick={() => handleUpdate(name)}\n            >\n                <div className=\"Checkbox-Indicator\">\n                    \n                    <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Check' }} >\n                        <IoIosCheckmark />\n                    </IconContext.Provider>\n                </div>\n                <p>{label}</p>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultipleCheckbox: React.FC<MultipleCheckboxProps> = ({optionList, selectedOptions, updateSelected, maxOption = Infinity, rows = 1}) => {\n\n    const handleArrayUpdate = (value: string, isActive: boolean) => {\n        // Deselect Option\n        if (isActive) {\n            const removedOptions = selectedOptions.filter(selected => selected !== value);\n            updateSelected(removedOptions);\n        }\n        // Select Option\n        else {\n            if (selectedOptions.length < maxOption) updateSelected([...selectedOptions, value]);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"Checkbox-Multiple\">\n            {\n                optionList.map((optionItem, index) => (\n                    <Checkbox\n                        name={optionItem.name}\n                        label={optionItem.label}\n                        updateSelected={handleArrayUpdate}\n                        rows={rows}\n                        active={selectedOptions.some(selected => selected === optionItem.name)}\n                        key={index}\n                    />\n                ))\n            }\n            </div>\n            {\n                maxOption !== Infinity && <p className=\"Checkbox-Limit\">Max: {maxOption}</p>\n            }\n        </React.Fragment>\n    );\n};\n\nexport {\n    Checkbox,\n    MultipleCheckbox,\n};","import React from 'react';\nimport { InputBox, InputDropdown } from '../../CustomComponent';\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ntype slotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ninterface CashFromCardProps {\n    slot: slotType;\n    slotInput: slotInputType[];\n    updateSubmitted: () => void;\n    handleInputChange: (value: string, stateName: string) => void;\n    optionList?: InputOptionType[];\n}\n\nconst CashFromCardForm: React.FC<CashFromCardProps> = ({slot, slotInput, updateSubmitted, handleInputChange, optionList}) => {\n\n    return (\n        <>\n            <section className=\"CashFromCard-Content\">\n                <p className=\"CashFromCard-Title\">\n                    Application Status: In Progress\n                </p>\n                <p className=\"CashFromCard-Description\">\n                    You can view your progress so far here. Feel free to edit the information by clicking on the field.\n                </p>\n                <div className=\"CashFromCard-Details\">\n                    {\n                        slotInput.map((slotInputItem: slotInputType, index: number) => (\n                            slotInputItem.inputType === 'dropdown'\n                            ? (\n                                <InputDropdown\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    index={index}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                            : (\n                                <InputBox\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    index={index}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                        ))\n                    }\n                </div>\n            </section>\n            <section className=\"CashFromCard-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                    onClick={updateSubmitted}\n                    disabled={[slot.transferFrom, slot.name, slot.phone, slot.email, slot.amount].some(check => check === '')}\n                >\n                    Submit Application\n                </button>\n            </section>\n        </>\n    );\n}\n\nexport default CashFromCardForm;","import React from 'react';\n\ninterface SubmittedViewProps {\n    updateSubmitted: () => void;\n}\n\nconst SubmittedView: React.FC<SubmittedViewProps> = ({updateSubmitted}) => {\n    return (\n        <>\n            <section className=\"Leftbox-Submitted\">\n                <p>Application Form Submitted</p>\n                <img\n                    src=\"../images/submitted.svg\"\n                    alt=\"Submitted\"\n                />\n                <button\n                    className=\"Button Button-FitContent\"\n                    onClick={updateSubmitted}\n                >\n                    Back to Main Menu\n                </button>\n            </section>\n        </>\n    );\n}\n\nexport default SubmittedView;","import React from 'react';\nimport CashFromCardForm from './CashFromCardForm';\nimport SubmittedView from '../SubmittedView';\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ninterface CashFromCardProps {\n    slot: {\n        [transferFrom: string]: string,\n        name: string,\n        phone: string,\n        email: string,\n        amount: string,\n    };\n    slotInput: slotInputType[];\n    submitted: boolean;\n    updateSubmitted: () => void;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\nconst CashFromCard: React.FC<CashFromCardProps> = ({slot, slotInput, submitted, updateSubmitted, handleInputChange}) => {\n    if (!submitted) return <CashFromCardForm\n                                slot={slot}\n                                slotInput={slotInput}\n                                updateSubmitted={updateSubmitted}\n                                handleInputChange={handleInputChange}\n                            />\n    else return <SubmittedView updateSubmitted={updateSubmitted} />\n}\n\nexport default CashFromCard;","import React from 'react';\nimport {\n    MultipleCheckbox,\n} from '../../CustomComponent';\n\nconst AvailableCard: React.FC = () => {\n    const [selectedOptions, setSelectedOptions] = React.useState<string[]>([]);\n    const optionList = [\n        {\n            name: 'CIMB Bank',\n            label: 'CIMB Bank',\n        },\n        {\n            name: 'Alliance Bank',\n            label: 'Alliance Bank',\n        },\n        {\n            name: 'Maybank',\n            label: 'Maybank',\n        },\n        {\n            name: 'OCBC',\n            label: 'OCBC',\n        },\n        {\n            name: 'RHB Bank',\n            label: 'RHB Bank',\n        },\n        {\n            name: 'Public Bank',\n            label: 'Public Bank',\n        },\n        {\n            name: 'BSN',\n            label: 'BSN',\n        },\n        {\n            name: 'Bank Rakyat',\n            label: 'Bank Rakyat',\n        },\n        {\n            name: 'Affin Bank',\n            label: 'Affin Bank',\n        },\n        {\n            name: 'Standard Chartered',\n            label: 'Standard Chartered',\n        },\n        {\n            name: 'Citibank',\n            label: 'Citibank',\n        },\n        {\n            name: 'UOB Malaysia',\n            label: 'UOB Malaysia',\n        },\n        {\n            name: 'Hong Leong Bank',\n            label: 'Hong Leong Bank',\n        },\n        {\n            name: 'AEON Credit Service',\n            label: 'AEON Credit Service',\n        },\n        {\n            name: 'HSBC',\n            label: 'HSBC',\n        },\n        {\n            name: 'Paydee',\n            label: 'Paydee',\n        },\n    ];\n    const tempRef = React.useRef<HTMLDivElement>(null);\n    const [rowSpan, setRowSpan] = React.useState(2);\n\n    const handleModifySelectedOptions = (selected: string[]) => {\n        setSelectedOptions(selected);\n    }\n    \n    React.useEffect(() => {\n        setRowSpan(prevState => {\n            if (tempRef.current) {\n                if (tempRef.current.scrollWidth > 450) return 2\n                else return 1;\n            }\n            else return prevState;\n        });\n    }, [tempRef]);\n\n    return (\n        <React.Fragment>\n            <div id=\"MultipleChoice\" ref={tempRef}>\n                <MultipleCheckbox\n                    optionList={optionList}\n                    selectedOptions={selectedOptions}\n                    updateSelected={handleModifySelectedOptions}\n                    maxOption={3}\n                    rows={rowSpan}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default AvailableCard;","import React from 'react';\nimport {\n    TabBar,\n} from '../../CustomComponent';\nimport AvailableCard from './AvailableCard';\n\nconst CreditCard = () => {\n    const [currentTab, setCurrentTab] = React.useState('Available Card');\n\n    const tabMenuList = [\n        {\n            label: 'Available Card',\n            name: 'Available Card',\n            content: <AvailableCard />,\n        },\n        {\n            label: 'Expenses',\n            name: 'Expenses',\n            content: <div>Expenses Element</div>,\n        },\n        {\n            label: 'Monthly Income',\n            name: 'Monthly Income',\n            content: <div>Income Element</div>,\n        },\n        {\n            label: 'Card',\n            name: 'Card',\n            content: <AvailableCard />,\n        },\n        {\n            label: 'Hello',\n            name: 'Hello',\n            content: <div>Expenses Element</div>,\n        },\n        {\n            label: 'Malaysia',\n            name: 'Malaysia',\n            content: <div>Income Element</div>,\n        },\n    ];\n\n    const handleChangeTab = (selectedTab: string) => {\n        setCurrentTab(() => { return selectedTab });\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"CreditCard-Content\">\n                <TabBar\n                    currentTab={currentTab}\n                    updateTab={handleChangeTab}\n                    optionList={tabMenuList}\n                />\n            </div>\n            <div className=\"CreditCard-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                >\n                    Submit Application\n                </button>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CreditCard;","import React from 'react';\nimport './App.scss';\nimport {\n    MdMenu,\n} from 'react-icons/md';\nimport { IconContext } from 'react-icons/lib';\nimport moment from 'moment';\n\nimport {\n    Chatbox,\n    CashFromCard,\n    CreditCard,\n} from './components';\n\n// import { validateData } from './utils/DataValidation';\n\ntype mockSlotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    optionList?: InputOptionType[];\n};\n\ninterface conversationState {\n    user?: string;\n    timestamp?: string;\n    message?: string;\n}\n\nconst mockConversation = [\n    {\n        user: 'bot',\n        timestamp: '2020-09-09',\n        message: 'Welcome!',\n    },\n    {\n        user: 'user',\n        timestamp: '2020-09-09',\n        message: 'Hey!',\n    },\n    {\n        user: 'bot',\n        timestamp: '2020-09-09',\n        message: 'Are you interested in anything?',\n    },\n    {\n        user: 'user',\n        timestamp: '2020-09-09',\n        message: 'I would like to order a aglio e olio, with a freckle of cinnamon, and the cherry on top!',\n    },\n];\n\nfunction App() {\n    const [userSlot, setUserSlot] = React.useState({\n        transferFrom: '',\n        name: '',\n        phone: '',\n        email: '',\n        amount: '',\n    });\n    const [submitted, setSubmitted] = React.useState(false);\n    const [userChatInput, setUserChatInput] = React.useState('');\n    const [conversation, setConversation] = React.useState<conversationState[]>(mockConversation);\n    const [showChatInMobile, setShowChatInMobile] = React.useState(false);\n    const [renderSection, setRenderSection] = React.useState('Credit Card');\n    const [renderModel, setRenderModel] = React.useState(false);\n\n    const slotInput: slotInputType[] = [\n        {\n            inputName: 'transferFrom',\n            inputState: 'transferFrom',\n            inputType: 'dropdown',\n            inputLabel: 'Transfer from',\n            optionList: [\n                {\n                    name: 'Hello',\n                    label: 'Hello',\n                    value: 'Hello',\n                },\n                {\n                    name: 'World',\n                    label: 'World',\n                    value: 'World',\n                },\n                {\n                    name: 'React',\n                    label: 'React',\n                    value: 'React',\n                },\n            ],\n        },\n        {\n            inputName: 'name',\n            inputState: 'name',\n            inputType: 'text',\n            inputLabel: 'Name',\n        },\n        {\n            inputName: 'phone',\n            inputState: 'phone',\n            inputType: 'text',\n            inputLabel: 'Phone',\n        },\n        {\n            inputName: 'email',\n            inputState: 'email',\n            inputType: 'email',\n            inputLabel: 'Email',\n        },\n        {\n            inputName: 'amount',\n            inputState: 'amount',\n            inputType: 'number',\n            inputLabel: 'Amount',\n        },\n    ];\n\n    const sections = ['Cash From Card', 'Credit Card'];\n\n    React.useEffect(() => {\n        // const rootStyle = document.documentElement.style;\n        // rootStyle.setProperty('--sidebar-width', '10px');\n        // console.log(validateData('Hello', 'email'));\n        // setInterval({}, 1000); // refresh every second - Is this a good practice?\n        // console.log(showChatInMobile);\n    }, [showChatInMobile]);\n\n    // Functions for leftbox\n    const handleInputChange = (value: string, stateName: string) => {\n        setUserSlot(() => {return {...userSlot, [stateName]: value}});\n    };\n\n    const handleSubmit = () => {\n        setSubmitted(prevState => { return !prevState});\n    };\n\n    // Functions for chatbox\n    const handleChatInputUpdate = (value: string) => {\n        setUserChatInput(() => value);\n    };\n\n    const handleChatSubmit = () => {\n        if (userChatInput !== '') {\n            const conversationMap = {\n                user: 'User',\n                timestamp: moment().format(),\n                message: userChatInput,\n            };\n            setConversation(prevConversation => { return [...prevConversation, conversationMap] });\n            setUserChatInput('');\n        }\n    };\n\n    const handleChatboxModal = () => {\n        setShowChatInMobile(prevState => { return !prevState });\n    }\n\n    // FOR DEBUG PURPOSE ONLY\n    // START\n    const handleSectionsMenu = () => {\n        setRenderModel(prevState => { return !prevState });\n    }\n\n    const handleChangeSection = (section: string) => {\n        setRenderSection(() => { return section })\n        setRenderModel(prevState => { return !prevState });\n    }\n    // END\n\n\n    return (\n        <main className=\"AIVI-Page\">\n            <section className=\"AIVI-Sidebar\">\n                <div className=\"Button Button-Hamburger\">\n                    <IconContext.Provider value={{ className: 'Icon-Rotate Icon-Light Icon-Hamburger' }} >\n                        <MdMenu />\n                    </IconContext.Provider>\n                </div>\n            </section>\n            <section className=\"AIVI-Chatbox\">\n                <Chatbox\n                    userInput={userChatInput}\n                    updateInput={handleChatInputUpdate}\n                    submitInput={handleChatSubmit}\n                    conversation={conversation}\n                />\n            </section>\n            <section className=\"AIVI-Leftbox\">\n                {\n                    renderSection === 'Cash From Card'\n                    ? (\n                        <CashFromCard\n                            slot={userSlot}\n                            slotInput={slotInput}\n                            submitted={submitted}\n                            updateSubmitted={handleSubmit}\n                            handleInputChange={handleInputChange}\n                        />\n                    )\n                    : (\n                        <CreditCard />\n                    )\n                }\n            </section>\n            <button\n                className=\"AIVI-Chatbox-Mobile-Button Button\"\n                onClick={handleChatboxModal}\n            >\n                C\n            </button>\n            <section\n                className={`AIVI-Chatbox-Mobile-Model ${showChatInMobile ? `AIVI-Chatbox-Mobile-Show` : `AIVI-Chatbox-Mobile-Hide`}`}\n            >\n                <Chatbox\n                    userInput={userChatInput}\n                    updateInput={handleChatInputUpdate}\n                    submitInput={handleChatSubmit}\n                    conversation={conversation}\n                />\n            </section>\n            {/* FOR DEBUG PURPOSE ONLY */}\n            {/* START */}\n            <button className=\"Temporary-ChangeRender\" onClick={handleSectionsMenu}>\n                Change Section\n            </button>\n            <div className=\"Temporary-Sections\" data-visible={renderModel.toString()}>\n                <ul>\n                    {\n                        sections.map((section, index) => <li onClick={() => handleChangeSection(section)} key={index}>{section}</li>)\n                    }\n                </ul>\n            </div>\n            {/* END */}\n        </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}