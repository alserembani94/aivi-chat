{"version":3,"sources":["assets/images/Icon-Shopping.svg","assets/images/Icon-Utilities.svg","assets/images/Icon-Groceries.svg","assets/images/Icon-Education.svg","assets/images/Icon-Travel.svg","assets/images/Icon-Entertainment.svg","assets/images/Icon-Dining.svg","assets/images/Icon-Petrol.svg","assets/images/Icon-Health.svg","components/Chatbox/Chatbox.tsx","components/CustomComponent/InputBox.tsx","components/CustomComponent/InputDropdown.tsx","components/CustomComponent/TabBar.tsx","components/CustomComponent/Checkbox.tsx","components/CustomComponent/ImageSelect.tsx","components/Leftbox/CashFromCard/CashFromCardForm.tsx","components/Leftbox/SubmittedView.tsx","components/Leftbox/CashFromCard/CashFromCard.tsx","components/Leftbox/Credit Card/AvailableCard.tsx","components/Leftbox/Credit Card/ExpensesDetails.tsx","utils/Images.tsx","components/Leftbox/Credit Card/Expenses.tsx","components/Leftbox/Credit Card/MonthlyIncome.tsx","components/Leftbox/Credit Card/CreditCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Chatbox","userInput","updateInput","submitInput","conversation","React","useEffect","Array","from","document","getElementsByClassName","forEach","element","scrollIntoView","block","inline","behavior","handleSubmit","pressedKey","Fragment","className","src","alt","map","conversationItem","index","length","data-side","user","id","key","message","moment","timestamp","format","Provider","value","placeholder","onChange","currentTarget","onKeyPress","onClick","disabled","InputBox","slot","inputProps","handleInputChange","inputLabel","inputName","type","inputType","onFocus","e","parentElement","style","boxShadow","onBlur","inputState","InputDropdown","allowInput","useState","isDropdown","setDropdown","dropdownElement","useRef","handleClickOutside","event","current","contains","target","prevState","addEventListener","removeEventListener","toggleDropdown","ref","readOnly","console","log","data-show","optionList","optionItem","label","TabBar","currentTab","updateTab","tabBody","getElementById","data-active","name","toString","selectedTab","handleTabChange","content","Checkbox","updateSelected","rows","active","data-rows","MultipleCheckbox","selectedOptions","maxOption","Infinity","handleArrayUpdate","isActive","removedOptions","filter","selected","some","ImageSelect","image","MultiImageSelect","slotInput","CashFromCardForm","updateSubmitted","slotInputItem","transferFrom","phone","email","amount","check","SubmittedView","CashFromCard","submitted","AvailableCard","updateSelectedOptions","tempRef","optionLimit","rowSpan","setRowSpan","scrollWidth","ExpenseItem","expenseRange","updateRange","handleRangeChange","adjustedRange","parseInt","min","max","step","ReactSlider","thumbClassName","trackClassName","defaultValue","minDistance","pearling","ExpenseCategory","details","updateExpenseItem","handleRangeUpdate","subcategoryIndex","adjustedDetails","subcategory","category","subcategoryItem","ExpensesDetails","updateExpenseObject","handleExpenseUpdate","expenseItem","detailItem","Images","icon_shopping","require","icon_utilities","icon_groceries","icon_education","icon_travel","icon_entertainment","icon_dining","icon_petrol","icon_health","Expenses","expenseDetails","generateExpenseObject","optionDetailRender","setOptionDetailRender","incomeSourceFormat","MonthlyIncomeItem","incomeSource","incomeNo","handleIncomeSourceItemUpdate","stateName","updatedIncomeSourceItem","incomeSourceItem","MonthlyIncome","incomeSources","handleIncomeSourceUpdate","updatedIncomeSource","updateIncomeSources","industry","level","jobTitle","income","CreditCard","selectedBanks","setSelectedBanks","selectedExpenses","setSelectedExpenses","expenseObject","setExpenseObject","setIncomeSource","setCurrentTab","tabMenuList","generatedExpenseObject","option","includes","newExpenseObject","mockConversation","App","userSlot","setUserSlot","setSubmitted","userChatInput","setUserChatInput","setConversation","showChatInMobile","setShowChatInMobile","renderSection","setRenderSection","renderModel","setRenderModel","handleChatInputUpdate","handleChatSubmit","conversationMap","prevConversation","data-visible","section","handleChangeSection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.f288b5ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Icon-Shopping.cfd7ddc2.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Utilities.84da2eeb.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Groceries.74f92bf8.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Education.6f2e8372.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Travel.2ee0d820.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Entertainment.99ed0e07.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Dining.a0313c63.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Petrol.3a7fd64f.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Health.ed0e2fa8.svg\";","import React from 'react';\nimport {\n    MdAdd,\n    MdMic,\n} from 'react-icons/md';\nimport {\n    // RiEmotionHappyLine,\n    RiSendPlaneFill,\n} from 'react-icons/ri';\nimport { IconContext } from 'react-icons/lib';\nimport moment from 'moment';\n\ninterface ChatboxProps {\n    userInput: string;\n    updateInput: (userInput: string) => void;\n    submitInput: () => void,\n    conversation: {\n        user?: string;\n        timestamp?: string;\n        message?: string;\n    }[];\n}\n\nconst Chatbox: React.FC<ChatboxProps> = ({userInput, updateInput, submitInput, conversation}) => {\n    React.useEffect(() => {\n        // Single Element only\n        // const element = document.getElementById('Last-Dialog');\n        // element?.scrollIntoView({block: 'end', inline: 'end', behavior: 'smooth'});\n        // element?.scrollIntoView(false);\n        const elements: Element[] = Array.from(document.getElementsByClassName('Last-Dialog'));\n        elements.forEach(element => element.scrollIntoView({block: 'end', inline: 'end', behavior: 'smooth'}));\n    }, [conversation]);\n\n    const handleUpdate = (text: string) => updateInput(text);\n    const handleSubmit = (pressedKey: string) => pressedKey === 'Enter' && submitInput();\n\n    return (\n        <React.Fragment>\n            <div className=\"Chatbox-Container\">\n                    <div className=\"Chatbox-Avatar Button\">\n                        <img\n                            src=\"https://i.imgur.com/gqSZQbW.png\"\n                            alt=\"AIVI Avatar\"\n                        />\n                    </div>\n                    <div className=\"Chatbox-Box\">\n                        <div className=\"Chatbox-Dialog\">\n                            {\n                                conversation.map((conversationItem, index) => (\n                                    <div\n                                        className={`Dialog-Container ${index === (conversation.length - 1) ? 'Last-Dialog' : 'Not-Last-Dialog'}`}\n                                        data-side={conversationItem.user === 'bot' ? 'left' : 'right'}\n                                        id={index === (conversation.length - 1) ? 'Last-Dialog' : 'Not-Last-Dialog'}\n                                        key={index}\n                                    >\n                                        <div className=\"Dialog-Bubble\">\n                                            <p>{conversationItem.message}</p>\n                                        </div>\n                                        <p className=\"Dialog-Timestamp\">{moment(conversationItem.timestamp).format('Do MMM YYYY h:mmA')}</p>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                        <div className=\"Chatbox-Input\">\n                            <button className=\"Chatbox-Input-UploadOptions Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Rotate Icon-Light Icon-Add' }} >\n                                    <MdAdd />\n                                </IconContext.Provider>\n                            </button>\n                            {/* <textarea\n                                className=\"Chatbox-Input-InputBox\"\n                                placeholder=\"Input here\"\n                                value={userInput}\n                                onChange={({ currentTarget: {value} }) => handleUpdate(value)}\n                                onKeyPress={({ key: pressedKey}) => handleSubmit(pressedKey)}\n                            /> */}\n                            <input\n                                className=\"Chatbox-Input-InputBox\"\n                                placeholder=\"Input here\"\n                                value={userInput}\n                                onChange={({ currentTarget: {value} }) => handleUpdate(value)}\n                                onKeyPress={({ key: pressedKey}) => handleSubmit(pressedKey)}\n                            />\n                            \n                            <button className=\"Chatbox-Input-Audible Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Audible' }} >\n                                    <MdMic />\n                                </IconContext.Provider>\n                            </button>\n                            {/* <button className=\"Chatbox-Input-Smiley Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Smiley' }} >\n                                    <RiEmotionHappyLine />\n                                </IconContext.Provider>\n                            </button> */}\n                            <button\n                                className=\"Chatbox-Input-Send Button Button-Send\"\n                                onClick={() => handleSubmit('Enter')}\n                                disabled={userInput === ''}\n                            >\n                                <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Send' }} >\n                                    <RiSendPlaneFill />\n                                </IconContext.Provider>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n        </React.Fragment>\n    );\n}\n\nexport default Chatbox;","import React from 'react';\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\n// type slotType = {\n//     [transferFrom: string]: string,\n//     name: string,\n//     phone: string,\n//     email: string,\n//     amount: string,\n// };\n\ninterface InputBoxProps {\n    slot: any;\n    inputProps: slotInputType;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\nconst InputBox: React.FC<InputBoxProps> = ({slot, inputProps, handleInputChange}) => {\n    const handleInputFocus = (e: React.FocusEvent) => {\n        if (e.currentTarget.parentElement?.parentElement) e.currentTarget.parentElement.parentElement.style.boxShadow = 'var(--selected-box-shadow)';\n    };\n\n    const handleInputBlur = (e: any) => {\n        if (e.currentTarget.parentElement?.parentElement)  e.currentTarget.parentElement.parentElement.style.boxShadow = 'var(--box-shadow)';\n    };\n\n    return (\n        <div\n            className=\"InputBox-Container\"\n        >\n            <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n            <div className=\"InputBox-InputArea\">\n                {\n                    inputProps.inputName === 'amount' && <p className=\"InputBox-Currency\">RM</p>\n                }\n                <input\n                    type={inputProps.inputType}\n                    onFocus={handleInputFocus}\n                    onBlur={handleInputBlur}\n                    value={slot[inputProps.inputState]}\n                    onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default InputBox;","import React from 'react';\nimport {\n    IoIosArrowDown,\n    IoIosClose,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\n// Input Configuration Formatting\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    optionList?: InputOptionType[],\n};\n\n// All slot data\n\n// Props Configuration\ninterface InputDropdownProps {\n    slot: any;\n    inputProps: slotInputType;\n    handleInputChange: (value: string, stateName: string) => void;\n    allowInput: boolean;\n    \n}\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\n// function useOutsideAlerter(ref: React.MutableRefObject<null | HTMLElement>) {\n//     React.useEffect(() => {\n//         /**\n//          * Alert if clicked on outside of element\n//          */\n//         function handleClickOutside(event: { target: any; }) {\n//             if (ref.current && !ref.current.contains(event.target)) {\n//                 alert(\"You clicked outside of me!\");\n//             }\n//         }\n\n//         // Bind the event listener\n//         document.addEventListener(\"mousedown\", handleClickOutside);\n//         return () => {\n//             // Unbind the event listener on clean up\n//             document.removeEventListener(\"mousedown\", handleClickOutside);\n//         };\n//     }, [ref]);\n// }\n\nconst InputDropdown: React.FC<InputDropdownProps> = ({slot, inputProps, handleInputChange, allowInput = false}) => {\n    const [isDropdown, setDropdown] = React.useState(false);\n\n    const dropdownElement = React.useRef<null | HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        function handleClickOutside(event: { target: any; }) {\n            if (dropdownElement.current && !dropdownElement.current.contains(event.target)) {\n                if (isDropdown) {\n                    setDropdown(prevState => { return false });\n                }\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [dropdownElement, isDropdown]);\n\n    const toggleDropdown = () => {\n        setDropdown(prevState => { return !prevState });\n    };\n\n    const handleChooseOption = (value: string) => {\n        console.log('Go here?');\n        handleInputChange(value, inputProps.inputState);\n        setDropdown(prevState => { return !prevState });\n    };\n\n    const handleInputFocus = (e: React.FocusEvent) => {\n        // if (e.currentTarget.parentElement?.parentElement?.parentElement) e.currentTarget.parentElement.parentElement.parentElement.style.boxShadow = 'var(--selected-box-shadow)';\n        // setDropdown(prevState => { return true });\n    };\n\n    // const handleInputBlur = (e: any) => {\n    //     // if (e.currentTarget.parentElement?.parentElement?.parentElement)  e.currentTarget.parentElement.parentElement.parentElement.style.boxShadow = 'var(--box-shadow)';\n    //     setDropdown(prevState => { return false });\n    // };\n\n    return (\n        <div className=\"InputDropdown-Wrapper\" ref={dropdownElement}>\n            <div\n                className=\"InputBox-Container InputDropdown-Container\"\n            >\n                <div\n                    className=\"InputDropdown-Thumb\"\n                    onClick={toggleDropdown}\n                >\n                    <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n                    <div className=\"InputBox-InputArea\">\n                        {\n                            inputProps.inputName === 'amount' && <p className=\"InputBox-Currency\">RM</p>\n                        }\n                        <input\n                            type={inputProps.inputType}\n                            readOnly={!allowInput}\n                            onFocus={handleInputFocus}\n                            value={slot[inputProps.inputState]}\n                            onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                            placeholder={allowInput ? 'Select from dropdown, or type your own': 'Select from dropdown'}\n                        />\n                    </div>\n                </div>\n                <div className=\"InputDropdown-Action\">\n                    <button\n                        className=\"InputDropdown-Button Button\"\n                        onClick={()=> console.log()}\n                    >\n                        <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Close' }} >\n                            <IoIosClose />\n                        </IconContext.Provider>\n                    </button>\n                    <div\n                        className=\"InputDropdown-Button Button\"\n                        onClick={toggleDropdown}\n                    >\n                        <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Down' }} >\n                            <IoIosArrowDown />\n                        </IconContext.Provider>\n                    </div>\n                </div>\n            </div>\n            <div\n                className=\"InputDropdown-List\"\n                data-show={isDropdown}\n            >\n                <ul>\n                    {\n                        inputProps.optionList && inputProps.optionList.length !== 0\n                        ? inputProps.optionList.map((optionItem, index) => (\n                            <li\n                                key={index}\n                                onClick={() => handleChooseOption(optionItem.value)}\n                            >\n                                {optionItem.label}\n                            </li>\n                        ))\n                        : (\n                            <li\n                                className=\"InputDropdown-NoData\"\n                            >\n                                No item to display\n                            </li>\n                        )\n                        \n                    }\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default InputDropdown;","import React from 'react';\n\ntype optionList = {\n    label: string,\n    name: string,\n    content: JSX.Element;\n};\n\ninterface TabBarProps {\n    currentTab: string;\n    updateTab: (selectedTab: string) => void;\n    optionList: optionList[];\n}\n\nconst TabBar: React.FC<TabBarProps> = ({currentTab, updateTab, optionList}) => {\n    const handleTabChange = (selectedTab: string) => {\n        const tabBody = document.getElementById(selectedTab);\n        tabBody && tabBody.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n        updateTab(selectedTab);\n    }\n\n    React.useEffect(() => {\n        const tabBody = document.getElementById(currentTab);\n        tabBody && tabBody.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <React.Fragment>\n            <div className=\"TabBar-Container\">\n                <ul className=\"TabBar-Header\">\n                    {\n                        optionList.map((optionItem, index) => (\n                            <li\n                                data-active={(optionItem.name === currentTab).toString()}\n                                onClick={() => handleTabChange(optionItem.name)}\n                                key={index}\n                            >\n                                {optionItem.label}\n                            </li>\n                        ))\n                    }\n                </ul>\n                <div className=\"TabBar-Body\" id=\"TabBar-Body\">\n                    {\n                        optionList.map((optionItem, index) => (\n                            <div className=\"TabBar-Body-Item\" id={optionItem.name} key={index}>\n                                {optionItem.content}\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TabBar;","import React from 'react';\nimport {\n    IoIosCheckmark,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype optionType = {\n    name: string,\n    label: string,\n};\n\ninterface CheckboxProps {\n    name: string;\n    label: string;\n    updateSelected: (value: string, isActive: boolean) => void;\n    rows?: number;\n    active: boolean;\n}\n\ninterface MultipleCheckboxProps {\n    optionList: optionType[];\n    selectedOptions: string[];\n    updateSelected: (selectedList: string[]) => void;\n    maxOption?: number;\n    rows?: number;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = ({name, label, updateSelected, rows, active}) => {\n    const handleUpdate = (value: string) => {\n        updateSelected(value, active);\n    }\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"Checkbox-Container\"\n                data-rows={rows?.toString()}\n                data-active={active}\n                onClick={() => handleUpdate(name)}\n            >\n                <div className=\"Checkbox-Indicator\">\n                    \n                    <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Check' }} >\n                        <IoIosCheckmark />\n                    </IconContext.Provider>\n                </div>\n                <p>{label}</p>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultipleCheckbox: React.FC<MultipleCheckboxProps> = ({optionList, selectedOptions, updateSelected, maxOption = Infinity, rows = 1}) => {\n\n    const handleArrayUpdate = (value: string, isActive: boolean) => {\n        // Deselect Option\n        if (isActive) {\n            const removedOptions = selectedOptions.filter(selected => selected !== value);\n            updateSelected(removedOptions);\n        }\n        // Select Option\n        else {\n            if (selectedOptions.length < maxOption) updateSelected([...selectedOptions, value]);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"Checkbox-Multiple\">\n            {\n                optionList.map((optionItem, index) => (\n                    <Checkbox\n                        name={optionItem.name}\n                        label={optionItem.label}\n                        updateSelected={handleArrayUpdate}\n                        rows={rows}\n                        active={selectedOptions.some(selected => selected === optionItem.name)}\n                        key={index}\n                    />\n                ))\n            }\n            </div>\n            {\n                maxOption !== Infinity && <p className=\"Checkbox-Limit\">Max: {maxOption}</p>\n            }\n        </React.Fragment>\n    );\n};\n\nexport {\n    Checkbox,\n    MultipleCheckbox,\n};","import React from 'react';\n\ntype optionType = {\n    name: string,\n    label: string,\n    image: string,\n};\n\ninterface ImageSelectType {\n    name: string;\n    label: string;\n    image: string;\n    updateSelected: (value: string, isActive: boolean) => void;\n    active: boolean;\n}\n\ninterface MultiImageSelectType {\n    optionList: optionType[];\n    selectedOptions: string[];\n    updateSelected: (selectedList: string[]) => void;\n    maxOption?: number;\n}\n\nconst ImageSelect: React.FC<ImageSelectType> = ({name, label, image, updateSelected, active}) => {\n    const handleUpdate = (value: string) => {\n        updateSelected(value, active);\n    }\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"ImageSelect-Wrapper\"\n                onClick={() => handleUpdate(name)}\n                data-active={active}\n            >\n                <div className=\"ImageSelect-ImageContainer\">\n                    <img src={image} alt={label} />\n                </div>\n                <p className=\"ImageSelect-Label\">{label}</p>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultiImageSelect: React.FC<MultiImageSelectType> = ({optionList, selectedOptions, updateSelected, maxOption = Infinity}) => {\n    const handleArrayUpdate = (value: string, isActive: boolean) => {\n        // Deselect Option\n        if (isActive) {\n            const removedOptions = selectedOptions.filter(selected => selected !== value);\n            updateSelected(removedOptions);\n        }\n        // Select Option\n        else {\n            if (selectedOptions.length < maxOption) updateSelected([...selectedOptions, value]);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"ImageSelect-Multiple\">\n                {\n                    optionList.map((optionItem, index) => (\n                        <ImageSelect\n                            name={optionItem.name}\n                            label={optionItem.label}\n                            image={optionItem.image}\n                            active={selectedOptions.some(selected => selected === optionItem.name)}\n                            updateSelected={handleArrayUpdate}\n                            key={index}\n                        />\n                    ))\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport {\n    MultiImageSelect,\n    ImageSelect,\n};","import React from 'react';\nimport { InputBox, InputDropdown } from '../../CustomComponent';\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ntype slotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ninterface CashFromCardProps {\n    slot: slotType;\n    updateSubmitted: () => void;\n    handleInputChange: (value: string, stateName: string) => void;\n    optionList?: InputOptionType[];\n}\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    optionList?: InputOptionType[];\n};\n\nconst slotInput: slotInputType[] = [\n        {\n            inputName: 'transferFrom',\n            inputState: 'transferFrom',\n            inputType: 'dropdown',\n            inputLabel: 'Transfer from',\n            optionList: [\n                {\n                    name: 'Hello',\n                    label: 'Hello',\n                    value: 'Hello',\n                },\n                {\n                    name: 'World',\n                    label: 'World',\n                    value: 'World',\n                },\n                {\n                    name: 'React',\n                    label: 'React',\n                    value: 'React',\n                },\n            ],\n        },\n        {\n            inputName: 'name',\n            inputState: 'name',\n            inputType: 'text',\n            inputLabel: 'Name',\n        },\n        {\n            inputName: 'phone',\n            inputState: 'phone',\n            inputType: 'text',\n            inputLabel: 'Phone',\n        },\n        {\n            inputName: 'email',\n            inputState: 'email',\n            inputType: 'email',\n            inputLabel: 'Email',\n        },\n        {\n            inputName: 'amount',\n            inputState: 'amount',\n            inputType: 'number',\n            inputLabel: 'Amount',\n        },\n    ];\n\nconst CashFromCardForm: React.FC<CashFromCardProps> = ({slot, updateSubmitted, handleInputChange, optionList}) => {\n    return (\n        <>\n            <section className=\"CashFromCard-Content\">\n                <p className=\"CashFromCard-Title\">\n                    Application Status: In Progress\n                </p>\n                <p className=\"CashFromCard-Description\">\n                    You can view your progress so far here. Feel free to edit the information by clicking on the field.\n                </p>\n                <div className=\"CashFromCard-Details\">\n                    {\n                        slotInput.map((slotInputItem: slotInputItemType, index: number) => (\n                            slotInputItem.inputType === 'dropdown'\n                            ? (\n                                <InputDropdown\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    allowInput={true}\n                                    key={index}\n                                />\n                            )\n                            : (\n                                <InputBox\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                        ))\n                    }\n                </div>\n            </section>\n            <section className=\"CashFromCard-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                    onClick={updateSubmitted}\n                    disabled={[slot.transferFrom, slot.name, slot.phone, slot.email, slot.amount].some(check => check === '')}\n                >\n                    Submit Application\n                </button>\n            </section>\n        </>\n    );\n}\n\nexport default CashFromCardForm;","import React from 'react';\n\ninterface SubmittedViewProps {\n    updateSubmitted: () => void;\n}\n\nconst SubmittedView: React.FC<SubmittedViewProps> = ({updateSubmitted}) => {\n    return (\n        <>\n            <section className=\"Leftbox-Submitted\">\n                <p>Application Form Submitted</p>\n                <img\n                    src=\"../images/submitted.svg\"\n                    alt=\"Submitted\"\n                />\n                <button\n                    className=\"Button Button-FitContent\"\n                    onClick={updateSubmitted}\n                >\n                    Back to Main Menu\n                </button>\n            </section>\n        </>\n    );\n}\n\nexport default SubmittedView;","import React from 'react';\nimport CashFromCardForm from './CashFromCardForm';\nimport SubmittedView from '../SubmittedView';\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ninterface CashFromCardProps {\n    slot: {\n        [transferFrom: string]: string,\n        name: string,\n        phone: string,\n        email: string,\n        amount: string,\n    };\n    submitted: boolean;\n    updateSubmitted: () => void;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\nconst CashFromCard: React.FC<CashFromCardProps> = ({slot, submitted, updateSubmitted, handleInputChange}) => {\n    if (!submitted) return <CashFromCardForm\n                                slot={slot}\n                                updateSubmitted={updateSubmitted}\n                                handleInputChange={handleInputChange}\n                            />\n    else return <SubmittedView updateSubmitted={updateSubmitted} />\n}\n\nexport default CashFromCard;","import React from 'react';\nimport {\n    MultipleCheckbox,\n} from '../../CustomComponent';\n\ninterface AvailableCardProps {\n    selectedOptions: string[];\n    updateSelectedOptions: (selected: string[]) => void;\n    optionLimit: number;\n}\n\nconst AvailableCard: React.FC<AvailableCardProps> = ({selectedOptions, updateSelectedOptions, optionLimit}) => {\n    const optionList = [\n        {\n            name: 'CIMB Bank',\n            label: 'CIMB Bank',\n        },\n        {\n            name: 'Alliance Bank',\n            label: 'Alliance Bank',\n        },\n        {\n            name: 'Maybank',\n            label: 'Maybank',\n        },\n        {\n            name: 'OCBC',\n            label: 'OCBC',\n        },\n        {\n            name: 'RHB Bank',\n            label: 'RHB Bank',\n        },\n        {\n            name: 'Public Bank',\n            label: 'Public Bank',\n        },\n        {\n            name: 'BSN',\n            label: 'BSN',\n        },\n        {\n            name: 'Bank Rakyat',\n            label: 'Bank Rakyat',\n        },\n        {\n            name: 'Affin Bank',\n            label: 'Affin Bank',\n        },\n        {\n            name: 'Standard Chartered',\n            label: 'Standard Chartered',\n        },\n        {\n            name: 'Citibank',\n            label: 'Citibank',\n        },\n        {\n            name: 'UOB Malaysia',\n            label: 'UOB Malaysia',\n        },\n        {\n            name: 'Hong Leong Bank',\n            label: 'Hong Leong Bank',\n        },\n        {\n            name: 'AEON Credit Service',\n            label: 'AEON Credit Service',\n        },\n        {\n            name: 'HSBC',\n            label: 'HSBC',\n        },\n        {\n            name: 'Paydee',\n            label: 'Paydee',\n        },\n    ];\n    const tempRef = React.useRef<HTMLDivElement>(null);\n    const [rowSpan, setRowSpan] = React.useState(2);\n\n    const handleModifySelectedOptions = (selected: string[]) => {\n        updateSelectedOptions(selected);\n    }\n    \n    React.useEffect(() => {\n        setRowSpan(prevState => {\n            if (tempRef.current) {\n                if (tempRef.current.scrollWidth > 450) return 2\n                else return 1;\n            }\n            else return prevState;\n        });\n    }, [tempRef]);\n\n    return (\n        <React.Fragment>\n            <div ref={tempRef}>\n                <MultipleCheckbox\n                    optionList={optionList}\n                    selectedOptions={selectedOptions}\n                    updateSelected={handleModifySelectedOptions}\n                    maxOption={3}\n                    rows={rowSpan}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default AvailableCard;","import React from 'react';\n// import {\n//     RangeSlider,\n// } from '../../CustomComponent';\nimport ReactSlider from 'react-slider';\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n};\n\ninterface ExpenseItemProps {\n    name?: string;\n    expenseRange: number[];\n    updateRange: (value: number[]) => void;\n}\n\ninterface ExpenseCategoryProps {\n    details: ExpenseDetails;\n    updateExpenseItem: (expenseItem: ExpenseDetails) => void;\n}\n\ninterface ExpenseDetailsProps {\n    details: ExpenseDetails[];\n    updateExpenseObject: (expenseObject: ExpenseDetails[]) => void;\n}\n\nconst ExpenseItem: React.FC<ExpenseItemProps> = ({name, expenseRange, updateRange}) => {\n    const minRange = 200;\n    const maxRange = 10000;\n    const sliderStep = 100;\n    const sliderMinDistance = 500;\n\n    const handleRangeChange = (value: number[]) => {\n        updateRange(value);\n    }\n\n    const handleInputChange = (value: string, index: number) => {\n        const adjustedRange = expenseRange;\n        adjustedRange[index] = parseInt(value);\n        handleRangeChange(adjustedRange);\n    }\n\n    return (\n        <div className=\"ExpenseDetails-Item\">\n            <input\n                className=\"ExpenseDetails-Input ExpenseDetails-InputMin\"\n                type=\"number\"\n                min={minRange}\n                max={maxRange}\n                step={sliderStep}\n                value={expenseRange[0]}\n                onChange={({ currentTarget: { value } }) => handleInputChange(value, 0)}\n                readOnly={true}\n            ></input>\n            <div className=\"ExpenseDetails-Slider\">\n                {\n                    name && <p className=\"ExpenseDetails-Label\">{name}</p>\n                }\n                {/* <RangeSlider\n                    min={minRange}\n                    max={maxRange}\n                    step={sliderStep}\n                    minDistance={sliderMinDistance}\n                    defaultValue={expenseRange}\n                    value={expenseRange}\n                    handleChange={handleRangeChange}\n                /> */}\n                <ReactSlider\n                    className=\"RangeSlider-Item\"\n                    thumbClassName=\"RangeSlider-Thumb\"\n                    trackClassName=\"RangeSlider-Track\"\n                    defaultValue={expenseRange}\n                    step={sliderStep}\n                    minDistance={sliderMinDistance}\n                    pearling={true}\n                    min={minRange}\n                    max={maxRange}\n                    onChange={(value) => handleRangeChange(value as number[])}\n                />\n            </div>\n            <input\n                className=\"ExpenseDetails-Input ExpenseDetails-InputMax\"\n                type=\"number\"\n                min={minRange}\n                max={maxRange}\n                step={sliderStep}\n                value={expenseRange[1]}\n                onChange={({ currentTarget: { value } }) => handleInputChange(value, 1)}\n                readOnly={true}\n            ></input>\n        </div>\n    );\n}\n\nconst ExpenseCategory: React.FC<ExpenseCategoryProps> = ({details, updateExpenseItem}) => {\n    const handleRangeUpdate = (value: number[], subcategoryIndex?: number) => {\n        const adjustedDetails = details;\n        if (adjustedDetails.subcategory) {\n            adjustedDetails.subcategory[subcategoryIndex as number].expenseRange = value;\n        }\n        else {\n            adjustedDetails.expenseRange = value;\n        }\n        updateExpenseItem(adjustedDetails);\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"ExpenseDetails-Wrapper\">\n                <p className=\"ExpenseDetails-Title\">{details.category}</p>\n                <div className=\"ExpenseDetails-Container\">\n                    {\n                        details.subcategory\n                        ? details.subcategory.map((subcategoryItem, index) => (\n                            <ExpenseItem\n                                name={subcategoryItem.name}\n                                expenseRange={subcategoryItem.expenseRange}\n                                updateRange={value => handleRangeUpdate(value, index)}\n                                key={index}\n                            />\n                        ))\n                        : <ExpenseItem\n                            expenseRange={details.expenseRange as number[]}\n                            updateRange={value => handleRangeUpdate(value)}\n                        />\n                    }\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nconst ExpensesDetails: React.FC<ExpenseDetailsProps> = ({details, updateExpenseObject}) => {\n    const handleExpenseUpdate = (expenseItem: ExpenseDetails) => {\n        const adjustedDetails = details.map(detailItem => (detailItem.category === expenseItem.category) ? expenseItem : detailItem);\n        updateExpenseObject(adjustedDetails);\n        // console.log(adjustedDetails);\n    }\n\n    return (\n        <React.Fragment>\n            {\n                details.map((detailItem, index) => (\n                    <ExpenseCategory\n                        details={detailItem}\n                        updateExpenseItem={handleExpenseUpdate}\n                        key={index}\n                    />\n                ))\n            }\n        </React.Fragment>\n    );\n};\n\nexport default ExpensesDetails;","export const Images = {\n    icon_shopping: require('../assets/images/Icon-Shopping.svg'),\n    icon_utilities: require('../assets/images/Icon-Utilities.svg'),\n    icon_groceries: require('../assets/images/Icon-Groceries.svg'),\n    icon_education: require('../assets/images/Icon-Education.svg'),\n    icon_travel: require('../assets/images/Icon-Travel.svg'),\n    icon_entertainment: require('../assets/images/Icon-Entertainment.svg'),\n    icon_dining: require('../assets/images/Icon-Dining.svg'),\n    icon_petrol: require('../assets/images/Icon-Petrol.svg'),\n    icon_health: require('../assets/images/Icon-Health.svg'),\n}","import React from 'react';\nimport {\n    MultiImageSelect,\n} from '../../CustomComponent';\nimport ExpensesDetails from './ExpensesDetails';\nimport { Images } from '../../../utils/Images';\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n}[];\n\ninterface ExpensesProps {\n    selectedOptions: string[];\n    updateSelectedOptions: (selected: string[]) => void;\n    optionLimit: number;\n    expenseDetails: ExpenseDetails;\n    generateExpenseObject: () => void;\n    updateExpenseObject: (expenseObject: ExpenseDetails) => void;\n}\n\nconst Expenses: React.FC<ExpensesProps> = ({selectedOptions, updateSelectedOptions, optionLimit, expenseDetails, generateExpenseObject, updateExpenseObject}) => {\n    const [optionDetailRender, setOptionDetailRender] = React.useState<boolean>(false);\n    const optionList = [\n        {\n            name: 'Shopping',\n            label: 'Shopping',\n            image: Images.icon_shopping,\n        },\n        {\n            name: 'Utilities',\n            label: 'Utilities',\n            image: Images.icon_utilities,\n        },\n        {\n            name: 'Groceries',\n            label: 'Groceries',\n            image: Images.icon_groceries,\n        },\n        {\n            name: 'Education',\n            label: 'Education',\n            image: Images.icon_education,\n        },\n        {\n            name: 'Travel',\n            label: 'Travel',\n            image: Images.icon_travel,\n        },\n        {\n            name: 'Entertainment',\n            label: 'Entertainment',\n            image: Images.icon_entertainment,\n        },\n        {\n            name: 'Dining',\n            label: 'Dining',\n            image: Images.icon_dining,\n        },\n        {\n            name: 'Petrol',\n            label: 'Petrol',\n            image: Images.icon_petrol,\n        },\n        {\n            name: 'Health & Insurance',\n            label: 'Health & Insurance',\n            image: Images.icon_health,\n        },\n    ];\n\n    const handleOptionDetails = () => {\n        if (!optionDetailRender) {\n            generateExpenseObject();\n        }\n\n        setOptionDetailRender(prevState => { return !prevState });\n    }\n\n    const handleModifySelectedOptions = (selected: string[]) => {\n        updateSelectedOptions(selected);\n    }\n\n    const handleExpenseDetailsUpdate = (expenseDetails: ExpenseDetails) => {\n        updateExpenseObject(expenseDetails);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"Expenses\">\n                {\n                    !optionDetailRender\n                    ? (\n                        <div className=\"Expenses-SelectWrapper\">\n                            <MultiImageSelect\n                                optionList={optionList}\n                                selectedOptions={selectedOptions}\n                                updateSelected={handleModifySelectedOptions}\n                                maxOption={optionLimit}\n                            />\n                        </div>\n                    )\n                    : (\n                        <ExpensesDetails\n                            details={expenseDetails}\n                            updateExpenseObject={handleExpenseDetailsUpdate}\n                        />\n                    )\n                }\n                <div className=\"Expenses-Proceed\">\n                    <button\n                        disabled={selectedOptions.length !== optionLimit}\n                        onClick={handleOptionDetails}\n                    >Proceed</button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Expenses;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\n\ntype IncomeSourceType = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n};\n\ninterface IncomeSourceItemProps {\n    incomeSource: IncomeSourceType;\n    incomeNo: number;\n    handleIncomeSourceItemUpdate: (incomeSourceItem: IncomeSourceType) => void;\n}\n\ninterface MonthlyIncomeProps {\n    incomeSources: IncomeSourceType[];\n    handleIncomeSourceUpdate: (updatedIncomeSource: IncomeSourceType[]) => void;\n}\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    optionList?: InputOptionType[];\n};\n\nconst incomeSourceFormat: slotInputItemType[] = [\n    // {\n    //     inputName: 'transferFrom',\n    //     inputState: 'transferFrom',\n    //     inputType: 'dropdown',\n    //     inputLabel: 'Transfer from',\n    //     optionList: [\n    //         {\n    //             name: 'Hello',\n    //             label: 'Hello',\n    //             value: 'Hello',\n    //         },\n    //         {\n    //             name: 'World',\n    //             label: 'World',\n    //             value: 'World',\n    //         },\n    //         {\n    //             name: 'React',\n    //             label: 'React',\n    //             value: 'React',\n    //         },\n    //     ],\n    // },\n    {\n        inputName: 'industry',\n        inputState: 'industry',\n        inputType: 'dropdown',\n        inputLabel: 'Industry',\n        optionList: [\n            {\n                name: 'Hello',\n                label: 'Hello',\n                value: 'Hello',\n            },\n            {\n                name: 'World',\n                label: 'World',\n                value: 'World',\n            },\n            {\n                name: 'React',\n                label: 'React',\n                value: 'React',\n            },\n        ],\n    },\n    {\n        inputName: 'level',\n        inputState: 'level',\n        inputType: 'dropdown',\n        inputLabel: 'Level',\n        optionList: [\n            {\n                name: 'Hello',\n                label: 'Hello',\n                value: 'Hello',\n            },\n            {\n                name: 'World',\n                label: 'World',\n                value: 'World',\n            },\n            {\n                name: 'React',\n                label: 'React',\n                value: 'React',\n            },\n        ],\n    },\n    {\n        inputName: 'jobTitle',\n        inputState: 'jobTitle',\n        inputType: 'text',\n        inputLabel: 'Job Title',\n    },\n    {\n        inputName: 'income',\n        inputState: 'income',\n        inputType: 'number',\n        inputLabel: 'Income',\n    },\n];\n\nconst MonthlyIncomeItem: React.FC<IncomeSourceItemProps> = ({incomeSource, incomeNo, handleIncomeSourceItemUpdate}) => {\n    const handleInputChange = (value: string, stateName: string) => {\n        const updatedIncomeSourceItem = {...incomeSource, [stateName]: value};\n        handleIncomeSourceItemUpdate(updatedIncomeSourceItem);\n    }\n\n    return (\n        <div className=\"MonthlyIncome-Container\">\n            <p>Income {incomeNo}</p>\n            {\n                incomeSourceFormat.map((incomeSourceItem, index) => (\n                    incomeSourceItem.inputType === 'dropdown'\n                    ? (\n                        <InputDropdown\n                            slot={incomeSource}\n                            inputProps={incomeSourceItem}\n                            handleInputChange={handleInputChange}\n                            allowInput={true}\n                            key={index}\n                        />\n                    )\n                    : (\n                        <InputBox\n                            slot={incomeSource}\n                            inputProps={incomeSourceItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                ))\n            }\n            {/* <InputBox\n                slot={incomeSource}\n                inputProps={incomeSourceFormat[0]}\n\n            /> */}\n        </div>\n    );\n}\n\nconst MonthlyIncome: React.FC<MonthlyIncomeProps> = ({ incomeSources, handleIncomeSourceUpdate }) => {\n    const updateIncomeSources = (incomeSourceItem: IncomeSourceType, index: number) => {\n        const updatedIncomeSource = [...incomeSources];\n        updatedIncomeSource[index] = incomeSourceItem;\n        handleIncomeSourceUpdate(updatedIncomeSource);\n    };\n\n    const addIncomeSource = () => {\n        const emptyIncomeSource = {\n            category: '',\n            industry: '',\n            level: '',\n            jobTitle: '',\n            income: '',\n        };\n        handleIncomeSourceUpdate([...incomeSources, emptyIncomeSource])\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"MonthlyIncome-Wrapper\">\n                {\n                    incomeSources.map((incomeSourceItem, index) => (\n                        <MonthlyIncomeItem\n                            incomeSource={incomeSourceItem}\n                            incomeNo={index + 1}\n                            handleIncomeSourceItemUpdate={(incomeSourceItem) => updateIncomeSources(incomeSourceItem, index)}\n                            key={index}\n                        />\n                    ))\n                }\n                <button onClick={addIncomeSource}>Add</button>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default MonthlyIncome;","import React from 'react';\nimport {\n    TabBar,\n} from '../../CustomComponent';\nimport AvailableCard from './AvailableCard';\nimport Expenses from './Expenses';\nimport MonthlyIncome from './MonthlyIncome';\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n}[];\n\ntype IncomeSource = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n}[];\n\nconst CreditCard = () => {\n    // AVAILABLE BANKS CONFIGURATION\n    const [selectedBanks, setSelectedBanks] = React.useState<string[]>([]);\n    const banksLimit = 3;\n\n    const handleSelectedBanks = (selected: string[]) => {\n        setSelectedBanks(selected);\n    };\n\n    // EXPENSES CONFIGURATION\n    const [selectedExpenses, setSelectedExpenses] = React.useState<string[]>([]);\n    const expensesLimit = 3;\n\n    const handleSelectedExpenses = (selected: string[]) => {\n        setSelectedExpenses(selected);\n    };\n\n    const [expenseObject, setExpenseObject] = React.useState<any[]>([]);\n\n    const generateExpenseObject = () => {\n        const generatedExpenseObject = selectedExpenses.map(option => {\n            let optionDetail = {};\n            if (['Shopping', 'Groceries', 'Travel'].includes(option)) {\n                optionDetail = {\n                    category: option,\n                    subcategory: [\n                        {\n                            name: 'Online',\n                            expenseRange: [2200, 8800],\n                        },\n                        {\n                            name: 'Traditional',\n                            expenseRange: [3000, 7000],\n                        },\n                    ],\n                };                    \n            }\n            else {\n                optionDetail = {\n                    category: option,\n                    expenseRange: [1000, 8100],\n                };  \n            }\n            return optionDetail;\n        });\n\n        setExpenseObject(generatedExpenseObject);\n    }\n\n    const updateExpenseObject = (newExpenseObject: ExpenseDetails) => {\n        setExpenseObject(newExpenseObject);\n    }\n\n    // MONTHLY INCOME CONFIGURATION\n    const [incomeSource, setIncomeSource] = React.useState<IncomeSource>([\n        {\n            category: '',\n            industry: '',\n            level: '',\n            jobTitle: '',\n            income: '',\n        },\n    ]);\n\n    const updateIncomeSource = (updatedIncomeSource: IncomeSource) => {\n        setIncomeSource(() => { return updatedIncomeSource });\n    }\n    \n    // TAB CONFIGURATION\n    const [currentTab, setCurrentTab] = React.useState('Monthly Income');\n    const tabMenuList = [\n        {\n            label: 'Available Card',\n            name: 'Available Card',\n            content: <AvailableCard\n                        selectedOptions={selectedBanks}\n                        updateSelectedOptions={handleSelectedBanks}\n                        optionLimit={banksLimit}\n                    />,\n        },\n        {\n            label: 'Expenses',\n            name: 'Expenses',\n            content: <Expenses\n                        selectedOptions={selectedExpenses}\n                        updateSelectedOptions={handleSelectedExpenses}\n                        optionLimit={expensesLimit}\n                        expenseDetails={expenseObject}\n                        generateExpenseObject={generateExpenseObject}\n                        updateExpenseObject={updateExpenseObject}\n                    />,\n        },\n        {\n            label: 'Monthly Income',\n            name: 'Monthly Income',\n            content: <MonthlyIncome\n                        incomeSources={incomeSource}\n                        handleIncomeSourceUpdate={updateIncomeSource}\n                    />,\n        },\n    ];\n\n    const handleChangeTab = (selectedTab: string) => {\n        setCurrentTab(() => { return selectedTab });\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"CreditCard-Content\">\n                <TabBar\n                    currentTab={currentTab}\n                    updateTab={handleChangeTab}\n                    optionList={tabMenuList}\n                />\n            </div>\n            <div className=\"CreditCard-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                >\n                    Submit Application\n                </button>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CreditCard;","import React from 'react';\nimport './App.scss';\nimport {\n    MdMenu,\n} from 'react-icons/md';\nimport { IconContext } from 'react-icons/lib';\nimport moment from 'moment';\n\nimport {\n    Chatbox,\n    CashFromCard,\n    CreditCard,\n} from './components';\n\n// import { validateData } from './utils/DataValidation';\n\ntype mockSlotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    optionList?: InputOptionType[];\n};\n\ninterface conversationState {\n    user?: string;\n    timestamp?: string;\n    message?: string;\n}\n\nconst mockConversation = [\n    {\n        user: 'bot',\n        timestamp: '2020-09-09',\n        message: 'Welcome!',\n    },\n    {\n        user: 'user',\n        timestamp: '2020-09-09',\n        message: 'Hey!',\n    },\n    {\n        user: 'bot',\n        timestamp: '2020-09-09',\n        message: 'Are you interested in anything?',\n    },\n    {\n        user: 'user',\n        timestamp: '2020-09-09',\n        message: 'I would like to order a aglio e olio, with a freckle of cinnamon, and the cherry on top!',\n    },\n];\n\nfunction App() {\n    const [userSlot, setUserSlot] = React.useState({\n        transferFrom: '',\n        name: '',\n        phone: '',\n        email: '',\n        amount: '',\n    });\n    const [submitted, setSubmitted] = React.useState(false);\n    const [userChatInput, setUserChatInput] = React.useState('');\n    const [conversation, setConversation] = React.useState<conversationState[]>(mockConversation);\n    const [showChatInMobile, setShowChatInMobile] = React.useState(false);\n    const [renderSection, setRenderSection] = React.useState('Credit Card');\n    const [renderModel, setRenderModel] = React.useState(false);\n\n    const sections = ['Cash From Card', 'Credit Card'];\n\n    React.useEffect(() => {\n        // const rootStyle = document.documentElement.style;\n        // rootStyle.setProperty('--sidebar-width', '10px');\n        // console.log(validateData('Hello', 'email'));\n        // setInterval({}, 1000); // refresh every second - Is this a good practice?\n        // console.log(showChatInMobile);\n    }, [showChatInMobile]);\n\n    // Functions for leftbox\n    const handleInputChange = (value: string, stateName: string) => {\n        setUserSlot(() => {return {...userSlot, [stateName]: value}});\n    };\n\n    const handleSubmit = () => {\n        setSubmitted(prevState => { return !prevState});\n    };\n\n    // Functions for chatbox\n    const handleChatInputUpdate = (value: string) => {\n        setUserChatInput(() => value);\n    };\n\n    const handleChatSubmit = () => {\n        if (userChatInput !== '') {\n            const conversationMap = {\n                user: 'User',\n                timestamp: moment().format(),\n                message: userChatInput,\n            };\n            setConversation(prevConversation => { return [...prevConversation, conversationMap] });\n            setUserChatInput('');\n        }\n    };\n\n    const handleChatboxModal = () => {\n        setShowChatInMobile(prevState => { return !prevState });\n    }\n\n    // FOR DEBUG PURPOSE ONLY\n    // START\n    const handleSectionsMenu = () => {\n        setRenderModel(prevState => { return !prevState });\n    }\n\n    const handleChangeSection = (section: string) => {\n        setRenderSection(() => { return section })\n        setRenderModel(prevState => { return !prevState });\n    }\n    // END\n\n\n    return (\n        <main className=\"AIVI-Page\">\n            <section className=\"AIVI-Sidebar\">\n                <div className=\"Button Button-Hamburger\">\n                    <IconContext.Provider value={{ className: 'Icon-Rotate Icon-Light Icon-Hamburger' }} >\n                        <MdMenu />\n                    </IconContext.Provider>\n                </div>\n            </section>\n            <section className=\"AIVI-Chatbox\">\n                <Chatbox\n                    userInput={userChatInput}\n                    updateInput={handleChatInputUpdate}\n                    submitInput={handleChatSubmit}\n                    conversation={conversation}\n                />\n            </section>\n            <section className=\"AIVI-Leftbox\">\n                {\n                    renderSection === 'Cash From Card'\n                    ? (\n                        <CashFromCard\n                            slot={userSlot}\n                            submitted={submitted}\n                            updateSubmitted={handleSubmit}\n                            handleInputChange={handleInputChange}\n                        />\n                    )\n                    : (\n                        <CreditCard />\n                    )\n                }\n            </section>\n            <button\n                className=\"AIVI-Chatbox-Mobile-Button Button\"\n                onClick={handleChatboxModal}\n            >\n                C\n            </button>\n            <section\n                className={`AIVI-Chatbox-Mobile-Model ${showChatInMobile ? `AIVI-Chatbox-Mobile-Show` : `AIVI-Chatbox-Mobile-Hide`}`}\n            >\n                <Chatbox\n                    userInput={userChatInput}\n                    updateInput={handleChatInputUpdate}\n                    submitInput={handleChatSubmit}\n                    conversation={conversation}\n                />\n            </section>\n            {/* FOR DEBUG PURPOSE ONLY */}\n            {/* START */}\n            <button className=\"Temporary-ChangeRender\" onClick={handleSectionsMenu}>\n                Change Section\n            </button>\n            <div className=\"Temporary-Sections\" data-visible={renderModel.toString()}>\n                <ul>\n                    {\n                        sections.map((section, index) => <li onClick={() => handleChangeSection(section)} key={index}>{section}</li>)\n                    }\n                </ul>\n            </div>\n            {/* END */}\n        </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}