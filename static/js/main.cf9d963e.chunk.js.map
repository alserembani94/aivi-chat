{"version":3,"sources":["assets/images/Icon-Shopping.svg","assets/images/Icon-Utilities.svg","assets/images/Icon-Groceries.svg","assets/images/Icon-Education.svg","assets/images/Icon-Travel.svg","assets/images/Icon-Entertainment.svg","assets/images/Icon-Dining.svg","assets/images/Icon-Petrol.svg","assets/images/Icon-Health.svg","assets/images/Icon-Send.svg","assets/images/Icon-Ticket.svg","assets/images/Icon-Readjust.svg","assets/images/Icon-Search.svg","assets/images/Image-Submitted.svg","assets/images/Logo-AIVI.svg","utils/Images.tsx","components/Sidebar/Menu.tsx","components/Sidebar/Sidebar.tsx","components/Chatbox/Chatbox.tsx","components/CustomComponent/InputBox.tsx","components/CustomComponent/InputDropdown.tsx","components/CustomComponent/TabBar.tsx","components/CustomComponent/Checkbox.tsx","components/CustomComponent/ImageSelect.tsx","components/CustomComponent/ToggleText.tsx","components/CustomComponent/ChecklistBox.tsx","components/CustomComponent/CounterInput.tsx","utils/DataValidation.tsx","components/Leftbox/CashFromCard/CashFromCardForm.tsx","components/Leftbox/SubmittedView.tsx","components/Leftbox/CashFromCard/CashFromCard.tsx","components/Leftbox/Credit Card/AvailableCard.tsx","components/Leftbox/Credit Card/ExpensesDetails.tsx","components/Leftbox/Credit Card/Expenses.tsx","components/Leftbox/Credit Card/MonthlyIncome.tsx","components/Leftbox/Credit Card/CreditCard.tsx","components/Leftbox/BalanceTransfer/BalanceTransferForm.tsx","components/Leftbox/BalanceTransfer/BalanceTransfer.tsx","components/Leftbox/Personal Loan/LoanDetails.tsx","components/Leftbox/Personal Loan/LoanCommitment.tsx","components/Leftbox/Personal Loan/MaritalStatus.tsx","components/Leftbox/Personal Loan/PersonalLoan.tsx","pages/SmartAssistant/index.tsx","components/CardResult/RewardItem.tsx","components/CardResult/CashbackItem.tsx","pages/Result/index.tsx","routers/index.tsx","store/reducer.js","store/actionTypes.js","store/store.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Images","icon_shopping","require","icon_utilities","icon_groceries","icon_education","icon_travel","icon_entertainment","icon_dining","icon_petrol","icon_health","icon_send","icon_ticket","icon_readjust","icon_search","image_submitted","logo_AIVI","menuNav","path","label","Menu","visible","toggleVisibility","history","useHistory","handleNavigation","route","push","Fragment","className","data-visible","onClick","src","alt","map","menuItem","index","key","Sidebar","React","useState","toggleMenu","setToggleMenu","handleMenuVisibility","prevState","Provider","value","mockConversation","user","timestamp","message","Chatbox","userChatInput","setUserChatInput","conversation","setConversation","useEffect","Array","from","document","getElementsByClassName","forEach","element","scrollIntoView","block","inline","behavior","handleChatSubmit","pressedKey","conversationMap","moment","format","prevConversation","conversationItem","length","data-side","id","placeholder","onChange","handleChatInputUpdate","currentTarget","onKeyPress","disabled","InputBox","slot","inputProps","handleInputChange","inputLabel","remarks","includes","type","inputType","inputState","inputName","InputDropdown","isDropdown","setDropdown","dropdownElement","useRef","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","toggleDropdown","ref","readOnly","dropdownOption","allowInput","onFocus","e","console","log","data-show","optionList","optionItem","TabBar","currentTab","updateTab","progressStrict","updateStrictTab","enabledTab","handleTabChange","selectedTab","tabBody","getElementById","data-active","name","data-enabled","content","every","enabledTabItem","nextActiveTabIndex","updatedEnabledTab","enabledItem","Checkbox","updateSelected","rows","active","data-rows","toString","MultipleCheckbox","selectedOptions","maxOption","Infinity","handleArrayUpdate","isActive","removedOptions","filter","selected","some","ImageSelect","image","MultiImageSelect","ToggleText","handleToggleUpdate","ChecklistBox","checklistItem","updateChecklistItem","handleUpdate","data-checked","checked","amount","min","MultiChecklistBox","checklistList","updateChecklistList","prevListLength","setPrevListLength","containers","getElementsByTagName","focus","updatedChecklistItem","updatedChecklist","updatedIndex","handleChecklistItemUpdate","CounterInput","updateCounter","unit","limit","handleCounterInput","extractedNumber","match","join","parsedNumber","startsWith","parseInt","substr","convertToInt","handleCounterFlactuate","operation","max","inputMode","slotInput","CashFromCardForm","updateSubmitted","slotInputItem","transferFrom","phone","email","check","SubmittedView","CashFromCard","userSlot","setUserSlot","submitted","setSubmitted","handleSubmit","stateName","AvailableCard","cardOwnership","updateCardOwnership","updateSelectedOptions","tempRef","optionLimit","rowSpan","setRowSpan","scrollWidth","cardOwnershipOptions","undefined","handleCardOwnershipToggle","ExpenseItem","expenseRange","updateRange","handleRangeChange","adjustedRange","step","ReactSlider","thumbClassName","trackClassName","defaultValue","minDistance","pearling","ExpenseCategory","details","updateExpenseItem","handleRangeUpdate","subcategoryIndex","adjustedDetails","subcategory","category","subcategoryItem","ExpensesDetails","updateExpenseObject","handleExpenseUpdate","expenseItem","detailItem","Expenses","expenseDetails","generateExpenseObject","optionDetailRender","setOptionDetailRender","incomeSourceFormat","categoryToggleOptions","MonthlyIncomeItem","incomeSource","incomeNo","handleIncomeSourceItemUpdate","updatedIncomeSourceItem","incomeSourceItem","MonthlyIncome","incomeSources","handleIncomeSourceUpdate","updatedIncomeSource","updateIncomeSources","industry","level","jobTitle","income","CreditCard","setCardOwnership","selectedBanks","setSelectedBanks","selectedExpenses","setSelectedExpenses","expenseObject","setExpenseObject","setIncomeSource","setCurrentTab","tabMenuList","status","enabled","generatedExpenseObject","option","newExpenseObject","setEnabledTab","handleChangeTab","nextActiveTab","dualDropdown","BalanceTransferForm","BalanceTransfer","transferTo","loanDetailsFormat","LoanDetails","loanDetails","handleLoanDetailsUpdate","updatedLoanDetailsItem","loanDetailsItem","LoanCommitment","loanCommitments","updateLoanCommitments","updatedLoanCommitments","maritalInput","spouseInput","MaritalStatus","maritalInfo","updateMaritalInfo","handleMaritalInfoUpdate","maritalStatus","spouseName","incomeInfo","updatedIncomeInfo","PersonalLoan","loanAmount","repaymentPeriod","setLoanDetails","setMaritalInfo","setLoanCommitments","updatedLoanDetails","updatedMaritalInfo","SmartAssistant","showChatInMobile","setShowChatInMobile","renderSection","setRenderSection","renderModel","setRenderModel","sectionToRender","handleSectionRendering","section","handleChangeSection","RewardItem","expandAll","toggleExpandAll","isExpanded","setExpanded","data-tip","data-for","data-expanded","place","CashbackItem","Result","allExpanded","setAllExpanded","toggleAllExpanded","period","setPeriod","setExpenseDetails","resetModal","setResetModal","searchModal","setSearchModal","handleModalToggle","modalName","VentasRoute","exact","private","sidebar","main","RouterLayout","mainPage","children","reducer","state","action","store","createStore","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.cf9d963e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Icon-Shopping.cfd7ddc2.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Utilities.84da2eeb.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Groceries.74f92bf8.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Education.6f2e8372.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Travel.2ee0d820.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Entertainment.99ed0e07.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Dining.a0313c63.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Petrol.3a7fd64f.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Health.ed0e2fa8.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Send.682b357a.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Ticket.c10f58ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Readjust.ce559335.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Search.e125f4f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/Image-Submitted.2b3babac.svg\";","module.exports = __webpack_public_path__ + \"static/media/Logo-AIVI.78bf7ac3.svg\";","export const Images = {\n    icon_shopping: require('../assets/images/Icon-Shopping.svg'),\n    icon_utilities: require('../assets/images/Icon-Utilities.svg'),\n    icon_groceries: require('../assets/images/Icon-Groceries.svg'),\n    icon_education: require('../assets/images/Icon-Education.svg'),\n    icon_travel: require('../assets/images/Icon-Travel.svg'),\n    icon_entertainment: require('../assets/images/Icon-Entertainment.svg'),\n    icon_dining: require('../assets/images/Icon-Dining.svg'),\n    icon_petrol: require('../assets/images/Icon-Petrol.svg'),\n    icon_health: require('../assets/images/Icon-Health.svg'),\n    icon_send: require('../assets/images/Icon-Send.svg'),\n    icon_ticket: require('../assets/images/Icon-Ticket.svg'),\n    icon_readjust: require('../assets/images/Icon-Readjust.svg'),\n    icon_search: require('../assets/images/Icon-Search.svg'),\n\n    image_submitted: require('../assets/images/Image-Submitted.svg'),\n\n    logo_AIVI: require('../assets/images/Logo-AIVI.svg'),\n}","import React from 'react';\nimport {\n    useHistory,\n} from 'react-router-dom';\nimport {\n    Images,\n} from '../../utils/Images';\n\ninterface MenuProps {\n    visible: boolean;\n    toggleVisibility: () => void;\n}\n\nconst menuNav = [\n    {\n        path: '/',\n        label: 'Home',\n    },\n    {\n        path: '/smart-assistant/',\n        label: 'Smart Assistant',\n    },\n    {\n        path: '/results/',\n        label: 'Result',\n    },\n];\n\nconst Menu: React.FC<MenuProps> = ({ visible, toggleVisibility }) => {\n    const history = useHistory();\n\n    const handleNavigation = (route: string) => {\n        history.push(route);\n        toggleVisibility();\n    };\n\n    return (\n        <React.Fragment>\n            <section className=\"Menu-Wrapper\" data-visible={visible} onClick={toggleVisibility}>\n            </section>\n            <section className=\"Menu-Container\" data-visible={visible}>\n                <button\n                    className=\"Menu-Logo\"\n                    onClick={() => handleNavigation('/')}\n                >\n                    <img\n                        src={Images.logo_AIVI}\n                        alt=\"AIVI\"\n                    />\n                </button>\n                <div className=\"Menu-Drawer\">\n                    {/* <button className=\"Menu-Button\">\n                        Hello\n                    </button> */}\n                    {\n                        menuNav.map((menuItem, index) => (\n                            <button\n                                key={index}\n                                className=\"Menu-Button\"\n                                onClick={() => handleNavigation(menuItem.path)}\n                            >{menuItem.label}</button>\n                        ))\n                    }\n                </div>\n            </section>\n        </React.Fragment>\n    );\n};\n\nexport default Menu;","import React from 'react';\nimport {\n    MdMenu,\n} from 'react-icons/md';\nimport { IconContext } from 'react-icons/lib';\nimport Menu from './Menu';\n\n\nconst Sidebar = () => {\n    const [toggleMenu, setToggleMenu] = React.useState<boolean>(false);\n\n    const handleMenuVisibility = () => {\n        setToggleMenu(prevState => { return !prevState });\n    };\n\n    return (\n        <React.Fragment>\n            <section className=\"AIVI-Sidebar\">\n                <button className=\"Button Button-Hamburger\" onClick={handleMenuVisibility}>\n                    <IconContext.Provider value={{ className: 'Icon-Rotate Icon-Light Icon-Hamburger' }} >\n                        <MdMenu />\n                    </IconContext.Provider>\n                </button>\n            </section>\n            <Menu\n                visible={toggleMenu}\n                toggleVisibility={handleMenuVisibility}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default Sidebar;","import React from 'react';\nimport {\n    MdAdd,\n    MdMic,\n} from 'react-icons/md';\n// import {\n//     // RiEmotionHappyLine,\n//     RiSendPlaneFill,\n// } from 'react-icons/ri';\nimport { IconContext } from 'react-icons/lib';\nimport { Images } from '../../utils/Images';\nimport moment from 'moment';\n\ninterface conversationState {\n    user?: string;\n    timestamp?: string;\n    message?: string;\n}\n\nconst mockConversation = [\n    {\n        user: 'bot',\n        timestamp: '2020-09-09',\n        message: 'Welcome!',\n    },\n    {\n        user: 'user',\n        timestamp: '2020-09-09',\n        message: 'Hey!',\n    },\n    {\n        user: 'bot',\n        timestamp: '2020-09-09',\n        message: 'Are you interested in anything?',\n    },\n    {\n        user: 'user',\n        timestamp: '2020-09-09',\n        message: 'I would like to order an aglio e olio, with a freckle of cinnamon, and the cherry on top!',\n    },\n];\n\nconst Chatbox: React.FC = () => {\n    const [userChatInput, setUserChatInput] = React.useState('');\n    const [conversation, setConversation] = React.useState<conversationState[]>(mockConversation);\n\n\n    React.useEffect(() => {\n        // Single Element only\n        // const element = document.getElementById('Last-Dialog');\n        // element?.scrollIntoView({block: 'end', inline: 'end', behavior: 'smooth'});\n        // element?.scrollIntoView(false);\n        const elements: Element[] = Array.from(document.getElementsByClassName('Last-Dialog'));\n        elements.forEach(element => element.scrollIntoView({block: 'end', inline: 'end', behavior: 'smooth'}));\n    }, [conversation]);\n\n    // Functions for chatbox\n    const handleChatInputUpdate = (value: string) => {\n        setUserChatInput(() => value);\n    };\n\n    const handleChatSubmit = (pressedKey: string) => {\n        if (pressedKey === 'Enter') {\n            if (userChatInput !== '') {\n                const conversationMap = {\n                    user: 'User',\n                    timestamp: moment().format(),\n                    message: userChatInput,\n                };\n                setConversation(prevConversation => { return [...prevConversation, conversationMap] });\n                setUserChatInput('');\n            }\n        }\n    };\n\n    // const handleChatInputUpdate = (text: string) => updateInput(text);\n    // const handleChatSubmit = (pressedKey: string) => pressedKey === 'Enter' && submitInput();\n\n    return (\n        <React.Fragment>\n            <div className=\"Chatbox-Container\">\n                    <div className=\"Chatbox-Avatar Button\">\n                        <img\n                            src=\"https://i.imgur.com/gqSZQbW.png\"\n                            alt=\"AIVI Avatar\"\n                        />\n                    </div>\n                    <div className=\"Chatbox-Box\">\n                        <div className=\"Chatbox-Dialog\">\n                            {\n                                conversation.map((conversationItem, index) => (\n                                    <div\n                                        className={`Dialog-Container ${index === (conversation.length - 1) ? 'Last-Dialog' : 'Not-Last-Dialog'}`}\n                                        data-side={conversationItem.user === 'bot' ? 'left' : 'right'}\n                                        id={index === (conversation.length - 1) ? 'Last-Dialog' : 'Not-Last-Dialog'}\n                                        key={index}\n                                    >\n                                        <div className=\"Dialog-Bubble\">\n                                            <p>{conversationItem.message}</p>\n                                            <p className=\"Dialog-Timestamp\">{moment(conversationItem.timestamp).format('HH:mm')}</p>\n                                        </div>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                        <div className=\"Chatbox-Input\">\n                            <button className=\"Chatbox-Input-UploadOptions Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Rotate Icon-Light Icon-Add' }} >\n                                    <MdAdd />\n                                </IconContext.Provider>\n                            </button>\n                            {/* <textarea\n                                className=\"Chatbox-Input-InputBox\"\n                                placeholder=\"Input here\"\n                                value={userChatInput}\n                                onChange={({ currentTarget: {value} }) => handleChatInputUpdate(value)}\n                                onKeyPress={({ key: pressedKey}) => handleChatSubmit(pressedKey)}\n                            /> */}\n                            <input\n                                className=\"Chatbox-Input-InputBox\"\n                                placeholder=\"Input here\"\n                                value={userChatInput}\n                                onChange={({ currentTarget: {value} }) => handleChatInputUpdate(value)}\n                                onKeyPress={({ key: pressedKey}) => handleChatSubmit(pressedKey)}\n                            />\n                            \n                            <button className=\"Chatbox-Input-Audible Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Audible' }} >\n                                    <MdMic />\n                                </IconContext.Provider>\n                            </button>\n                            {/* <button className=\"Chatbox-Input-Smiley Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Smiley' }} >\n                                    <RiEmotionHappyLine />\n                                </IconContext.Provider>\n                            </button> */}\n                            <button\n                                className=\"Chatbox-Input-Send Button Button-Send\"\n                                onClick={() => handleChatSubmit('Enter')}\n                                disabled={userChatInput === ''}\n                            >\n                                {/* <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Send' }} >\n                                    <RiSendPlaneFill />\n                                </IconContext.Provider> */}\n                                <img\n                                    src={Images.icon_send}\n                                    alt=\"Send\"\n                                />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n        </React.Fragment>\n    );\n}\n\nexport default Chatbox;","import React from 'react';\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    remarks?: string[],\n};\n\ninterface InputBoxProps {\n    slot: any;\n    inputProps: slotInputType;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\nconst InputBox: React.FC<InputBoxProps> = ({slot, inputProps, handleInputChange}) => {\n    // const handleInputFocus = (e: React.FocusEvent) => {\n    //     if (e.currentTarget.parentElement?.parentElement) e.currentTarget.parentElement.parentElement.style.boxShadow = '$selected-box-shadow';\n    // };\n\n    // const handleInputBlur = (e: any) => {\n    //     if (e.currentTarget.parentElement?.parentElement)  e.currentTarget.parentElement.parentElement.style.boxShadow = '$box-shadow';\n    // };\n\n    return (\n        <div\n            className=\"InputBox-Container\"\n        >\n            <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n            <div className=\"InputBox-InputArea\">\n                {\n                    inputProps.remarks?.includes('currency') && <p className=\"InputBox-Currency\">RM</p>\n                }\n                <input\n                    type={inputProps.inputType}\n                    // onFocus={handleInputFocus}\n                    // onBlur={handleInputBlur}\n                    value={slot[inputProps.inputState]}\n                    onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default InputBox;","import React from 'react';\nimport {\n    IoIosArrowDown,\n    IoIosClose,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\n// Input Configuration Formatting\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    // optionList?: InputOptionType[];\n    dropdownOption?: {\n        allowInput: boolean;\n        optionList: InputOptionType[];\n    }\n};\n\n// All slot data\n\n// Props Configuration\ninterface InputDropdownProps {\n    slot: any;\n    inputProps: slotInputType;\n    handleInputChange: (value: string, stateName: string) => void;\n    \n}\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\n// function useOutsideAlerter(ref: React.MutableRefObject<null | HTMLElement>) {\n//     React.useEffect(() => {\n//         /**\n//          * Alert if clicked on outside of element\n//          */\n//         function handleClickOutside(event: { target: any; }) {\n//             if (ref.current && !ref.current.contains(event.target)) {\n//                 alert(\"You clicked outside of me!\");\n//             }\n//         }\n\n//         // Bind the event listener\n//         document.addEventListener(\"mousedown\", handleClickOutside);\n//         return () => {\n//             // Unbind the event listener on clean up\n//             document.removeEventListener(\"mousedown\", handleClickOutside);\n//         };\n//     }, [ref]);\n// }\n\nconst InputDropdown: React.FC<InputDropdownProps> = ({slot, inputProps, handleInputChange}) => {\n    const [isDropdown, setDropdown] = React.useState(false);\n\n    const dropdownElement = React.useRef<null | HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        function handleClickOutside(event: { target: any; }) {\n            if (dropdownElement.current && !dropdownElement.current.contains(event.target)) {\n                if (isDropdown) {\n                    setDropdown(prevState => { return false });\n                }\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [dropdownElement, isDropdown]);\n\n    const toggleDropdown = () => {\n        setDropdown(prevState => { return !prevState });\n    };\n\n    const handleChooseOption = (value: string) => {\n        handleInputChange(value, inputProps.inputState);\n        setDropdown(prevState => { return !prevState });\n    };\n\n    const handleInputFocus = (e: React.FocusEvent) => {\n        // if (e.currentTarget.parentElement?.parentElement?.parentElement) e.currentTarget.parentElement.parentElement.parentElement.style.boxShadow = 'var(--selected-box-shadow)';\n        // setDropdown(prevState => { return true });\n    };\n\n    // const handleInputBlur = (e: any) => {\n    //     // if (e.currentTarget.parentElement?.parentElement?.parentElement)  e.currentTarget.parentElement.parentElement.parentElement.style.boxShadow = 'var(--box-shadow)';\n    //     setDropdown(prevState => { return false });\n    // };\n\n    return (\n        <div className=\"InputDropdown-Wrapper\" ref={dropdownElement}>\n            <div\n                className=\"InputBox-Container InputDropdown-Container\"\n            >\n                <div\n                    className=\"InputDropdown-Thumb\"\n                    onClick={toggleDropdown}\n                >\n                    <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n                    <div className=\"InputBox-InputArea\">\n                        {\n                            inputProps.inputName === 'amount' && <p className=\"InputBox-Currency\">RM</p>\n                        }\n                        <input\n                            type={inputProps.inputType}\n                            readOnly={!inputProps.dropdownOption?.allowInput}\n                            onFocus={handleInputFocus}\n                            value={slot[inputProps.inputState]}\n                            onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                            placeholder={inputProps.dropdownOption?.allowInput ? 'Select from dropdown, or type your own': 'Select from dropdown'}\n                        />\n                    </div>\n                </div>\n                <div className=\"InputDropdown-Action\">\n                    <button\n                        className=\"InputDropdown-Button Button\"\n                        onClick={()=> console.log()}\n                    >\n                        <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Close' }} >\n                            <IoIosClose />\n                        </IconContext.Provider>\n                    </button>\n                    <div\n                        className=\"InputDropdown-Button Button\"\n                        onClick={toggleDropdown}\n                    >\n                        <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Down' }} >\n                            <IoIosArrowDown />\n                        </IconContext.Provider>\n                    </div>\n                </div>\n            </div>\n            <div\n                className=\"InputDropdown-List\"\n                data-show={isDropdown}\n            >\n                <ul>\n                    {\n                        inputProps.dropdownOption && inputProps.dropdownOption.optionList.length !== 0\n                        ? inputProps.dropdownOption.optionList.map((optionItem, index) => (\n                            <li\n                                key={index}\n                                onClick={() => handleChooseOption(optionItem.value)}\n                            >\n                                {optionItem.label}\n                            </li>\n                        ))\n                        : (\n                            <li\n                                className=\"InputDropdown-NoData\"\n                            >\n                                No item to display\n                            </li>\n                        )\n                        \n                    }\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default InputDropdown;","import React from 'react';\nimport {\n    IoMdArrowForward,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype optionList = {\n    label: string,\n    name: string,\n    content: JSX.Element;\n    enabled?: boolean;\n};\n\ninterface TabBarProps {\n    currentTab: string;\n    updateTab: (selectedTab: string) => void;\n    optionList: optionList[];\n    progressStrict?: boolean;\n    updateStrictTab?: (enabledTab: boolean[] | undefined, nextActiveTab: string) => void;\n    enabledTab?: boolean[];\n}\n\nconst TabBar: React.FC<TabBarProps> = ({currentTab, updateTab, optionList, progressStrict = false, updateStrictTab, enabledTab}) => {\n    const handleTabChange = (selectedTab: string) => {\n        const tabBody = document.getElementById(selectedTab);\n        tabBody && tabBody.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n        updateTab(selectedTab);\n    }\n\n    const handleProceedTab = () => {\n        // let enablingFlag = false;\n        // let nextActiveTab = currentTab;\n        // const updatedTabConfig = optionList.map(optionItem => {\n        //     if (optionItem.name === currentTab) {\n        //         enablingFlag = true;\n        //         return optionItem;\n        //     };\n        //     if (enablingFlag) {\n        //         enablingFlag = false;\n        //         nextActiveTab = optionItem.name;\n        //         return {...optionItem, enabled: true};\n        //     }\n        //     return optionItem;\n        // });\n        // updateStrictTab && updateStrictTab(updatedTabConfig, nextActiveTab);\n        let nextActiveTabIndex = -1;\n        const updatedEnabledTab = enabledTab?.map((enabledItem, index) => {\n            enabledItem && (nextActiveTabIndex = index + 1);\n            if (nextActiveTabIndex === index) { return true; } else { return enabledItem; }\n        });\n        updateStrictTab && updateStrictTab(updatedEnabledTab, optionList[nextActiveTabIndex].name);\n    }\n\n    React.useEffect(() => {\n        const tabBody = document.getElementById(currentTab);\n        tabBody && tabBody.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentTab]);\n\n    return (\n        <React.Fragment>\n            <div className=\"TabBar-Container\">\n                <ul className=\"TabBar-Header\">\n                    {\n                        optionList.map((optionItem, index) => (\n                            <li\n                                data-active={optionItem.name === currentTab}\n                                data-enabled={progressStrict ? (enabledTab ? enabledTab[index] : true) : true}\n                                // onClick={() => handleTabChange(optionItem.name)}\n                                onClick={() => progressStrict ? (enabledTab && enabledTab[index] && handleTabChange(optionItem.name)) : handleTabChange(optionItem.name)}\n                                key={index}\n                            >\n                                {optionItem.label}\n                            </li>\n                        ))\n                    }\n                </ul>\n                <div className=\"TabBar-Body\" id=\"TabBar-Body\">\n                    {\n                        optionList.map((optionItem, index) => (\n                            (!progressStrict || (enabledTab && enabledTab[index])) && <div className=\"TabBar-Body-Item\" id={optionItem.name} key={index}>\n                                {optionItem.content}\n                            </div>\n                        ))\n                    }\n                </div>\n                {\n                    (progressStrict && !enabledTab?.every(enabledTabItem => enabledTabItem) ) && (\n                        <div className=\"TabBar-ProgressAction\">\n                            <button\n                                className=\"TabBar-ProgressAction-Proceed\"\n                                onClick={handleProceedTab}\n                            >\n                                <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Proceed' }} >\n                                    <IoMdArrowForward />\n                                </IconContext.Provider>\n                            </button>\n                        </div>\n                    )\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TabBar;","import React from 'react';\nimport {\n    IoIosCheckmark,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype optionType = {\n    name: string,\n    label: string,\n};\n\ninterface CheckboxProps {\n    name: string;\n    label: string;\n    updateSelected: (value: string, isActive: boolean) => void;\n    rows?: number;\n    active: boolean;\n}\n\ninterface MultipleCheckboxProps {\n    optionList: optionType[];\n    selectedOptions: string[];\n    updateSelected: (selectedList: string[]) => void;\n    maxOption?: number;\n    rows?: number;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = ({name, label, updateSelected, rows, active}) => {\n    const handleUpdate = (value: string) => {\n        updateSelected(value, active);\n    }\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"Checkbox-Container\"\n                data-rows={rows?.toString()}\n                data-active={active}\n                onClick={() => handleUpdate(name)}\n            >\n                <div className=\"Checkbox-Indicator\">\n                    <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Check' }} >\n                        <IoIosCheckmark />\n                    </IconContext.Provider>\n                </div>\n                <p>{label}</p>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultipleCheckbox: React.FC<MultipleCheckboxProps> = ({optionList, selectedOptions, updateSelected, maxOption = Infinity, rows = 1}) => {\n\n    const handleArrayUpdate = (value: string, isActive: boolean) => {\n        // Deselect Option\n        if (isActive) {\n            const removedOptions = selectedOptions.filter(selected => selected !== value);\n            updateSelected(removedOptions);\n        }\n        // Select Option\n        else {\n            if (selectedOptions.length < maxOption) updateSelected([...selectedOptions, value]);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"Checkbox-Multiple\">\n            {\n                optionList.map((optionItem, index) => (\n                    <Checkbox\n                        name={optionItem.name}\n                        label={optionItem.label}\n                        updateSelected={handleArrayUpdate}\n                        rows={rows}\n                        active={selectedOptions.some(selected => selected === optionItem.name)}\n                        key={index}\n                    />\n                ))\n            }\n            </div>\n            {\n                maxOption !== Infinity && <p className=\"Checkbox-Limit\">Max: {maxOption}</p>\n            }\n        </React.Fragment>\n    );\n};\n\nexport {\n    Checkbox,\n    MultipleCheckbox,\n};","import React from 'react';\n\ntype optionType = {\n    name: string,\n    label: string,\n    image: string,\n};\n\ninterface ImageSelectType {\n    name: string;\n    label: string;\n    image: string;\n    updateSelected: (value: string, isActive: boolean) => void;\n    active: boolean;\n}\n\ninterface MultiImageSelectType {\n    optionList: optionType[];\n    selectedOptions: string[];\n    updateSelected: (selectedList: string[]) => void;\n    maxOption?: number;\n}\n\nconst ImageSelect: React.FC<ImageSelectType> = ({name, label, image, updateSelected, active}) => {\n    const handleUpdate = (value: string) => {\n        updateSelected(value, active);\n    }\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"ImageSelect-Wrapper\"\n                onClick={() => handleUpdate(name)}\n                data-active={active}\n            >\n                <div className=\"ImageSelect-ImageContainer\">\n                    <img src={image} alt={label} />\n                </div>\n                <p className=\"ImageSelect-Label\">{label}</p>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultiImageSelect: React.FC<MultiImageSelectType> = ({optionList, selectedOptions, updateSelected, maxOption = Infinity}) => {\n    const handleArrayUpdate = (value: string, isActive: boolean) => {\n        // Deselect Option\n        if (isActive) {\n            const removedOptions = selectedOptions.filter(selected => selected !== value);\n            updateSelected(removedOptions);\n        }\n        // Select Option\n        else {\n            if (selectedOptions.length < maxOption) updateSelected([...selectedOptions, value]);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"ImageSelect-Multiple\">\n                {\n                    optionList.map((optionItem, index) => (\n                        <ImageSelect\n                            name={optionItem.name}\n                            label={optionItem.label}\n                            image={optionItem.image}\n                            active={selectedOptions.some(selected => selected === optionItem.name)}\n                            updateSelected={handleArrayUpdate}\n                            key={index}\n                        />\n                    ))\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport {\n    MultiImageSelect,\n    ImageSelect,\n};","import React from 'react';\n\ninterface ToggleTextProps {\n    optionList: string[];\n    selected: string;\n    handleToggleUpdate: (value: string) => void;\n}\n\nconst ToggleText: React.FC<ToggleTextProps> = ({optionList, selected, handleToggleUpdate}) => {\n    const handleToggleChange = (value: string) => {\n        handleToggleUpdate(value);\n    };\n\n    return (\n        <div className=\"ToggleText-Container\">\n            <ul>\n                {\n                    optionList.map((optionItem, index) => (\n                        <li\n                            key={index}\n                            onClick={() => handleToggleChange(optionItem)}\n                            data-active={optionItem === selected}\n                        >{optionItem}</li>\n                    ))\n                }\n            </ul>\n        </div>\n    );\n};\n\nexport default ToggleText;","import React from 'react';\nimport {\n    IoIosCheckmark,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype ChecklistItemType = {\n    checked: boolean,\n    name: string,\n    amount?: string,\n    remarks?: string[],\n};\n\ntype ChecklistType = ChecklistItemType[];\n\ninterface ChecklistBoxProps {\n    checklistItem: ChecklistItemType;\n    updateChecklistItem: (updatedChecklistItem: ChecklistItemType) => void;\n}\n\ninterface MultiChecklistBoxProps {\n    checklistList: ChecklistType;\n    updateChecklistList: (udpatedChecklistList : ChecklistType) => void;\n};\n\nconst ChecklistBox: React.FC<ChecklistBoxProps> = ({ checklistItem, updateChecklistItem}) => {\n    const handleUpdate = (value: string | boolean, key: string) => {\n        updateChecklistItem({...checklistItem, [key]: value});\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"ChecklistBox-Container\">\n                <button\n                    className=\"ChecklistBox-Checkbox\"\n                    data-checked={checklistItem.checked}\n                    onClick={() => handleUpdate(!checklistItem.checked, 'checked')}\n                >\n                    <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Check' }} >\n                        <IoIosCheckmark />\n                    </IconContext.Provider>\n                </button>\n                <input className=\"ChecklistBox-Label\"\n                    value={checklistItem.name}\n                    placeholder=\"Enter new input\"\n                    readOnly={checklistItem.remarks?.includes('readonly')}\n                    onChange={({ currentTarget: { value } }) => handleUpdate(value, 'name')}\n                />\n                {\n                    checklistItem.remarks?.includes('amount') && checklistItem.checked && (\n                        <div className=\"ChecklistBox-Amount\">\n                            RM <input\n                                value={checklistItem.amount}\n                                type=\"number\"\n                                min={0}\n                                onChange={({ currentTarget: { value } }) => handleUpdate(value, 'amount')}\n                            />\n                        </div>\n                    )\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultiChecklistBox: React.FC<MultiChecklistBoxProps> = ({checklistList, updateChecklistList}) => {\n    const [prevListLength, setPrevListLength] = React.useState(checklistList.length);\n    const handleChecklistItemUpdate = (updatedChecklistItem: ChecklistItemType, index: number) => {\n        const updatedChecklist = checklistList.map((checklistItem, updatedIndex) => updatedIndex === index ? updatedChecklistItem : checklistItem);\n        updateChecklistList(updatedChecklist);\n    }\n\n    const addObjectToChecklist = () => {\n        const newChecklistObject = {\n            checked: true,\n            name: '',\n            amount: '0',\n            remarks: ['amount'],\n        };\n        updateChecklistList([...checklistList, newChecklistObject]);\n    }\n\n    React.useEffect(() => {\n        if (prevListLength !== checklistList.length) {\n            const containers = document.getElementsByClassName('ChecklistBox-Container');\n            containers[containers.length - 2].getElementsByTagName('input')[0].focus();\n            setPrevListLength(checklistList.length);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checklistList]);\n\n    return (\n        <React.Fragment>\n            {\n                checklistList.map((checklistItem, index) => (\n                    <ChecklistBox\n                        checklistItem={checklistItem}\n                        updateChecklistItem={(checklistItem) => handleChecklistItemUpdate(checklistItem, index)}\n                        key={index}\n                    />\n                ))\n            }\n            <div className=\"ChecklistBox-Container ChecklistBox-Container-New\">\n                <button\n                    className=\"ChecklistBox-Checkbox\"\n                    id=\"Testing\"\n                    data-checked={false}\n                />\n                <input className=\"ChecklistBox-Label\"\n                    value={`- Add Your Own -`}\n                    readOnly={true}\n                    onClick={addObjectToChecklist}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport {\n    ChecklistBox,\n    MultiChecklistBox,\n};","import React from 'react';\nimport {\n    convertToInt,\n} from '../../utils/DataValidation';\n\ninterface CounterInputProps {\n    value: number;\n    updateCounter: (value: number) => void;\n    unit: string;\n    limit?: number;\n}\n\nconst CounterInput: React.FC<CounterInputProps> = ({value, updateCounter, unit, limit = Infinity}) => {\n    const handleCounterInput = (value: string) => {\n        updateCounter(convertToInt(value, limit));\n    }\n\n    const handleCounterFlactuate = (operation: string) => {\n        operation === '+' && (value + 1 <= limit)\n        ? updateCounter(value + 1)\n        : operation === '-'&& (value - 1 >= 0) && updateCounter(value - 1);\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"CounterInput-Wrapper\">\n                <input\n                    type=\"text\"\n                    min={0}\n                    max={20}\n                    value={value}\n                    inputMode=\"numeric\"\n                    onChange={({ currentTarget: { value } }) => handleCounterInput(value)}\n                />\n                <p>{unit}</p>\n                <button onClick={() => handleCounterFlactuate('-')}>-</button>\n                <button onClick={() => handleCounterFlactuate('+')}>+</button>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CounterInput;","type DataTypeStrings = \"email\" | \"phone\";\n\nexport const validateData = (dataValue: string, dataType: DataTypeStrings) => {\n    if (dataType === \"email\") {\n        return dataValue.match(/[A-Z]/);\n    }\n};\n\nexport const convertToInt = (value: string, limit: number = Infinity) => {\n    // Use case 1: Empty string\n    if (value === '') return 0;\n    else {\n        const extractedNumber = value.match(/\\d+/g)?.join('');\n        // Use case 2: Contains no number\n        if(!extractedNumber) return 0;\n        else {\n            // Use case 3: Have 0 leading number\n            const parsedNumber = (extractedNumber.length > 1 && extractedNumber.startsWith('0'))\n            ? parseInt(extractedNumber.substr(1), 10)\n            // Perfect number, voilla!\n            : parseInt(extractedNumber, 10);\n            // Check for optional limit\n            return parsedNumber >= limit ? limit : parsedNumber;\n        }\n    }\n}","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ntype slotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ninterface CashFromCardProps {\n    slot: slotType;\n    updateSubmitted: () => void;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    dropdownOption?: {\n        allowInput: boolean;\n        optionList: InputOptionType[];\n    },\n    remarks?: string[],\n};\n\nconst slotInput: slotInputType[] = [\n    {\n        inputName: 'transferFrom',\n        inputState: 'transferFrom',\n        inputType: 'dropdown',\n        inputLabel: 'Bank',\n        dropdownOption: {\n            allowInput: true,\n            optionList: [\n                {\n                    name: 'Hello',\n                    label: 'Hello',\n                    value: 'Hello',\n                },\n                {\n                    name: 'World',\n                    label: 'World',\n                    value: 'World',\n                },\n                {\n                    name: 'React',\n                    label: 'React',\n                    value: 'React',\n                },\n            ],\n        },\n    },\n    {\n        inputName: 'name',\n        inputState: 'name',\n        inputType: 'text',\n        inputLabel: 'Name',\n    },\n    {\n        inputName: 'phone',\n        inputState: 'phone',\n        inputType: 'text',\n        inputLabel: 'Phone',\n    },\n    {\n        inputName: 'email',\n        inputState: 'email',\n        inputType: 'email',\n        inputLabel: 'Email',\n    },\n    {\n        inputName: 'amount',\n        inputState: 'amount',\n        inputType: 'number',\n        inputLabel: 'Amount',\n        remarks: ['currency'],\n    },\n];\n\nconst CashFromCardForm: React.FC<CashFromCardProps> = ({slot, updateSubmitted, handleInputChange}) => {\n    return (\n        <React.Fragment>\n            <section className=\"AIVIForm-Content\">\n                <p className=\"AIVIForm-Title\">\n                    Application Status: In Progress\n                </p>\n                {/* <p className=\"AIVIForm-Description\">\n                    You can view your progress so far here. Feel free to edit the information by clicking on the field.\n                </p> */}\n                <div className=\"AIVIForm-Details\">\n                    {\n                        slotInput.map((slotInputItem: slotInputItemType, index: number) => (\n                            slotInputItem.inputType === 'dropdown'\n                            ? (\n                                <InputDropdown\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                            : (\n                                <InputBox\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                        ))\n                    }\n                </div>\n            </section>\n            <section className=\"AIVIForm-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                    onClick={updateSubmitted}\n                    disabled={[slot.transferFrom, slot.name, slot.phone, slot.email, slot.amount].some(check => check === '')}\n                >\n                    Submit Application\n                </button>\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default CashFromCardForm;","import React from 'react';\nimport { Images } from '../../utils/Images';\n\ninterface SubmittedViewProps {\n    updateSubmitted: () => void;\n}\n\nconst SubmittedView: React.FC<SubmittedViewProps> = ({updateSubmitted}) => {\n    return (\n        <>\n            <section className=\"Leftbox-Submitted\">\n                <p>Application Form Submitted</p>\n                <img\n                    src={Images.image_submitted}\n                    alt=\"Submitted\"\n                />\n                <button\n                    className=\"Button Button-FitContent\"\n                    onClick={updateSubmitted}\n                >\n                    Back to Main Menu\n                </button>\n            </section>\n        </>\n    );\n}\n\nexport default SubmittedView;","import React from 'react';\nimport CashFromCardForm from './CashFromCardForm';\nimport SubmittedView from '../SubmittedView';\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\nconst CashFromCard: React.FC = () => {\n    const [userSlot, setUserSlot] = React.useState({\n        transferFrom: '',\n        name: '',\n        phone: '',\n        email: '',\n        amount: '',\n    });\n    \n    const [submitted, setSubmitted] = React.useState(false);\n\n    const handleInputChange = (value: string, stateName: string) => {\n        setUserSlot(() => {return {...userSlot, [stateName]: value}});\n    };\n\n    const handleSubmit = () => {\n        setSubmitted(prevState => { return !prevState});\n    };\n\n    if (!submitted) return <CashFromCardForm\n                                slot={userSlot}\n                                updateSubmitted={handleSubmit}\n                                handleInputChange={handleInputChange}\n                            />\n    else return <SubmittedView updateSubmitted={handleSubmit} />\n}\n\nexport default CashFromCard;","import React from 'react';\nimport {\n    MultipleCheckbox,\n    ToggleText,\n} from '../../CustomComponent';\n\ninterface AvailableCardProps {\n    cardOwnership?: boolean;\n    updateCardOwnership?: (status: boolean) => void;\n    selectedOptions: string[];\n    updateSelectedOptions: (selected: string[]) => void;\n    optionLimit: number;\n}\n\nconst AvailableCard: React.FC<AvailableCardProps> = ({cardOwnership, updateCardOwnership, selectedOptions, updateSelectedOptions, optionLimit}) => {\n    const optionList = [\n        {\n            name: 'CIMB Bank',\n            label: 'CIMB Bank',\n        },\n        {\n            name: 'Alliance Bank',\n            label: 'Alliance Bank',\n        },\n        {\n            name: 'Maybank',\n            label: 'Maybank',\n        },\n        {\n            name: 'OCBC',\n            label: 'OCBC',\n        },\n        {\n            name: 'RHB Bank',\n            label: 'RHB Bank',\n        },\n        {\n            name: 'Public Bank',\n            label: 'Public Bank',\n        },\n        {\n            name: 'BSN',\n            label: 'BSN',\n        },\n        {\n            name: 'Bank Rakyat',\n            label: 'Bank Rakyat',\n        },\n        {\n            name: 'Affin Bank',\n            label: 'Affin Bank',\n        },\n        {\n            name: 'Standard Chartered',\n            label: 'Standard Chartered',\n        },\n        {\n            name: 'Citibank',\n            label: 'Citibank',\n        },\n        {\n            name: 'UOB Malaysia',\n            label: 'UOB Malaysia',\n        },\n        {\n            name: 'Hong Leong Bank',\n            label: 'Hong Leong Bank',\n        },\n        {\n            name: 'AEON Credit Service',\n            label: 'AEON Credit Service',\n        },\n        {\n            name: 'HSBC',\n            label: 'HSBC',\n        },\n        {\n            name: 'Paydee',\n            label: 'Paydee',\n        },\n    ];\n    const tempRef = React.useRef<HTMLDivElement>(null);\n    const [rowSpan, setRowSpan] = React.useState(2);\n\n    const handleModifySelectedOptions = (selected: string[]) => {\n        updateSelectedOptions(selected);\n    }\n    \n    React.useEffect(() => {\n        setRowSpan(prevState => {\n            if (tempRef.current) {\n                if (tempRef.current.scrollWidth > 450) return 2\n                else return 1;\n            }\n            else return prevState;\n        });\n    }, [tempRef]);\n\n    const cardOwnershipOptions = ['This Would Be My First Card', 'I Currently Have Existing Cards'];\n    const handleCardOwnershipToggle = (value: string) => {\n        updateCardOwnership && updateCardOwnership(value === cardOwnershipOptions[0] ? false : true);\n        value === cardOwnershipOptions[0] && updateSelectedOptions([]);\n    }\n\n    return (\n        <React.Fragment>\n            <div ref={tempRef}>\n                {\n                    (cardOwnership !== undefined) &&\n                    <ToggleText\n                        optionList={cardOwnershipOptions}\n                        selected={cardOwnership ? cardOwnershipOptions[1] : cardOwnershipOptions[0]}\n                        handleToggleUpdate={(value: string) => handleCardOwnershipToggle(value)}\n                    />\n                }\n                {\n                    (cardOwnership === undefined || cardOwnership)\n                    && <MultipleCheckbox\n                        optionList={optionList}\n                        selectedOptions={selectedOptions}\n                        updateSelected={handleModifySelectedOptions}\n                        maxOption={3}\n                        rows={rowSpan}\n                    />\n                }\n                \n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default AvailableCard;","import React from 'react';\n// import {\n//     RangeSlider,\n// } from '../../CustomComponent';\nimport ReactSlider from 'react-slider';\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n};\n\ninterface ExpenseItemProps {\n    name?: string;\n    expenseRange: number[];\n    updateRange: (value: number[]) => void;\n}\n\ninterface ExpenseCategoryProps {\n    details: ExpenseDetails;\n    updateExpenseItem: (expenseItem: ExpenseDetails) => void;\n}\n\ninterface ExpenseDetailsProps {\n    details: ExpenseDetails[];\n    updateExpenseObject: (expenseObject: ExpenseDetails[]) => void;\n}\n\nconst ExpenseItem: React.FC<ExpenseItemProps> = ({name, expenseRange, updateRange}) => {\n    const minRange = 200;\n    const maxRange = 10000;\n    const sliderStep = 100;\n    const sliderMinDistance = 500;\n\n    const handleRangeChange = (value: number[]) => {\n        updateRange(value);\n    }\n\n    const handleInputChange = (value: string, index: number) => {\n        const adjustedRange = expenseRange;\n        adjustedRange[index] = parseInt(value);\n        handleRangeChange(adjustedRange);\n    }\n\n    return (\n        <div className=\"ExpenseDetails-Item\">\n            <input\n                className=\"ExpenseDetails-Input ExpenseDetails-InputMin\"\n                type=\"number\"\n                min={minRange}\n                max={maxRange}\n                step={sliderStep}\n                value={expenseRange[0]}\n                onChange={({ currentTarget: { value } }) => handleInputChange(value, 0)}\n                readOnly={true}\n            ></input>\n            <div className=\"ExpenseDetails-Slider\">\n                {\n                    name && <p className=\"ExpenseDetails-Label\">{name}</p>\n                }\n                {/* <RangeSlider\n                    min={minRange}\n                    max={maxRange}\n                    step={sliderStep}\n                    minDistance={sliderMinDistance}\n                    defaultValue={expenseRange}\n                    value={expenseRange}\n                    handleChange={handleRangeChange}\n                /> */}\n                <ReactSlider\n                    className=\"RangeSlider-Item\"\n                    thumbClassName=\"RangeSlider-Thumb\"\n                    trackClassName=\"RangeSlider-Track\"\n                    defaultValue={expenseRange}\n                    step={sliderStep}\n                    minDistance={sliderMinDistance}\n                    pearling={true}\n                    min={minRange}\n                    max={maxRange}\n                    onChange={(value) => handleRangeChange(value as number[])}\n                />\n            </div>\n            <input\n                className=\"ExpenseDetails-Input ExpenseDetails-InputMax\"\n                type=\"number\"\n                min={minRange}\n                max={maxRange}\n                step={sliderStep}\n                value={expenseRange[1]}\n                onChange={({ currentTarget: { value } }) => handleInputChange(value, 1)}\n                readOnly={true}\n            ></input>\n        </div>\n    );\n}\n\nconst ExpenseCategory: React.FC<ExpenseCategoryProps> = ({details, updateExpenseItem}) => {\n    const handleRangeUpdate = (value: number[], subcategoryIndex?: number) => {\n        const adjustedDetails = details;\n        if (adjustedDetails.subcategory) {\n            adjustedDetails.subcategory[subcategoryIndex as number].expenseRange = value;\n        }\n        else {\n            adjustedDetails.expenseRange = value;\n        }\n        updateExpenseItem(adjustedDetails);\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"ExpenseDetails-Wrapper\">\n                <p className=\"ExpenseDetails-Title\">{details.category}</p>\n                <div className=\"ExpenseDetails-Container\">\n                    {\n                        details.subcategory\n                        ? details.subcategory.map((subcategoryItem, index) => (\n                            <ExpenseItem\n                                name={subcategoryItem.name}\n                                expenseRange={subcategoryItem.expenseRange}\n                                updateRange={value => handleRangeUpdate(value, index)}\n                                key={index}\n                            />\n                        ))\n                        : <ExpenseItem\n                            expenseRange={details.expenseRange as number[]}\n                            updateRange={value => handleRangeUpdate(value)}\n                        />\n                    }\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nconst ExpensesDetails: React.FC<ExpenseDetailsProps> = ({details, updateExpenseObject}) => {\n    const handleExpenseUpdate = (expenseItem: ExpenseDetails) => {\n        const adjustedDetails = details.map(detailItem => (detailItem.category === expenseItem.category) ? expenseItem : detailItem);\n        updateExpenseObject(adjustedDetails);\n    }\n\n    return (\n        <React.Fragment>\n            {\n                details.map((detailItem, index) => (\n                    <ExpenseCategory\n                        details={detailItem}\n                        updateExpenseItem={handleExpenseUpdate}\n                        key={index}\n                    />\n                ))\n            }\n        </React.Fragment>\n    );\n};\n\nexport default ExpensesDetails;","import React from 'react';\nimport {\n    MultiImageSelect,\n} from '../../CustomComponent';\nimport ExpensesDetails from './ExpensesDetails';\nimport { Images } from '../../../utils/Images';\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n}[];\n\ninterface ExpensesProps {\n    selectedOptions: string[];\n    updateSelectedOptions: (selected: string[]) => void;\n    optionLimit: number;\n    expenseDetails: ExpenseDetails;\n    generateExpenseObject: () => void;\n    updateExpenseObject: (expenseObject: ExpenseDetails) => void;\n}\n\nconst Expenses: React.FC<ExpensesProps> = ({selectedOptions, updateSelectedOptions, optionLimit, expenseDetails, generateExpenseObject, updateExpenseObject}) => {\n    const [optionDetailRender, setOptionDetailRender] = React.useState<boolean>(false);\n    const optionList = [\n        {\n            name: 'Shopping',\n            label: 'Shopping',\n            image: Images.icon_shopping,\n        },\n        {\n            name: 'Utilities',\n            label: 'Utilities',\n            image: Images.icon_utilities,\n        },\n        {\n            name: 'Groceries',\n            label: 'Groceries',\n            image: Images.icon_groceries,\n        },\n        {\n            name: 'Education',\n            label: 'Education',\n            image: Images.icon_education,\n        },\n        {\n            name: 'Travel',\n            label: 'Travel',\n            image: Images.icon_travel,\n        },\n        {\n            name: 'Entertainment',\n            label: 'Entertainment',\n            image: Images.icon_entertainment,\n        },\n        {\n            name: 'Dining',\n            label: 'Dining',\n            image: Images.icon_dining,\n        },\n        {\n            name: 'Petrol',\n            label: 'Petrol',\n            image: Images.icon_petrol,\n        },\n        {\n            name: 'Health & Insurance',\n            label: 'Health & Insurance',\n            image: Images.icon_health,\n        },\n    ];\n\n    const handleOptionDetails = () => {\n        if (!optionDetailRender) {\n            generateExpenseObject();\n        }\n\n        setOptionDetailRender(prevState => { return !prevState });\n    }\n\n    const handleModifySelectedOptions = (selected: string[]) => {\n        updateSelectedOptions(selected);\n    }\n\n    const handleExpenseDetailsUpdate = (expenseDetails: ExpenseDetails) => {\n        updateExpenseObject(expenseDetails);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"Expenses\">\n                {\n                    !optionDetailRender\n                    ? (\n                        <div className=\"Expenses-SelectWrapper\">\n                            <MultiImageSelect\n                                optionList={optionList}\n                                selectedOptions={selectedOptions}\n                                updateSelected={handleModifySelectedOptions}\n                                maxOption={optionLimit}\n                            />\n                        </div>\n                    )\n                    : (\n                        <ExpensesDetails\n                            details={expenseDetails}\n                            updateExpenseObject={handleExpenseDetailsUpdate}\n                        />\n                    )\n                }\n                <div className=\"Expenses-Proceed\">\n                    <button\n                        disabled={selectedOptions.length !== optionLimit}\n                        onClick={handleOptionDetails}\n                    >{optionDetailRender ? `Repick Category` : `Proceed`}</button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Expenses;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n    ToggleText,\n} from '../../CustomComponent';\nimport {\n    IoIosAdd,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype IncomeSourceType = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n};\n\ninterface IncomeSourceItemProps {\n    incomeSource: IncomeSourceType;\n    incomeNo: number;\n    handleIncomeSourceItemUpdate: (incomeSourceItem: IncomeSourceType) => void;\n}\n\ninterface MonthlyIncomeProps {\n    incomeSources: IncomeSourceType[];\n    handleIncomeSourceUpdate: (updatedIncomeSource: IncomeSourceType[]) => void;\n}\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    dropdownOption?: {\n        allowInput: boolean,\n        optionList: InputOptionType[],\n    },\n    remarks?: string[],\n};\n\nconst incomeSourceFormat: slotInputItemType[] = [\n    {\n        inputName: 'industry',\n        inputState: 'industry',\n        inputType: 'dropdown',\n        inputLabel: 'Industry',\n        dropdownOption: {\n            allowInput: true,\n            optionList: [\n                {\n                    name: 'Food',\n                    label: 'Food',\n                    value: 'Food',\n                },\n                {\n                    name: 'Hospitality',\n                    label: 'Hospitality',\n                    value: 'Hospitality',\n                },\n                {\n                    name: 'Technology',\n                    label: 'Technology',\n                    value: 'Technology',\n                },\n                {\n                    name: 'Tourism',\n                    label: 'Tourism',\n                    value: 'Tourism',\n                },\n                {\n                    name: 'Healthcare',\n                    label: 'Healthcare',\n                    value: 'Healthcare',\n                },\n                {\n                    name: 'Defense & Security',\n                    label: 'Defense & Security',\n                    value: 'Defense & Security',\n                },\n            ],\n        },\n        \n    },\n    {\n        inputName: 'level',\n        inputState: 'level',\n        inputType: 'dropdown',\n        inputLabel: 'Level',\n        dropdownOption: {\n            allowInput: false,\n            optionList: [\n                {\n                    name: 'Non-executive',\n                    label: 'Non-executive',\n                    value: 'Non-executive',\n                },\n                {\n                    name: 'Executive',\n                    label: 'Executive',\n                    value: 'Executive',\n                },\n                {\n                    name: 'Management',\n                    label: 'Management',\n                    value: 'Management',\n                },\n            ],\n        },\n    },\n    {\n        inputName: 'jobTitle',\n        inputState: 'jobTitle',\n        inputType: 'text',\n        inputLabel: 'Job Title',\n    },\n    {\n        inputName: 'income',\n        inputState: 'income',\n        inputType: 'number',\n        inputLabel: 'Income',\n        remarks: ['currency'],\n    },\n];\n\nconst categoryToggleOptions = ['Primary', 'Secondary'];\n\nconst MonthlyIncomeItem: React.FC<IncomeSourceItemProps> = ({incomeSource, incomeNo, handleIncomeSourceItemUpdate}) => {\n    const handleInputChange = (value: string, stateName: string) => {\n        const updatedIncomeSourceItem = {...incomeSource, [stateName]: value};\n        handleIncomeSourceItemUpdate(updatedIncomeSourceItem);\n    }\n\n    return (\n        <div className=\"MonthlyIncome-Container\">\n            <div className=\"MonthlyIncome-SectionHeader\">\n                <p className=\"MonthlyIncome-SectionTitle\">Income {incomeNo}</p>\n                <button className=\"MonthlyIncome-RemoveIncome\">Remove</button>\n            </div>\n            <ToggleText\n                optionList={categoryToggleOptions}\n                selected={incomeSource.category}\n                handleToggleUpdate={(value: string) => handleInputChange(value, 'category')}\n            />\n            {\n                incomeSourceFormat.map((incomeSourceItem, index) => (\n                    incomeSourceItem.inputType === 'dropdown'\n                    ? (\n                        <InputDropdown\n                            slot={incomeSource}\n                            inputProps={incomeSourceItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                    : (\n                        <InputBox\n                            slot={incomeSource}\n                            inputProps={incomeSourceItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                ))\n            }\n        </div>\n    );\n}\n\nconst MonthlyIncome: React.FC<MonthlyIncomeProps> = ({ incomeSources, handleIncomeSourceUpdate }) => {\n    const updateIncomeSources = (incomeSourceItem: IncomeSourceType, index: number) => {\n        const updatedIncomeSource = [...incomeSources];\n        updatedIncomeSource[index] = incomeSourceItem;\n        handleIncomeSourceUpdate(updatedIncomeSource);\n    };\n\n    const addIncomeSource = () => {\n        const emptyIncomeSource = {\n            category: 'Secondary',\n            industry: '',\n            level: '',\n            jobTitle: '',\n            income: '',\n        };\n        handleIncomeSourceUpdate([...incomeSources, emptyIncomeSource])\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"MonthlyIncome-Wrapper\">\n                {\n                    incomeSources.map((incomeSourceItem, index) => (\n                        <MonthlyIncomeItem\n                            incomeSource={incomeSourceItem}\n                            incomeNo={index + 1}\n                            handleIncomeSourceItemUpdate={(incomeSourceItem) => updateIncomeSources(incomeSourceItem, index)}\n                            key={index}\n                        />\n                    ))\n                }\n                <div className=\"MonthlyIncome-Action\">\n                    <button className=\"MonthlyIncome-AddButton\" onClick={addIncomeSource}>\n                        <IconContext.Provider value={{ className: 'Icon Icon-AddIncome' }} >\n                            <IoIosAdd />\n                        </IconContext.Provider>\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default MonthlyIncome;","import React from 'react';\nimport {\n    TabBar,\n} from '../../CustomComponent';\nimport AvailableCard from './AvailableCard';\nimport Expenses from './Expenses';\nimport MonthlyIncome from './MonthlyIncome';\n\ntype optionList = {\n    label: string,\n    name: string,\n    content: JSX.Element;\n};\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n}[];\n\ntype IncomeSource = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n}[];\n\nconst CreditCard: React.FC = () => {\n    // AVAILABLE BANKS CONFIGURATION\n    const [cardOwnership, setCardOwnership] = React.useState<boolean>(false);\n    const [selectedBanks, setSelectedBanks] = React.useState<string[]>([]);\n    const banksLimit = 3;\n\n    const handleSelectedBanks = (selected: string[]) => {\n        setSelectedBanks(() => { return selected; });\n    };\n\n    const toggleExistingCard = (status: boolean) => {\n        setCardOwnership(() => status);\n    };\n\n    // EXPENSES CONFIGURATION\n    const [selectedExpenses, setSelectedExpenses] = React.useState<string[]>([]);\n    const expensesLimit = 3;\n\n    const handleSelectedExpenses = (selected: string[]) => {\n        setSelectedExpenses(() => { return selected; });\n    };\n\n    const [expenseObject, setExpenseObject] = React.useState<any[]>([]);\n\n    const generateExpenseObject = () => {\n        const generatedExpenseObject = selectedExpenses.map(option => {\n            let optionDetail = {};\n            if (['Shopping', 'Groceries', 'Travel'].includes(option)) {\n                optionDetail = {\n                    category: option,\n                    subcategory: [\n                        {\n                            name: 'Online',\n                            expenseRange: [2200, 8800],\n                        },\n                        {\n                            name: 'Traditional',\n                            expenseRange: [3000, 7000],\n                        },\n                    ],\n                };                    \n            }\n            else {\n                optionDetail = {\n                    category: option,\n                    expenseRange: [1000, 8100],\n                };  \n            }\n            return optionDetail;\n        });\n\n        setExpenseObject(generatedExpenseObject);\n    }\n\n    const updateExpenseObject = (newExpenseObject: ExpenseDetails) => {\n        setExpenseObject(() => {  return newExpenseObject; });\n    }\n\n    // MONTHLY INCOME CONFIGURATION\n    const [incomeSource, setIncomeSource] = React.useState<IncomeSource>([\n        {\n            category: 'Primary',\n            industry: '',\n            level: '',\n            jobTitle: '',\n            income: '',\n        },\n    ]);\n\n    const updateIncomeSource = (updatedIncomeSource: IncomeSource) => {\n        setIncomeSource(() => { return updatedIncomeSource; });\n    }\n    \n    // TAB CONFIGURATION\n    const [currentTab, setCurrentTab] = React.useState('Available Card');\n    const tabMenuList = [\n        {\n            label: 'Available Card',\n            name: 'Available Card',\n            content: <AvailableCard\n                        cardOwnership={cardOwnership}\n                        updateCardOwnership={toggleExistingCard}\n                        selectedOptions={selectedBanks}\n                        updateSelectedOptions={handleSelectedBanks}\n                        optionLimit={banksLimit}\n                    />,\n            enabled: true,\n        },\n        {\n            label: 'Expenses',\n            name: 'Expenses',\n            content: <Expenses\n                        selectedOptions={selectedExpenses}\n                        updateSelectedOptions={handleSelectedExpenses}\n                        optionLimit={expensesLimit}\n                        expenseDetails={expenseObject}\n                        generateExpenseObject={generateExpenseObject}\n                        updateExpenseObject={updateExpenseObject}\n                    />,\n            enabled: false,\n        },\n        {\n            label: 'Monthly Income',\n            name: 'Monthly Income',\n            content: <MonthlyIncome\n                        incomeSources={incomeSource}\n                        handleIncomeSourceUpdate={updateIncomeSource}\n                    />,\n            enabled: false,\n        },\n    ];\n    const [enabledTab, setEnabledTab] = React.useState([true, false, false]);\n\n    const handleChangeTab = (selectedTab: string) => {\n        setCurrentTab(() => { return selectedTab });\n    }\n\n    const handleProceedTab = (updatedEnabledTab: boolean[] | undefined, nextActiveTab: string) => {\n        // setTabMenuList(() => { return updatedOptionList });\n        setEnabledTab(() => { return updatedEnabledTab as boolean[] });\n        handleChangeTab(nextActiveTab);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"CreditCard-Content\">\n                <TabBar\n                    currentTab={currentTab}\n                    updateTab={handleChangeTab}\n                    optionList={tabMenuList}\n                    progressStrict={true}\n                    updateStrictTab={handleProceedTab}\n                    enabledTab={enabledTab}\n                />\n            </div>\n            <div className=\"CreditCard-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                >\n                    Submit Application\n                </button>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CreditCard;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\nimport {\n    IoIosArrowRoundForward\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ntype slotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ninterface BalanceTransferProps {\n    slot: slotType;\n    updateSubmitted: () => void;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    dropdownOption?: {\n        allowInput: boolean;\n        optionList: InputOptionType[];\n    },\n    remarks?: string[],\n};\n\nconst dualDropdown: slotInputType[] = [\n    {\n        inputName: 'transferFrom',\n        inputState: 'transferFrom',\n        inputType: 'dropdown',\n        inputLabel: 'Transfer from',\n        dropdownOption: {\n            allowInput: true,\n            optionList: [\n                {\n                    name: 'Hello',\n                    label: 'Hello',\n                    value: 'Hello',\n                },\n                {\n                    name: 'World',\n                    label: 'World',\n                    value: 'World',\n                },\n                {\n                    name: 'React',\n                    label: 'React',\n                    value: 'React',\n                },\n            ],\n        },\n    },\n    {\n        inputName: 'transferTo',\n        inputState: 'transferTo',\n        inputType: 'dropdown',\n        inputLabel: 'Transfer to',\n        dropdownOption: {\n            allowInput: true,\n            optionList: [\n                {\n                    name: 'Hello',\n                    label: 'Hello',\n                    value: 'Hello',\n                },\n                {\n                    name: 'World',\n                    label: 'World',\n                    value: 'World',\n                },\n                {\n                    name: 'React',\n                    label: 'React',\n                    value: 'React',\n                },\n            ],\n        },\n    },\n];\n\nconst slotInput: slotInputType[] = [\n    {\n        inputName: 'name',\n        inputState: 'name',\n        inputType: 'text',\n        inputLabel: 'Name',\n    },\n    {\n        inputName: 'phone',\n        inputState: 'phone',\n        inputType: 'text',\n        inputLabel: 'Phone',\n    },\n    {\n        inputName: 'email',\n        inputState: 'email',\n        inputType: 'email',\n        inputLabel: 'Email',\n    },\n    {\n        inputName: 'amount',\n        inputState: 'amount',\n        inputType: 'number',\n        inputLabel: 'Amount',\n        remarks: ['amount'],\n    },\n];\n\nconst BalanceTransferForm: React.FC<BalanceTransferProps> = ({slot, updateSubmitted, handleInputChange}) => {\n    return (\n        <React.Fragment>\n            <section className=\"AIVIForm-Content\">\n                <p className=\"AIVIForm-Title\">\n                    Application Status: In Progress\n                </p>\n                {/* <p className=\"AIVIForm-Description\">\n                    You can view your progress so far here. Feel free to edit the information by clicking on the field.\n                </p> */}\n                <div className=\"AIVIForm-Details\">\n                    <div className=\"BalanceTransfer-DualDropdown-Wrapper\">\n                        <div className=\"BalanceTransfer-DualDropdown-Item\">\n                            <InputDropdown\n                                slot={slot}\n                                inputProps={dualDropdown[0]}\n                                handleInputChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"BalanceTransfer-DualDropdown-Arrow\">\n                            <IconContext.Provider value={{ className: 'Icon Icon-TransferTo' }} >\n                                <IoIosArrowRoundForward />\n                            </IconContext.Provider>\n                        </div>\n                        <div className=\"BalanceTransfer-DualDropdown-Item\">\n                            <InputDropdown\n                                slot={slot}\n                                inputProps={dualDropdown[1]}\n                                handleInputChange={handleInputChange}\n                            />\n                        </div>\n                    </div>\n                    {\n                        slotInput.map((slotInputItem: slotInputItemType, index: number) => (\n                            slotInputItem.inputType === 'dropdown'\n                            ? (\n                                <InputDropdown\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                            : (\n                                <InputBox\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                        ))\n                    }\n                </div>\n            </section>\n            <section className=\"AIVIForm-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                    onClick={updateSubmitted}\n                    // disabled={[slot.transferFrom, slot.name, slot.phone, slot.email, slot.amount].some(check => check === '')}\n                >\n                    Submit Application\n                </button>\n            </section>\n        </React.Fragment>\n    );\n};\n\nexport default BalanceTransferForm;","import React from 'react';\nimport BalanceTransferForm from './BalanceTransferForm';\nimport SubmittedView from '../SubmittedView';\n\nconst BalanceTransfer = () => {\n    const [userSlot, setUserSlot] = React.useState({\n        transferFrom: '',\n        transferTo: '',\n        name: '',\n        phone: '',\n        email: '',\n        amount: '',\n    });\n\n    const handleInputChange = (value: string, stateName: string) => {\n        setUserSlot(() => {return {...userSlot, [stateName]: value}});\n    };\n\n    const [submitted, setSubmitted] = React.useState(false);\n\n    const handleSubmit = () => {\n        setSubmitted(prevState => { return !prevState});\n    };\n\n    if (!submitted) return <BalanceTransferForm\n                                slot={userSlot}\n                                updateSubmitted={handleSubmit}\n                                handleInputChange={handleInputChange}\n                            />\n    else return <SubmittedView updateSubmitted={handleSubmit}/>\n};\n\nexport default BalanceTransfer;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\n\ntype LoanDetailsType = {\n    loanAmount: string,\n    repaymentPeriod: string,\n};\n\ninterface LoanDetailsProps {\n    loanDetails: LoanDetailsType;\n    handleLoanDetailsUpdate: (updatedLoanDetails: LoanDetailsType) => void;\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    dropdownOption?: {\n        allowInput: boolean,\n        optionList: InputOptionType[],\n    },\n    remarks?: string[],\n};\n\nconst loanDetailsFormat: slotInputItemType[] = [\n    {\n        inputName: 'loanAmount',\n        inputState: 'loanAmount',\n        inputType: 'number',\n        inputLabel: 'Loan Amount',\n        remarks: ['currency'],\n    },\n    {\n        inputName: 'repaymentPeriod',\n        inputState: 'repaymentPeriod',\n        inputType: 'text',\n        inputLabel: 'Repayment Period',\n    },\n];\n\nconst LoanDetails: React.FC<LoanDetailsProps> = ({ loanDetails, handleLoanDetailsUpdate }) => {\n    const handleInputChange = (value: string, stateName: string) => {\n        const updatedLoanDetailsItem = {...loanDetails, [stateName]: value};\n        handleLoanDetailsUpdate(updatedLoanDetailsItem);\n    }\n\n    return (\n        <React.Fragment>\n            {\n                loanDetailsFormat.map((loanDetailsItem, index) => (\n                    loanDetailsItem.inputType === 'dropdown'\n                    ? (\n                        <InputDropdown\n                            slot={loanDetails}\n                            inputProps={loanDetailsItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                    : (\n                        <InputBox\n                            slot={loanDetails}\n                            inputProps={loanDetailsItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                ))\n            }\n        </React.Fragment>\n    );\n};\n\nexport default LoanDetails;","import React from 'react';\nimport {\n    MultiChecklistBox,\n} from '../../CustomComponent';\n\ntype ChecklistItemType = {\n    checked: boolean,\n    name: string,\n    amount?: string,\n    remarks?: string[],\n};\n\ntype ChecklistType = ChecklistItemType[];\n\ninterface LoanCommitmentProps {\n    loanCommitments: ChecklistType;\n    updateLoanCommitments: (updatedLoanCommitments: ChecklistType) => void;\n};\n\nconst LoanCommitment: React.FC<LoanCommitmentProps> = ({ loanCommitments, updateLoanCommitments }) => {\n\n    const handleLoanCommitmentsUpdate = (updatedLoanCommitments: ChecklistType) => {\n        updateLoanCommitments(updatedLoanCommitments);\n    }\n\n    return (\n        <MultiChecklistBox\n            checklistList={loanCommitments}\n            updateChecklistList={handleLoanCommitmentsUpdate}\n        />\n    );\n};\n\nexport default LoanCommitment;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\nimport MonthlyIncome from '../Credit Card/MonthlyIncome';\n\ntype IncomeSourceType = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n}[];\n\ntype MaritalInfoType = {\n    maritalStatus: string,\n    spouseName?: string,\n    incomeInfo?: IncomeSourceType;\n}\n\ninterface MaritalStatusProps {\n    maritalInfo: MaritalInfoType;\n    updateMaritalInfo: (updatedMaritalStatus: MaritalInfoType) => void;\n}\n\nconst maritalInput = {\n    inputName: 'maritalStatus',\n    inputState: 'maritalStatus',\n    inputType: 'dropdown',\n    inputLabel: 'Marital Status',\n    dropdownOption: {\n        allowInput: false,\n        optionList: [\n            {\n                name: 'Single',\n                label: 'Single',\n                value: 'Single',\n            },\n            {\n                name: 'Married',\n                label: 'Married',\n                value: 'Married',\n            },\n            {\n                name: 'Divorced',\n                label: 'Divorced',\n                value: 'Divorced',\n            },\n            {\n                name: 'Widowed',\n                label: 'Widowed',\n                value: 'Widowed',\n            },\n        ],\n    },\n};\n\nconst spouseInput = {\n    inputName: 'spouseName',\n    inputState: 'spouseName',\n    inputType: 'text',\n    inputLabel: 'Name of Spouse',\n};\n\nconst MaritalStatus: React.FC<MaritalStatusProps> = ({ maritalInfo, updateMaritalInfo }) => {\n    const handleMaritalInfoUpdate = (value: string, stateName: string) => {\n        if (stateName === 'maritalStatus') {\n            if (value === 'Married') {\n                const updatedMaritalInfo: MaritalInfoType = {\n                    maritalStatus: 'Married',\n                    spouseName: '',\n                    incomeInfo: [\n                        {\n                            category: 'Primary',\n                            industry: '',\n                            level: '',\n                            jobTitle: '',\n                            income: '',\n                        },\n                    ],\n                }\n                updateMaritalInfo(updatedMaritalInfo);\n            }\n            else updateMaritalInfo({ maritalStatus: value });\n        }\n        else return updateMaritalInfo({...maritalInfo, [stateName]: value});\n    }\n\n    const handleIncomeInfoUpdate = (updatedIncomeInfo: IncomeSourceType) => {\n        updateMaritalInfo({...maritalInfo, incomeInfo: updatedIncomeInfo});\n    }\n\n    return (\n        <React.Fragment>\n            <InputDropdown\n                slot={maritalInfo}\n                inputProps={maritalInput}\n                handleInputChange={handleMaritalInfoUpdate}\n            />\n            {\n                maritalInfo.incomeInfo && maritalInfo.maritalStatus === 'Married' && (\n                    <>\n                        <InputBox\n                            slot={maritalInfo}\n                            inputProps={spouseInput}\n                            handleInputChange={handleMaritalInfoUpdate}\n                        />\n                        <MonthlyIncome\n                            incomeSources={maritalInfo.incomeInfo}\n                            handleIncomeSourceUpdate={handleIncomeInfoUpdate}\n                        />\n                    </>\n                )\n            }\n        </React.Fragment>\n    );\n};\n\nexport default MaritalStatus;","import React from 'react';\nimport {\n    TabBar,\n} from '../../CustomComponent';\nimport AvailableCard from '../Credit Card/AvailableCard';\nimport MonthlyIncome from '../Credit Card/MonthlyIncome';\nimport LoanDetails from './LoanDetails';\nimport LoanCommitment from './LoanCommitment';\nimport MaritalStatus from './MaritalStatus';\n\ntype IncomeSourceType = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n}[];\n\ntype LoanDetailsType = {\n    loanAmount: string,\n    repaymentPeriod: string,\n};\n\ntype ChecklistItemType = {\n    checked: boolean,\n    name: string,\n    amount?: string,\n    remarks?: string[],\n};\n\ntype MaritalInfoType = {\n    maritalStatus: string,\n    spouseName?: string,\n    incomeInfo?: IncomeSourceType;\n}\n\ntype ChecklistType = ChecklistItemType[];\n\nconst PersonalLoan: React.FC = () => {\n    // AVAILABLE BANKS CONFIGURATION\n    const [cardOwnership, setCardOwnership] = React.useState<boolean>(false);\n    const [selectedBanks, setSelectedBanks] = React.useState<string[]>([]);\n    const banksLimit = 3;\n\n    const handleSelectedBanks = (selected: string[]) => {\n        setSelectedBanks(() => { return selected; });\n    };\n\n    const toggleExistingCard = (status: boolean) => {\n        setCardOwnership(() => status);\n    };\n\n    // LOAN DETAILS CONFIGURATION\n    const [loanDetails, setLoanDetails] = React.useState<LoanDetailsType>({\n        loanAmount: '',\n        repaymentPeriod: '',\n    });\n\n    const updateLoanDetails = (updatedLoanDetails: LoanDetailsType) => {\n        setLoanDetails(() => { return updatedLoanDetails; });\n    }\n\n    // MONTHLY INCOME CONFIGURATION\n    const [incomeSource, setIncomeSource] = React.useState<IncomeSourceType>([\n        {\n            category: 'Primary',\n            industry: '',\n            level: '',\n            jobTitle: '',\n            income: '',\n        },\n    ]);\n\n    const updateIncomeSource = (updatedIncomeSource: IncomeSourceType) => {\n        setIncomeSource(() => { return updatedIncomeSource; });\n    }\n\n    // MARITAL STATUS CONFIGURATION\n    const [maritalInfo, setMaritalInfo] = React.useState<MaritalInfoType>({\n        maritalStatus: 'Single',\n    });\n\n    const handleMaritalInfoUpdate = (updatedMaritalInfo: MaritalInfoType) => {\n        setMaritalInfo(() => { return updatedMaritalInfo; });\n    }\n\n    // LOAN COMMITMENTS CONFIGURATION\n    const [loanCommitments, setLoanCommitments] = React.useState<ChecklistType>([\n        {\n            checked: true,\n            name: 'Personal Loan',\n            amount: '0',\n            remarks: ['amount', 'readonly'],\n        },\n        {\n            checked: false,\n            name: 'Credit Card',\n            amount: '0',\n            remarks: ['amount', 'readonly'],\n        },\n        {\n            checked: false,\n            name: 'Property',\n            amount: '0',\n            remarks: ['amount', 'readonly'],\n        },\n        {\n            checked: false,\n            name: 'Car',\n            amount: '0',\n            remarks: ['amount', 'readonly'],\n        },\n    ]);\n\n    const handleLoanCommitmentsUpdate = (updatedLoanCommitments: ChecklistType) => {\n        setLoanCommitments(() => { return updatedLoanCommitments });\n    }\n\n    // TAB CONFIGURATION\n    const [currentTab, setCurrentTab] = React.useState('Preferred Bank');\n    const tabMenuList = [\n        {\n            label: 'Preferred Bank',\n            name: 'Preferred Bank',\n            content: <AvailableCard\n                        cardOwnership={cardOwnership}\n                        updateCardOwnership={toggleExistingCard}\n                        selectedOptions={selectedBanks}\n                        updateSelectedOptions={handleSelectedBanks}\n                        optionLimit={banksLimit}\n                    />,\n        },\n        {\n            label: 'Loan Details',\n            name: 'Loan Details',\n            content: <LoanDetails\n                        loanDetails={loanDetails}\n                        handleLoanDetailsUpdate={updateLoanDetails}\n                    />,\n        },\n        {\n            label: 'Monthly Income',\n            name: 'Monthly Income',\n            content: <MonthlyIncome\n                        incomeSources={incomeSource}\n                        handleIncomeSourceUpdate={updateIncomeSource}\n                    />,\n        },\n        {\n            label: 'Marital Status',\n            name: 'Marital Status',\n            content: <MaritalStatus\n                        maritalInfo={maritalInfo}\n                        updateMaritalInfo={handleMaritalInfoUpdate}\n                    />,\n        },\n        {\n            label: 'Loan Commitment',\n            name: 'Loan Commitment',\n            content: <LoanCommitment\n                        loanCommitments={loanCommitments}\n                        updateLoanCommitments={handleLoanCommitmentsUpdate}\n                    />,\n        },\n    ];\n\n    const handleChangeTab = (selectedTab: string) => {\n        setCurrentTab(() => { return selectedTab });\n    }\n\n    // React.useEffect(() => {\n    //     console.log(maritalInfo);\n    // }, [maritalInfo]);\n\n    return (\n        <React.Fragment>\n            <div className=\"CreditCard-Content\">\n                <TabBar\n                    currentTab={currentTab}\n                    updateTab={handleChangeTab}\n                    optionList={tabMenuList}\n                />\n            </div>\n            <div className=\"CreditCard-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                >\n                    Submit Application\n                </button>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default PersonalLoan;","import React from 'react';\n\nimport {\n    Chatbox,\n    CashFromCard,\n    CreditCard,\n    BalanceTransfer,\n    PersonalLoan,\n} from '../../components';\nimport { Images } from '../../utils/Images';\n\n// import { validateData } from './utils/DataValidation';\n\nfunction SmartAssistant() {\n    const [showChatInMobile, setShowChatInMobile] = React.useState(false);\n    const [renderSection, setRenderSection] = React.useState('Cash From Card');\n    const [renderModel, setRenderModel] = React.useState(false);\n    const sections = ['Cash From Card', 'Credit Card', 'Balance Transfer', 'Personal Loan'];\n\n    React.useEffect(() => {\n        // const rootStyle = document.documentElement.style;\n        // rootStyle.setProperty('--sidebar-width', '10px');\n        // console.log(validateData('Hello', 'email'));\n        // setInterval({}, 1000); // refresh every second - Is this a good practice?\n        // console.log(showChatInMobile);\n    }, [showChatInMobile]);\n\n    const handleChatboxModal = () => {\n        setShowChatInMobile(prevState => { return !prevState });\n    }\n\n    // FOR DEBUG PURPOSE ONLY\n    // START\n    const handleSectionsMenu = () => {\n        setRenderModel(prevState => { return !prevState });\n    }\n\n    const handleChangeSection = (section: string) => {\n        setRenderSection(() => { return section })\n        setRenderModel(prevState => { return !prevState });\n    }\n    // END\n\n    const handleSectionRendering = (sectionToRender: string) => {\n        switch (renderSection) {\n            case 'Cash From Card':\n                return <CashFromCard />;\n            case 'Credit Card':\n                return <CreditCard />;\n            case 'Balance Transfer':\n                return <BalanceTransfer />;\n            case 'Personal Loan':\n                return <PersonalLoan />\n            default:\n                return <>Not Found</>;\n        }\n    }\n\n    return (\n        <main className=\"AIVI-Body\">\n            {/* <section className=\"AIVI-Body\"> */}\n                <section className=\"AIVI-Chatbox\">\n                    <img src={Images.logo_AIVI} alt=\"logo-aivi\" className=\"AIVI-Logo\" />\n                    <Chatbox />\n                </section>\n                <section className=\"AIVI-Leftbox\">\n                    { handleSectionRendering(renderSection) }\n                </section>\n            {/* </section> */}\n\n            {/* FOR MOBILE VERSION ONLY */}\n            {/* START */}\n            <button\n                className=\"AIVI-Chatbox-Mobile-Button Button\"\n                onClick={handleChatboxModal}\n            >\n                C\n            </button>\n            <section\n                className={`AIVI-Chatbox-Mobile-Model ${showChatInMobile ? `AIVI-Chatbox-Mobile-Show` : `AIVI-Chatbox-Mobile-Hide`}`}\n            >\n                <Chatbox />\n            </section>\n            {/* END */}\n\n\n            {/* FOR DEBUG PURPOSE ONLY */}\n            {/* START */}\n            <button className=\"Temporary-ChangeRender\" onClick={handleSectionsMenu}>\n                Change Section\n            </button>\n            <div className=\"Temporary-Sections\" data-visible={renderModel.toString()}>\n                <ul>\n                    {\n                        sections.map((section, index) => <li onClick={() => handleChangeSection(section)} key={index}>{section}</li>)\n                    }\n                </ul>\n            </div>\n            {/* END */}\n        </main>\n  );\n}\n\nexport default SmartAssistant;\n","import React from 'react';\nimport {\n    IoIosArrowDown,\n    IoIosArrowRoundForward,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\nimport { Images } from '../../utils/Images';\nimport ReactTooltip from 'react-tooltip';\n\ninterface RewardItemProps {\n    expandAll?: boolean;\n    toggleExpandAll?: () => void;\n}\n\nconst RewardItem: React.FC<RewardItemProps> = ({ expandAll, toggleExpandAll }) => {\n    const [isExpanded, setExpanded] = React.useState(false);\n\n    const toggleExpanded = () => {\n        setExpanded(prevState => !prevState);\n    }\n\n    React.useEffect(() => {\n        (expandAll !== undefined) && setExpanded(() => expandAll);\n    }, [expandAll]);\n\n    return (\n        <div className=\"CardResult-Wrapper\">\n            <div className=\"CardResult-Main\">\n                <div className=\"CardResult-Card\">\n                    <div className=\"CardResult-Card-Image\">\n\n                    </div>\n                    <p className=\"CardResult-Card-Name\">Card Name Here</p>\n                </div>\n                <div className=\"CardResult-Details\">\n                    <div className=\"CardResult-Details-TotalCollection\">\n                        <p className=\"CardResult-Details-Label\">Total Estimated Points</p>\n                        <p className=\"CardResult-Details-Data\">1200 - 6000<span>PTS</span></p>\n                    </div>\n                    <div className=\"CardResult-Details-Period\">\n                        <p className=\"CardResult-Details-Label\">Period</p>\n                        <p className=\"CardResult-Details-Data\">12 months</p>\n                    </div>\n                    <div className=\"CardResult-Details-Rewards\">\n                        <p className=\"CardResult-Details-Label\">Potential Rewards</p>\n                        <div>\n                            <div data-tip data-for='imageOne'>\n                                \n                            </div>\n                            <div data-tip data-for='imageTwo'>\n                                \n                            </div>\n                            <div data-tip data-for='imageThree'>\n                                \n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"CardResult-Returns\" data-expanded={isExpanded}>\n                <div className=\"CardResult-Returns-Category\">\n                    <p className=\"CardResult-Returns-Category-Title\">Shopping (online)</p>\n                    <div className=\"CardResult-Returns-Category-Content\">\n                        <div className=\"CardResult-Returns-Category-Icon\">\n                            <img src={Images.icon_ticket} alt=\"icon\" />\n                        </div>\n                        <div className=\"CardResult-Returns-Category-Details\">\n                            <p className=\"CardResult-Returns-Category-Points\">200 <span>PTS</span></p>\n                            <p className=\"CardResult-Returns-Category-UnitPoint\"><span>5</span> PTS PER <span>RM1</span></p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"CardResult-Returns-Category\">\n                    <p className=\"CardResult-Returns-Category-Title\">Shopping (online)</p>\n                    <div className=\"CardResult-Returns-Category-Content\">\n                        <div className=\"CardResult-Returns-Category-Icon\">\n                            <img src={Images.icon_ticket} alt=\"icon\" />\n                        </div>\n                        <div className=\"CardResult-Returns-Category-Details\">\n                            <p className=\"CardResult-Returns-Category-Points\">200 <span>PTS</span></p>\n                            <p className=\"CardResult-Returns-Category-UnitPoint\"><span>5</span> PTS PER <span>RM1</span></p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"CardResult-Returns-Category\">\n                    <p className=\"CardResult-Returns-Category-Title\">Shopping (online)</p>\n                    <div className=\"CardResult-Returns-Category-Content\">\n                        <div className=\"CardResult-Returns-Category-Icon\">\n                            <img src={Images.icon_ticket} alt=\"icon\" />\n                        </div>\n                        <div className=\"CardResult-Returns-Category-Details\">\n                            <p className=\"CardResult-Returns-Category-Points\">200 <span>PTS</span></p>\n                            <p className=\"CardResult-Returns-Category-UnitPoint\"><span>5</span> PTS PER <span>RM1</span></p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"CardResult-Returns-Category\">\n                    <p className=\"CardResult-Returns-Category-Title\">Shopping (online)</p>\n                    <div className=\"CardResult-Returns-Category-Content\">\n                        <div className=\"CardResult-Returns-Category-Icon\">\n                            <img src={Images.icon_ticket} alt=\"icon\" />\n                        </div>\n                        <div className=\"CardResult-Returns-Category-Details\">\n                            <p className=\"CardResult-Returns-Category-Points\">200 <span>PTS</span></p>\n                            <p className=\"CardResult-Returns-Category-UnitPoint\"><span>5</span> PTS PER <span>RM1</span></p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"CardResult-CardAction\">\n                <button className=\"CardResult-CardAction-ViewDetails\">\n                    View Details\n                    <IconContext.Provider value={{ className: 'Icon Icon-Black Icon-Details-Forward' }} >\n                        <IoIosArrowRoundForward />\n                    </IconContext.Provider>\n                </button>\n                <button className=\"CardResult-CardAction-Expand\" onClick={toggleExpanded} data-expanded={isExpanded}>\n                    <IconContext.Provider value={{ className: 'Icon Icon-Details-Down' }} >\n                        <IoIosArrowDown />\n                    </IconContext.Provider>\n                </button>\n            </div>\n            \n            <ReactTooltip id=\"imageOne\" place=\"bottom\">\n                <div className=\"CardResult-Tooltip-Image\" />\n                <div className=\"CardResult-Tooltip-Container\">\n                    <p>Samsung Level Box Slim Speaker</p>\n                    <div>\n                        <p>PTS <span>20 200</span></p>\n                        <p>RM <span>240</span></p>\n                    </div>\n                </div>\n            </ReactTooltip>\n            <ReactTooltip id=\"imageTwo\" place=\"bottom\">\n                <div className=\"CardResult-Tooltip-Image\" />\n                <div className=\"CardResult-Tooltip-Container\">\n                    <p>Garmin Watch</p>\n                    <div>\n                        <p>PTS <span>40 200</span></p>\n                        <p>RM <span>450</span></p>\n                    </div>\n                </div>\n            </ReactTooltip>\n            <ReactTooltip id=\"imageThree\" place=\"bottom\">\n                <div className=\"CardResult-Tooltip-Image\" />\n                <div className=\"CardResult-Tooltip-Container\">\n                    <p>Razor V2</p>\n                    <div>\n                        <p>PTS <span>80 900</span></p>\n                        <p>RM <span>4000</span></p>\n                    </div>\n                </div>\n            </ReactTooltip>\n        </div>\n    );\n};\n\nexport default RewardItem;\n","import React from 'react';\nimport {\n    IoIosArrowDown,\n    IoIosArrowRoundForward,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\nimport { Images } from '../../utils/Images';\n\ninterface CashbackItemProps {\n    expandAll?: boolean;\n    toggleExpandAll?: () => void;\n}\n\nconst CashbackItem: React.FC<CashbackItemProps> = ({ expandAll, toggleExpandAll }) => {\n    const [isExpanded, setExpanded] = React.useState(false);\n\n    const toggleExpanded = () => {\n        setExpanded(prevState => !prevState);\n    }\n\n    React.useEffect(() => {\n        (expandAll !== undefined) && setExpanded(() => expandAll);\n    }, [expandAll]);\n\n    return (\n        <div className=\"CardResult-Wrapper\">\n            <div className=\"CardResult-Main\">\n                <div className=\"CardResult-Card\">\n                    <div className=\"CardResult-Card-Image\">\n\n                    </div>\n                    <p className=\"CardResult-Card-Name\">Card Name Here</p>\n                </div>\n                <div className=\"CardResult-Details\">\n                    <div className=\"CardResult-Details-TotalCollection\">\n                        <p className=\"CardResult-Details-Label\">Potential Cashback</p>\n                        <p className=\"CardResult-Details-Data\">RM 1200 - RM 1300</p>\n                    </div>\n                    <div className=\"CardResult-Details-Period\">\n                        <p className=\"CardResult-Details-Label\">Period</p>\n                        <p className=\"CardResult-Details-Data\">12 months</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"CardResult-Returns\" data-expanded={isExpanded}>\n                <div className=\"CardResult-Returns-Category\">\n                    <p className=\"CardResult-Returns-Category-Title\">Shopping (online)</p>\n                    <div className=\"CardResult-Returns-Category-Content\">\n                        <div className=\"CardResult-Returns-Category-Icon\">\n                            <img src={Images.icon_ticket} alt=\"icon\" />\n                        </div>\n                        <div className=\"CardResult-Returns-Category-Details\">\n                            <p className=\"CardResult-Returns-Category-Points\">RM 80 <span>(cap at 80)</span></p>\n                            <p className=\"CardResult-Returns-Category-UnitPoint\"><span>5% from RM 1000 and above</span></p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"CardResult-Returns-Category\">\n                    <p className=\"CardResult-Returns-Category-Title\">Shopping (online)</p>\n                    <div className=\"CardResult-Returns-Category-Content\">\n                        <div className=\"CardResult-Returns-Category-Icon\">\n                            <img src={Images.icon_ticket} alt=\"icon\" />\n                        </div>\n                        <div className=\"CardResult-Returns-Category-Details\">\n                            <p className=\"CardResult-Returns-Category-Points\">RM 80 <span>(cap at 80)</span></p>\n                            <p className=\"CardResult-Returns-Category-UnitPoint\"><span>5% from RM 1000 and above</span></p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"CardResult-Returns-Category\">\n                    <p className=\"CardResult-Returns-Category-Title\">Shopping (online)</p>\n                    <div className=\"CardResult-Returns-Category-Content\">\n                        <div className=\"CardResult-Returns-Category-Icon\">\n                            <img src={Images.icon_ticket} alt=\"icon\" />\n                        </div>\n                        <div className=\"CardResult-Returns-Category-Details\">\n                            <p className=\"CardResult-Returns-Category-Points\">RM 80 <span>(cap at 80)</span></p>\n                            <p className=\"CardResult-Returns-Category-UnitPoint\"><span>5% from RM 1000 and above</span></p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"CardResult-Returns-Category\">\n                    <p className=\"CardResult-Returns-Category-Title\">Shopping (online)</p>\n                    <div className=\"CardResult-Returns-Category-Content\">\n                        <div className=\"CardResult-Returns-Category-Icon\">\n                            <img src={Images.icon_ticket} alt=\"icon\" />\n                        </div>\n                        <div className=\"CardResult-Returns-Category-Details\">\n                            <p className=\"CardResult-Returns-Category-Points\">RM 80 <span></span></p>\n                            <p className=\"CardResult-Returns-Category-UnitPoint\"><span>Uncapped</span></p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"CardResult-CardAction\">\n                <button className=\"CardResult-CardAction-ViewDetails\">\n                    View Details\n                    <IconContext.Provider value={{ className: 'Icon Icon-Black Icon-Details-Forward' }} >\n                        <IoIosArrowRoundForward />\n                    </IconContext.Provider>\n                </button>\n                <button className=\"CardResult-CardAction-Expand\" onClick={toggleExpanded} data-expanded={isExpanded}>\n                    <IconContext.Provider value={{ className: 'Icon Icon-Details-Down' }} >\n                        <IoIosArrowDown />\n                    </IconContext.Provider>\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default CashbackItem;","import React from 'react';\nimport {\n    CashbackItem,\n    RewardItem,\n} from '../../components/CardResult';\nimport {\n    CounterInput,\n} from '../../components/CustomComponent';\nimport { Images } from '../../utils/Images';\nimport ExpensesDetails from '../../components/Leftbox/Credit Card/ExpensesDetails';\nimport {\n    IoIosCheckmark,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\nimport AvailableCard from '../../components/Leftbox/Credit Card/AvailableCard';\n// import { csv } from 'd3';\n// import { CSVFiles } from '../../utils/DataSample';\n\n// const cardMockData = {\n//     image: '',\n//     name: 'Maybank 2 Gold',\n//     estimatedPoints: [1200, 1600],\n//     period: '12 months',\n// };\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n}[];\n\nconst Result: React.FC = () => {\n    const [allExpanded, setAllExpanded] = React.useState(false);\n\n    const toggleAllExpanded = () => {\n        setAllExpanded(prevState => !prevState);\n    };\n    // Temporary Period Details\n    const [period, setPeriod] = React.useState(0);\n    \n    const handlePeriodChange = (value: number) => setPeriod(() => value);\n\n    // Temporary Expense Details\n    const [expenseDetails, setExpenseDetails] = React.useState<ExpenseDetails>([\n        {\n            category: 'Shopping',\n            subcategory: [\n                {\n                    name: 'Online',\n                    expenseRange: [2200, 8800],\n                },\n                {\n                    name: 'Traditional',\n                    expenseRange: [3000, 7000],\n                },\n            ],\n        },\n        {\n            category: 'Dining',\n            expenseRange: [3000, 7000],\n        },\n        {\n            category: 'Health & Insurance',\n            expenseRange: [3000, 7000],\n        },\n    ]);\n    \n\n    const handleExpenseDetailsUpdate = (expenseDetails: ExpenseDetails) => {\n        setExpenseDetails(() => expenseDetails);\n    }\n\n    // CONFIGURATION FOR BANKS\n    const [selectedBanks, setSelectedBanks] = React.useState<string[]>([]);\n    const banksLimit = 1;\n\n    const handleSelectedBanks = (selected: string[]) => {\n        setSelectedBanks(() => { return selected; });\n    };\n    // const [data, setData] = React.useState<any>();\n    // React.useEffect(() => {\n    //     csv(CSVFiles.rewardCatalogue).then(data => {\n    //         setData(() => data);\n    //     })\n    // }, []);\n\n    // React.useEffect(() => {\n    //     data && console.log(data[0]);\n    // }, [data]);\n\n    // CONFIGURATION FOR MODALS\n    const [resetModal, setResetModal] = React.useState(false);\n    const [searchModal, setSearchModal] = React.useState(false);\n\n    const handleModalToggle = (modalName: string) => {\n        // console.log(modalName);\n        modalName === 'resetModal'\n        ? setResetModal(prevState => !prevState)\n        : modalName === 'searchModal'\n        && setSearchModal(prevState => !prevState);\n    }\n\n    React.useEffect(() => {\n        console.log({resetModal, searchModal});\n    }, [resetModal, searchModal]);\n\n    return (\n        <React.Fragment>\n            <main className=\"CreditCardResult-Body\">\n                <section className=\"CreditCardResult-TopContent\">\n                    <div className=\"CreditCardResult-TitleBar\">\n                        <p>Your results are in!</p>\n                        <button onClick={toggleAllExpanded}>{ allExpanded ? `Collapse` : `Expand`} All</button>\n                        <button\n                            onClick={() => handleModalToggle('resetModal')}\n                        >\n                            Reset Expense\n                            <img src={Images.icon_readjust} alt=\"Reset\" />\n                        </button>\n                        <button\n                            onClick={() => handleModalToggle('searchModal')}\n                        >Not what you're looking for?\n                            <img src={Images.icon_search} alt=\"Search\" />\n                        </button>\n                    </div>\n                    <div className=\"CreditCardResult-Content\">\n                        <div className=\"CreditCardResult-Content-Column\">\n                            <p className=\"CreditCardResult-Content-Title\">Rewards</p>\n                            <RewardItem\n                                expandAll={allExpanded}\n                                toggleExpandAll={toggleAllExpanded}\n                            />\n                            <RewardItem\n                                expandAll={allExpanded}\n                                toggleExpandAll={toggleAllExpanded}\n                            />\n                        </div>\n                        <div className=\"CreditCardResult-Content-Seperator\" />\n                        <div className=\"CreditCardResult-Content-Column\">\n                            <p className=\"CreditCardResult-Content-Title\">Cashbacks</p>\n                            <CashbackItem\n                                expandAll={allExpanded}\n                                toggleExpandAll={toggleAllExpanded}\n                            />\n                            <CashbackItem\n                                expandAll={allExpanded}\n                                toggleExpandAll={toggleAllExpanded}\n                            />\n                            <CashbackItem\n                                expandAll={allExpanded}\n                                toggleExpandAll={toggleAllExpanded}\n                            />\n                        </div>\n                    </div>\n                </section>\n                <section className=\"CreditCardResult-BottomContent\">\n                    <button className=\"CreditCardResult-BottomContent-Chat\">\n                        Chat\n                    </button>\n                    <div className=\"CreditCardResult-BottomContent-Description\">\n                        <p className=\"CreditCardResult-BottomContent-Description-Title\">Ready To Apply?</p>\n                        <p className=\"CreditCardResult-BottomContent-Description-Subtitle\">You Selected: Selected Card</p>\n                    </div>\n                    <button className=\"CreditCardResult-BottomContent-Apply\">\n                        Apply Now\n                    </button>\n                </section>\n\n                {/* RESET EXPENSE MODAL */}\n                <section className=\"CreditCardResult-Modal\" data-visible={resetModal}>\n                    <div className=\"CreditCardResult-Modal-Wrapper\">\n                        <div className=\"CreditCardResult-Modal-Section\">\n                            <div className=\"CreditCardResult-Modal-Container\">\n                                <p className=\"CreditCardResult-Modal-Title\">Reset Period</p>\n                                <div className=\"CreditCardResult-Modal-Content\">\n                                    <CounterInput\n                                        value={period}\n                                        updateCounter={handlePeriodChange}\n                                        unit=\"months\"\n                                        limit={20}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"CreditCardResult-Modal-Container\">\n                                <p className=\"CreditCardResult-Modal-Title\">Reset your monthly spending range</p>\n                                <div className=\"CreditCardResult-Modal-Content\">\n                                    <ExpensesDetails\n                                        details={expenseDetails}\n                                        updateExpenseObject={handleExpenseDetailsUpdate}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"CreditCardResult-Modal-Action\">\n                            <button\n                                className=\"CreditCardResult-Modal-Action-Cancel\"\n                                onClick={() => handleModalToggle('resetModal')}\n                            >Cancel</button>\n                            <button\n                                className=\"CreditCardResult-Modal-Action-Confirm\"\n                                onClick={() => handleModalToggle('resetModal')}\n                            >\n                                <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Result-Check' }} >\n                                    <IoIosCheckmark />\n                                </IconContext.Provider>\n                            </button>\n                        </div>\n                    </div>\n                </section>\n\n                {/* NOT LOOKING FOR MODAL */}\n                <section className=\"CreditCardResult-Modal\" data-visible={searchModal}>\n                    <div className=\"CreditCardResult-Modal-Wrapper\">\n                        <div className=\"CreditCardResult-Modal-Section\">\n                            <div className=\"CreditCardResult-Modal-Container\">\n                                <p className=\"CreditCardResult-Modal-Title\">Choose your preferred bank...</p>\n                                <AvailableCard\n                                    selectedOptions={selectedBanks}\n                                    updateSelectedOptions={handleSelectedBanks}\n                                    optionLimit={banksLimit}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"CreditCardResult-Modal-Action\">\n                            <button\n                                className=\"CreditCardResult-Modal-Action-Cancel\"\n                                onClick={() => handleModalToggle('searchModal')}\n                            >Cancel</button>\n                            <button\n                                className=\"CreditCardResult-Modal-Action-Confirm\"\n                                onClick={() => handleModalToggle('searchModal')}\n                            >\n                                <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Result-Check' }} >\n                                    <IoIosCheckmark />\n                                </IconContext.Provider>\n                            </button>\n                        </div>\n                    </div>\n                </section>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default Result;","import React from 'react';\nimport {\n    Switch,\n    Route,\n} from 'react-router-dom';\nimport {\n    Sidebar,\n} from '../components';\nimport SmartAssistant from '../pages/SmartAssistant';\nimport Result from '../pages/Result';\n\nconst VentasRoute = [\n    {\n        path: '/results',\n        exact: false,\n        private: false,\n        sidebar: () => <Sidebar />,\n        main: () => <Result />,\n    },\n    {\n        path: '/smart-assistant',\n        exact: true,\n        private: false,\n        sidebar: () => <Sidebar />,\n        main: () => <SmartAssistant />,\n    },\n    {\n        path: '*',\n        exact: false,\n        private: false,\n        sidebar: () => <Sidebar />,\n        main: () => null,\n    },\n];\n\nconst RouterLayout = () => {\n    // const history = useHistory();\n    const mainPage = React.useRef<HTMLElement>(null);\n\n    // React.useEffect(() => {\n    //     console.log(mainPage.current?.children.length);\n    // }, []);\n\n    return (\n        <React.Fragment>\n            <main className=\"AIVI-Page\" ref={mainPage}>\n                {/* Sidebar Rendering */}\n                <Switch>\n                    {\n                        VentasRoute.map((route, index) => (\n                            <Route\n                                key={index}\n                                path={route.path}\n                                exact={route.exact}\n                                children={<route.sidebar />}\n                            />\n                        ))\n                    }\n                </Switch>\n                {/* Page Rendering */}\n                <Switch>\n                    {\n                        VentasRoute.map((route, index) => (\n                            <Route\n                                key={index}\n                                path={route.path}\n                                exact={route.exact}\n                                children={<route.main />}\n                            />\n                        ))\n                    }\n                </Switch>\n            </main>\n        </React.Fragment>\n    );\n};\n\nexport default RouterLayout;","import * as actions from './actionTypes';\n\nconst reducer = (state = [] /* Initial state */, action) => {\n\n    switch(action.type) {\n        case actions.THING_ADDED:\n            return [\n                ...state,\n                {\n                    // something to add or update in state\n                },\n            ];\n        case actions.THING_REMOVED:\n            return state.filter(/* Filter function to remove */);\n        case actions.THING_UPDATED:\n            return state.map(\n                // bug => bug.id !== action.payload.id ? bug : { ...bug, resolved: true }\n            );\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","export const THING_ADDED = \"thingsAdded\";\nexport const THING_REMOVED = \"thingsRemoved\";\nexport const THING_UPDATED = \"thingsUpdated\";","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport './App.scss';\nimport {\n    BrowserRouter as Router,\n} from 'react-router-dom';\nimport RouterLayout from './routers';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\n// import { validateData } from './utils/DataValidation';\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                <RouterLayout />\n            </Router>\n         </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}