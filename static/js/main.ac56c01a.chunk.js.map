{"version":3,"sources":["assets/images/Icon-Shopping.svg","assets/images/Icon-Utilities.svg","assets/images/Icon-Groceries.svg","assets/images/Icon-Education.svg","assets/images/Icon-Travel.svg","assets/images/Icon-Entertainment.svg","assets/images/Icon-Dining.svg","assets/images/Icon-Petrol.svg","assets/images/Icon-Health.svg","assets/images/Image-Submitted.svg","components/Chatbox/Chatbox.tsx","components/CustomComponent/InputBox.tsx","components/CustomComponent/InputDropdown.tsx","components/CustomComponent/TabBar.tsx","components/CustomComponent/Checkbox.tsx","components/CustomComponent/ImageSelect.tsx","components/CustomComponent/ToggleText.tsx","components/CustomComponent/ChecklistBox.tsx","components/Leftbox/CashFromCard/CashFromCardForm.tsx","utils/Images.tsx","components/Leftbox/SubmittedView.tsx","components/Leftbox/CashFromCard/CashFromCard.tsx","components/Leftbox/Credit Card/AvailableCard.tsx","components/Leftbox/Credit Card/ExpensesDetails.tsx","components/Leftbox/Credit Card/Expenses.tsx","components/Leftbox/Credit Card/MonthlyIncome.tsx","components/Leftbox/Credit Card/CreditCard.tsx","components/Leftbox/BalanceTransfer/BalanceTransferForm.tsx","components/Leftbox/BalanceTransfer/BalanceTransfer.tsx","components/Leftbox/Personal Loan/LoanDetails.tsx","components/Leftbox/Personal Loan/LoanCommitment.tsx","components/Leftbox/Personal Loan/MaritalStatus.tsx","components/Leftbox/Personal Loan/PersonalLoan.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Chatbox","userInput","updateInput","submitInput","conversation","React","useEffect","Array","from","document","getElementsByClassName","forEach","element","scrollIntoView","block","inline","behavior","handleSubmit","pressedKey","Fragment","className","src","alt","map","conversationItem","index","length","data-side","user","id","key","message","moment","timestamp","format","Provider","value","placeholder","onChange","currentTarget","onKeyPress","onClick","disabled","InputBox","slot","inputProps","handleInputChange","inputLabel","remarks","includes","type","inputType","onFocus","e","parentElement","style","boxShadow","onBlur","inputState","inputName","InputDropdown","useState","isDropdown","setDropdown","dropdownElement","useRef","handleClickOutside","event","current","contains","target","prevState","addEventListener","removeEventListener","toggleDropdown","ref","readOnly","dropdownOption","allowInput","console","log","data-show","optionList","optionItem","label","TabBar","currentTab","updateTab","progressStrict","updateStrictTab","enabledTab","handleTabChange","selectedTab","tabBody","getElementById","data-active","name","data-enabled","content","every","enabledTabItem","nextActiveTabIndex","updatedEnabledTab","enabledItem","Checkbox","updateSelected","rows","active","data-rows","toString","MultipleCheckbox","selectedOptions","maxOption","Infinity","handleArrayUpdate","isActive","removedOptions","filter","selected","some","ImageSelect","image","MultiImageSelect","ToggleText","handleToggleUpdate","ChecklistBox","checklistItem","updateChecklistItem","handleUpdate","data-checked","checked","amount","min","MultiChecklistBox","checklistList","updateChecklistList","prevListLength","setPrevListLength","containers","getElementsByTagName","focus","updatedChecklistItem","updatedChecklist","updatedIndex","handleChecklistItemUpdate","slotInput","CashFromCardForm","updateSubmitted","slotInputItem","transferFrom","phone","email","check","Images","icon_shopping","require","icon_utilities","icon_groceries","icon_education","icon_travel","icon_entertainment","icon_dining","icon_petrol","icon_health","image_submitted","SubmittedView","CashFromCard","userSlot","setUserSlot","submitted","setSubmitted","stateName","AvailableCard","updateSelectedOptions","tempRef","optionLimit","rowSpan","setRowSpan","scrollWidth","ExpenseItem","expenseRange","updateRange","handleRangeChange","adjustedRange","parseInt","max","step","ReactSlider","thumbClassName","trackClassName","defaultValue","minDistance","pearling","ExpenseCategory","details","updateExpenseItem","handleRangeUpdate","subcategoryIndex","adjustedDetails","subcategory","category","subcategoryItem","ExpensesDetails","updateExpenseObject","handleExpenseUpdate","expenseItem","detailItem","Expenses","expenseDetails","generateExpenseObject","optionDetailRender","setOptionDetailRender","incomeSourceFormat","categoryToggleOptions","MonthlyIncomeItem","incomeSource","incomeNo","handleIncomeSourceItemUpdate","updatedIncomeSourceItem","incomeSourceItem","MonthlyIncome","incomeSources","handleIncomeSourceUpdate","updatedIncomeSource","updateIncomeSources","industry","level","jobTitle","income","CreditCard","selectedBanks","setSelectedBanks","selectedExpenses","setSelectedExpenses","expenseObject","setExpenseObject","setIncomeSource","setCurrentTab","tabMenuList","enabled","generatedExpenseObject","option","newExpenseObject","setEnabledTab","handleChangeTab","nextActiveTab","dualDropdown","BalanceTransferForm","BalanceTransfer","transferTo","loanDetailsFormat","LoanDetails","loanDetails","handleLoanDetailsUpdate","updatedLoanDetailsItem","loanDetailsItem","LoanCommitment","loanCommitments","updateLoanCommitments","updatedLoanCommitments","maritalInput","spouseInput","MaritalStatus","maritalInfo","updateMaritalInfo","handleMaritalInfoUpdate","maritalStatus","spouseName","incomeInfo","updatedIncomeInfo","PersonalLoan","loanAmount","repaymentPeriod","setLoanDetails","setMaritalInfo","setLoanCommitments","updatedLoanDetails","updatedMaritalInfo","mockConversation","App","userChatInput","setUserChatInput","setConversation","showChatInMobile","setShowChatInMobile","renderSection","setRenderSection","renderModel","setRenderModel","handleChatInputUpdate","handleChatSubmit","conversationMap","prevConversation","sectionToRender","handleSectionRendering","data-visible","section","handleChangeSection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ac56c01a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Icon-Shopping.cfd7ddc2.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Utilities.84da2eeb.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Groceries.74f92bf8.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Education.6f2e8372.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Travel.2ee0d820.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Entertainment.99ed0e07.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Dining.a0313c63.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Petrol.3a7fd64f.svg\";","module.exports = __webpack_public_path__ + \"static/media/Icon-Health.ed0e2fa8.svg\";","module.exports = __webpack_public_path__ + \"static/media/Image-Submitted.2b3babac.svg\";","import React from 'react';\nimport {\n    MdAdd,\n    MdMic,\n} from 'react-icons/md';\nimport {\n    // RiEmotionHappyLine,\n    RiSendPlaneFill,\n} from 'react-icons/ri';\nimport { IconContext } from 'react-icons/lib';\nimport moment from 'moment';\n\ninterface ChatboxProps {\n    userInput: string;\n    updateInput: (userInput: string) => void;\n    submitInput: () => void,\n    conversation: {\n        user?: string;\n        timestamp?: string;\n        message?: string;\n    }[];\n}\n\nconst Chatbox: React.FC<ChatboxProps> = ({userInput, updateInput, submitInput, conversation}) => {\n    React.useEffect(() => {\n        // Single Element only\n        // const element = document.getElementById('Last-Dialog');\n        // element?.scrollIntoView({block: 'end', inline: 'end', behavior: 'smooth'});\n        // element?.scrollIntoView(false);\n        const elements: Element[] = Array.from(document.getElementsByClassName('Last-Dialog'));\n        elements.forEach(element => element.scrollIntoView({block: 'end', inline: 'end', behavior: 'smooth'}));\n    }, [conversation]);\n\n    const handleUpdate = (text: string) => updateInput(text);\n    const handleSubmit = (pressedKey: string) => pressedKey === 'Enter' && submitInput();\n\n    return (\n        <React.Fragment>\n            <div className=\"Chatbox-Container\">\n                    <div className=\"Chatbox-Avatar Button\">\n                        <img\n                            src=\"https://i.imgur.com/gqSZQbW.png\"\n                            alt=\"AIVI Avatar\"\n                        />\n                    </div>\n                    <div className=\"Chatbox-Box\">\n                        <div className=\"Chatbox-Dialog\">\n                            {\n                                conversation.map((conversationItem, index) => (\n                                    <div\n                                        className={`Dialog-Container ${index === (conversation.length - 1) ? 'Last-Dialog' : 'Not-Last-Dialog'}`}\n                                        data-side={conversationItem.user === 'bot' ? 'left' : 'right'}\n                                        id={index === (conversation.length - 1) ? 'Last-Dialog' : 'Not-Last-Dialog'}\n                                        key={index}\n                                    >\n                                        <div className=\"Dialog-Bubble\">\n                                            <p>{conversationItem.message}</p>\n                                        </div>\n                                        <p className=\"Dialog-Timestamp\">{moment(conversationItem.timestamp).format('Do MMM YYYY h:mmA')}</p>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                        <div className=\"Chatbox-Input\">\n                            <button className=\"Chatbox-Input-UploadOptions Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Rotate Icon-Light Icon-Add' }} >\n                                    <MdAdd />\n                                </IconContext.Provider>\n                            </button>\n                            {/* <textarea\n                                className=\"Chatbox-Input-InputBox\"\n                                placeholder=\"Input here\"\n                                value={userInput}\n                                onChange={({ currentTarget: {value} }) => handleUpdate(value)}\n                                onKeyPress={({ key: pressedKey}) => handleSubmit(pressedKey)}\n                            /> */}\n                            <input\n                                className=\"Chatbox-Input-InputBox\"\n                                placeholder=\"Input here\"\n                                value={userInput}\n                                onChange={({ currentTarget: {value} }) => handleUpdate(value)}\n                                onKeyPress={({ key: pressedKey}) => handleSubmit(pressedKey)}\n                            />\n                            \n                            <button className=\"Chatbox-Input-Audible Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Audible' }} >\n                                    <MdMic />\n                                </IconContext.Provider>\n                            </button>\n                            {/* <button className=\"Chatbox-Input-Smiley Button\">\n                                <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Smiley' }} >\n                                    <RiEmotionHappyLine />\n                                </IconContext.Provider>\n                            </button> */}\n                            <button\n                                className=\"Chatbox-Input-Send Button Button-Send\"\n                                onClick={() => handleSubmit('Enter')}\n                                disabled={userInput === ''}\n                            >\n                                <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Send' }} >\n                                    <RiSendPlaneFill />\n                                </IconContext.Provider>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n        </React.Fragment>\n    );\n}\n\nexport default Chatbox;","import React from 'react';\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    remarks?: string[],\n};\n\ninterface InputBoxProps {\n    slot: any;\n    inputProps: slotInputType;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\nconst InputBox: React.FC<InputBoxProps> = ({slot, inputProps, handleInputChange}) => {\n    const handleInputFocus = (e: React.FocusEvent) => {\n        if (e.currentTarget.parentElement?.parentElement) e.currentTarget.parentElement.parentElement.style.boxShadow = 'var(--selected-box-shadow)';\n    };\n\n    const handleInputBlur = (e: any) => {\n        if (e.currentTarget.parentElement?.parentElement)  e.currentTarget.parentElement.parentElement.style.boxShadow = 'var(--box-shadow)';\n    };\n\n    return (\n        <div\n            className=\"InputBox-Container\"\n        >\n            <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n            <div className=\"InputBox-InputArea\">\n                {\n                    inputProps.remarks?.includes('currency') && <p className=\"InputBox-Currency\">RM</p>\n                }\n                <input\n                    type={inputProps.inputType}\n                    onFocus={handleInputFocus}\n                    onBlur={handleInputBlur}\n                    value={slot[inputProps.inputState]}\n                    onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default InputBox;","import React from 'react';\nimport {\n    IoIosArrowDown,\n    IoIosClose,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\n// Input Configuration Formatting\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    // optionList?: InputOptionType[];\n    dropdownOption?: {\n        allowInput: boolean;\n        optionList: InputOptionType[];\n    }\n};\n\n// All slot data\n\n// Props Configuration\ninterface InputDropdownProps {\n    slot: any;\n    inputProps: slotInputType;\n    handleInputChange: (value: string, stateName: string) => void;\n    \n}\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\n// function useOutsideAlerter(ref: React.MutableRefObject<null | HTMLElement>) {\n//     React.useEffect(() => {\n//         /**\n//          * Alert if clicked on outside of element\n//          */\n//         function handleClickOutside(event: { target: any; }) {\n//             if (ref.current && !ref.current.contains(event.target)) {\n//                 alert(\"You clicked outside of me!\");\n//             }\n//         }\n\n//         // Bind the event listener\n//         document.addEventListener(\"mousedown\", handleClickOutside);\n//         return () => {\n//             // Unbind the event listener on clean up\n//             document.removeEventListener(\"mousedown\", handleClickOutside);\n//         };\n//     }, [ref]);\n// }\n\nconst InputDropdown: React.FC<InputDropdownProps> = ({slot, inputProps, handleInputChange}) => {\n    const [isDropdown, setDropdown] = React.useState(false);\n\n    const dropdownElement = React.useRef<null | HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        function handleClickOutside(event: { target: any; }) {\n            if (dropdownElement.current && !dropdownElement.current.contains(event.target)) {\n                if (isDropdown) {\n                    setDropdown(prevState => { return false });\n                }\n            }\n        }\n\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [dropdownElement, isDropdown]);\n\n    const toggleDropdown = () => {\n        setDropdown(prevState => { return !prevState });\n    };\n\n    const handleChooseOption = (value: string) => {\n        handleInputChange(value, inputProps.inputState);\n        setDropdown(prevState => { return !prevState });\n    };\n\n    const handleInputFocus = (e: React.FocusEvent) => {\n        // if (e.currentTarget.parentElement?.parentElement?.parentElement) e.currentTarget.parentElement.parentElement.parentElement.style.boxShadow = 'var(--selected-box-shadow)';\n        // setDropdown(prevState => { return true });\n    };\n\n    // const handleInputBlur = (e: any) => {\n    //     // if (e.currentTarget.parentElement?.parentElement?.parentElement)  e.currentTarget.parentElement.parentElement.parentElement.style.boxShadow = 'var(--box-shadow)';\n    //     setDropdown(prevState => { return false });\n    // };\n\n    return (\n        <div className=\"InputDropdown-Wrapper\" ref={dropdownElement}>\n            <div\n                className=\"InputBox-Container InputDropdown-Container\"\n            >\n                <div\n                    className=\"InputDropdown-Thumb\"\n                    onClick={toggleDropdown}\n                >\n                    <p className=\"InputBox-Label\">{inputProps.inputLabel}</p>\n                    <div className=\"InputBox-InputArea\">\n                        {\n                            inputProps.inputName === 'amount' && <p className=\"InputBox-Currency\">RM</p>\n                        }\n                        <input\n                            type={inputProps.inputType}\n                            readOnly={!inputProps.dropdownOption?.allowInput}\n                            onFocus={handleInputFocus}\n                            value={slot[inputProps.inputState]}\n                            onChange={({ currentTarget: {value} }) => handleInputChange(value, inputProps.inputName)}\n                            placeholder={inputProps.dropdownOption?.allowInput ? 'Select from dropdown, or type your own': 'Select from dropdown'}\n                        />\n                    </div>\n                </div>\n                <div className=\"InputDropdown-Action\">\n                    <button\n                        className=\"InputDropdown-Button Button\"\n                        onClick={()=> console.log()}\n                    >\n                        <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Close' }} >\n                            <IoIosClose />\n                        </IconContext.Provider>\n                    </button>\n                    <div\n                        className=\"InputDropdown-Button Button\"\n                        onClick={toggleDropdown}\n                    >\n                        <IconContext.Provider value={{ className: 'Icon Icon-Dark Icon-Down' }} >\n                            <IoIosArrowDown />\n                        </IconContext.Provider>\n                    </div>\n                </div>\n            </div>\n            <div\n                className=\"InputDropdown-List\"\n                data-show={isDropdown}\n            >\n                <ul>\n                    {\n                        inputProps.dropdownOption && inputProps.dropdownOption.optionList.length !== 0\n                        ? inputProps.dropdownOption.optionList.map((optionItem, index) => (\n                            <li\n                                key={index}\n                                onClick={() => handleChooseOption(optionItem.value)}\n                            >\n                                {optionItem.label}\n                            </li>\n                        ))\n                        : (\n                            <li\n                                className=\"InputDropdown-NoData\"\n                            >\n                                No item to display\n                            </li>\n                        )\n                        \n                    }\n                </ul>\n            </div>\n        </div>\n    );\n};\n\nexport default InputDropdown;","import React from 'react';\nimport {\n    IoMdArrowRoundForward,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype optionList = {\n    label: string,\n    name: string,\n    content: JSX.Element;\n    enabled?: boolean;\n};\n\ninterface TabBarProps {\n    currentTab: string;\n    updateTab: (selectedTab: string) => void;\n    optionList: optionList[];\n    progressStrict?: boolean;\n    updateStrictTab?: (enabledTab: boolean[] | undefined, nextActiveTab: string) => void;\n    enabledTab?: boolean[];\n}\n\nconst TabBar: React.FC<TabBarProps> = ({currentTab, updateTab, optionList, progressStrict = false, updateStrictTab, enabledTab}) => {\n    const handleTabChange = (selectedTab: string) => {\n        const tabBody = document.getElementById(selectedTab);\n        tabBody && tabBody.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n        updateTab(selectedTab);\n    }\n\n    const handleProceedTab = () => {\n        // let enablingFlag = false;\n        // let nextActiveTab = currentTab;\n        // const updatedTabConfig = optionList.map(optionItem => {\n        //     if (optionItem.name === currentTab) {\n        //         enablingFlag = true;\n        //         return optionItem;\n        //     };\n        //     if (enablingFlag) {\n        //         enablingFlag = false;\n        //         nextActiveTab = optionItem.name;\n        //         return {...optionItem, enabled: true};\n        //     }\n        //     return optionItem;\n        // });\n        // updateStrictTab && updateStrictTab(updatedTabConfig, nextActiveTab);\n        let nextActiveTabIndex = -1;\n        const updatedEnabledTab = enabledTab?.map((enabledItem, index) => {\n            enabledItem && (nextActiveTabIndex = index + 1);\n            if (nextActiveTabIndex === index) { return true; } else { return enabledItem; }\n        });\n        updateStrictTab && updateStrictTab(updatedEnabledTab, optionList[nextActiveTabIndex].name);\n    }\n\n    React.useEffect(() => {\n        const tabBody = document.getElementById(currentTab);\n        tabBody && tabBody.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentTab]);\n\n    return (\n        <React.Fragment>\n            <div className=\"TabBar-Container\">\n                <ul className=\"TabBar-Header\">\n                    {\n                        optionList.map((optionItem, index) => (\n                            <li\n                                data-active={optionItem.name === currentTab}\n                                data-enabled={progressStrict ? (enabledTab ? enabledTab[index] : true) : true}\n                                // onClick={() => handleTabChange(optionItem.name)}\n                                onClick={() => progressStrict ? (enabledTab && enabledTab[index] && handleTabChange(optionItem.name)) : handleTabChange(optionItem.name)}\n                                key={index}\n                            >\n                                {optionItem.label}\n                            </li>\n                        ))\n                    }\n                </ul>\n                <div className=\"TabBar-Body\" id=\"TabBar-Body\">\n                    {\n                        optionList.map((optionItem, index) => (\n                            (!progressStrict || (enabledTab && enabledTab[index])) && <div className=\"TabBar-Body-Item\" id={optionItem.name} key={index}>\n                                {optionItem.content}\n                            </div>\n                        ))\n                    }\n                </div>\n                {\n                    (progressStrict && !enabledTab?.every(enabledTabItem => enabledTabItem) ) && (\n                        <div className=\"TabBar-ProgressAction\">\n                            <button\n                                className=\"TabBar-ProgressAction-Proceed\"\n                                onClick={handleProceedTab}\n                            >\n                                <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Proceed' }} >\n                                    <IoMdArrowRoundForward />\n                                </IconContext.Provider>\n                            </button>\n                        </div>\n                    )\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TabBar;","import React from 'react';\nimport {\n    IoIosCheckmark,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype optionType = {\n    name: string,\n    label: string,\n};\n\ninterface CheckboxProps {\n    name: string;\n    label: string;\n    updateSelected: (value: string, isActive: boolean) => void;\n    rows?: number;\n    active: boolean;\n}\n\ninterface MultipleCheckboxProps {\n    optionList: optionType[];\n    selectedOptions: string[];\n    updateSelected: (selectedList: string[]) => void;\n    maxOption?: number;\n    rows?: number;\n}\n\nconst Checkbox: React.FC<CheckboxProps> = ({name, label, updateSelected, rows, active}) => {\n    const handleUpdate = (value: string) => {\n        updateSelected(value, active);\n    }\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"Checkbox-Container\"\n                data-rows={rows?.toString()}\n                data-active={active}\n                onClick={() => handleUpdate(name)}\n            >\n                <div className=\"Checkbox-Indicator\">\n                    <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Check' }} >\n                        <IoIosCheckmark />\n                    </IconContext.Provider>\n                </div>\n                <p>{label}</p>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultipleCheckbox: React.FC<MultipleCheckboxProps> = ({optionList, selectedOptions, updateSelected, maxOption = Infinity, rows = 1}) => {\n\n    const handleArrayUpdate = (value: string, isActive: boolean) => {\n        // Deselect Option\n        if (isActive) {\n            const removedOptions = selectedOptions.filter(selected => selected !== value);\n            updateSelected(removedOptions);\n        }\n        // Select Option\n        else {\n            if (selectedOptions.length < maxOption) updateSelected([...selectedOptions, value]);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"Checkbox-Multiple\">\n            {\n                optionList.map((optionItem, index) => (\n                    <Checkbox\n                        name={optionItem.name}\n                        label={optionItem.label}\n                        updateSelected={handleArrayUpdate}\n                        rows={rows}\n                        active={selectedOptions.some(selected => selected === optionItem.name)}\n                        key={index}\n                    />\n                ))\n            }\n            </div>\n            {\n                maxOption !== Infinity && <p className=\"Checkbox-Limit\">Max: {maxOption}</p>\n            }\n        </React.Fragment>\n    );\n};\n\nexport {\n    Checkbox,\n    MultipleCheckbox,\n};","import React from 'react';\n\ntype optionType = {\n    name: string,\n    label: string,\n    image: string,\n};\n\ninterface ImageSelectType {\n    name: string;\n    label: string;\n    image: string;\n    updateSelected: (value: string, isActive: boolean) => void;\n    active: boolean;\n}\n\ninterface MultiImageSelectType {\n    optionList: optionType[];\n    selectedOptions: string[];\n    updateSelected: (selectedList: string[]) => void;\n    maxOption?: number;\n}\n\nconst ImageSelect: React.FC<ImageSelectType> = ({name, label, image, updateSelected, active}) => {\n    const handleUpdate = (value: string) => {\n        updateSelected(value, active);\n    }\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"ImageSelect-Wrapper\"\n                onClick={() => handleUpdate(name)}\n                data-active={active}\n            >\n                <div className=\"ImageSelect-ImageContainer\">\n                    <img src={image} alt={label} />\n                </div>\n                <p className=\"ImageSelect-Label\">{label}</p>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultiImageSelect: React.FC<MultiImageSelectType> = ({optionList, selectedOptions, updateSelected, maxOption = Infinity}) => {\n    const handleArrayUpdate = (value: string, isActive: boolean) => {\n        // Deselect Option\n        if (isActive) {\n            const removedOptions = selectedOptions.filter(selected => selected !== value);\n            updateSelected(removedOptions);\n        }\n        // Select Option\n        else {\n            if (selectedOptions.length < maxOption) updateSelected([...selectedOptions, value]);\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"ImageSelect-Multiple\">\n                {\n                    optionList.map((optionItem, index) => (\n                        <ImageSelect\n                            name={optionItem.name}\n                            label={optionItem.label}\n                            image={optionItem.image}\n                            active={selectedOptions.some(selected => selected === optionItem.name)}\n                            updateSelected={handleArrayUpdate}\n                            key={index}\n                        />\n                    ))\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport {\n    MultiImageSelect,\n    ImageSelect,\n};","import React from 'react';\n\ninterface ToggleTextProps {\n    optionList: string[];\n    selected: string;\n    handleToggleUpdate: (value: string) => void;\n}\n\nconst ToggleText: React.FC<ToggleTextProps> = ({optionList, selected, handleToggleUpdate}) => {\n    const handleToggleChange = (value: string) => {\n        handleToggleUpdate(value);\n    };\n\n    return (\n        <div className=\"ToggleText-Container\">\n            <ul>\n                {\n                    optionList.map((optionItem, index) => (\n                        <li\n                            key={index}\n                            onClick={() => handleToggleChange(optionItem)}\n                            data-active={optionItem === selected}\n                        >{optionItem}</li>\n                    ))\n                }\n            </ul>\n        </div>\n    );\n};\n\nexport default ToggleText;","import React from 'react';\nimport {\n    IoIosCheckmark,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype ChecklistItemType = {\n    checked: boolean,\n    name: string,\n    amount?: string,\n    remarks?: string[],\n};\n\ntype ChecklistType = ChecklistItemType[];\n\ninterface ChecklistBoxProps {\n    checklistItem: ChecklistItemType;\n    updateChecklistItem: (updatedChecklistItem: ChecklistItemType) => void;\n}\n\ninterface MultiChecklistBoxProps {\n    checklistList: ChecklistType;\n    updateChecklistList: (udpatedChecklistList : ChecklistType) => void;\n};\n\nconst ChecklistBox: React.FC<ChecklistBoxProps> = ({ checklistItem, updateChecklistItem}) => {\n    const handleUpdate = (value: string | boolean, key: string) => {\n        updateChecklistItem({...checklistItem, [key]: value});\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"ChecklistBox-Container\">\n                <button\n                    className=\"ChecklistBox-Checkbox\"\n                    data-checked={checklistItem.checked}\n                    onClick={() => handleUpdate(!checklistItem.checked, 'checked')}\n                >\n                    <IconContext.Provider value={{ className: 'Icon Icon-Light Icon-Check' }} >\n                        <IoIosCheckmark />\n                    </IconContext.Provider>\n                </button>\n                <input className=\"ChecklistBox-Label\"\n                    value={checklistItem.name}\n                    placeholder=\"Enter new input\"\n                    readOnly={checklistItem.remarks?.includes('readonly')}\n                    onChange={({ currentTarget: { value } }) => handleUpdate(value, 'name')}\n                />\n                {\n                    checklistItem.remarks?.includes('amount') && checklistItem.checked && (\n                        <div className=\"ChecklistBox-Amount\">\n                            RM <input\n                                value={checklistItem.amount}\n                                type=\"number\"\n                                min={0}\n                                onChange={({ currentTarget: { value } }) => handleUpdate(value, 'amount')}\n                            />\n                        </div>\n                    )\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst MultiChecklistBox: React.FC<MultiChecklistBoxProps> = ({checklistList, updateChecklistList}) => {\n    const [prevListLength, setPrevListLength] = React.useState(checklistList.length);\n    const handleChecklistItemUpdate = (updatedChecklistItem: ChecklistItemType, index: number) => {\n        const updatedChecklist = checklistList.map((checklistItem, updatedIndex) => updatedIndex === index ? updatedChecklistItem : checklistItem);\n        updateChecklistList(updatedChecklist);\n    }\n\n    const addObjectToChecklist = () => {\n        const newChecklistObject = {\n            checked: true,\n            name: '',\n            amount: '0',\n            remarks: ['amount'],\n        };\n        updateChecklistList([...checklistList, newChecklistObject]);\n    }\n\n    React.useEffect(() => {\n        if (prevListLength !== checklistList.length) {\n            const containers = document.getElementsByClassName('ChecklistBox-Container');\n            containers[containers.length - 2].getElementsByTagName('input')[0].focus();\n            setPrevListLength(checklistList.length);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checklistList]);\n\n    return (\n        <React.Fragment>\n            {\n                checklistList.map((checklistItem, index) => (\n                    <ChecklistBox\n                        checklistItem={checklistItem}\n                        updateChecklistItem={(checklistItem) => handleChecklistItemUpdate(checklistItem, index)}\n                        key={index}\n                    />\n                ))\n            }\n            <div className=\"ChecklistBox-Container\">\n                <button\n                    className=\"ChecklistBox-Checkbox\"\n                    id=\"Testing\"\n                    data-checked={false}\n                />\n                <input className=\"ChecklistBox-Label\"\n                    value={`- Add Your Own -`}\n                    readOnly={true}\n                    onClick={addObjectToChecklist}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport {\n    ChecklistBox,\n    MultiChecklistBox,\n};","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ntype slotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ninterface CashFromCardProps {\n    slot: slotType;\n    updateSubmitted: () => void;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    dropdownOption?: {\n        allowInput: boolean;\n        optionList: InputOptionType[];\n    },\n    remarks?: string[],\n};\n\nconst slotInput: slotInputType[] = [\n        {\n            inputName: 'transferFrom',\n            inputState: 'transferFrom',\n            inputType: 'dropdown',\n            inputLabel: 'Transfer from',\n            dropdownOption: {\n                allowInput: true,\n                optionList: [\n                    {\n                        name: 'Hello',\n                        label: 'Hello',\n                        value: 'Hello',\n                    },\n                    {\n                        name: 'World',\n                        label: 'World',\n                        value: 'World',\n                    },\n                    {\n                        name: 'React',\n                        label: 'React',\n                        value: 'React',\n                    },\n                ],\n            },\n        },\n        {\n            inputName: 'name',\n            inputState: 'name',\n            inputType: 'text',\n            inputLabel: 'Name',\n        },\n        {\n            inputName: 'phone',\n            inputState: 'phone',\n            inputType: 'text',\n            inputLabel: 'Phone',\n        },\n        {\n            inputName: 'email',\n            inputState: 'email',\n            inputType: 'email',\n            inputLabel: 'Email',\n        },\n        {\n            inputName: 'amount',\n            inputState: 'amount',\n            inputType: 'number',\n            inputLabel: 'Amount',\n            remarks: ['currency'],\n        },\n    ];\n\nconst CashFromCardForm: React.FC<CashFromCardProps> = ({slot, updateSubmitted, handleInputChange}) => {\n    return (\n        <React.Fragment>\n            <section className=\"AIVIForm-Content\">\n                <p className=\"AIVIForm-Title\">\n                    Application Status: In Progress\n                </p>\n                <p className=\"AIVIForm-Description\">\n                    You can view your progress so far here. Feel free to edit the information by clicking on the field.\n                </p>\n                <div className=\"AIVIForm-Details\">\n                    {\n                        slotInput.map((slotInputItem: slotInputItemType, index: number) => (\n                            slotInputItem.inputType === 'dropdown'\n                            ? (\n                                <InputDropdown\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                            : (\n                                <InputBox\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                        ))\n                    }\n                </div>\n            </section>\n            <section className=\"AIVIForm-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                    onClick={updateSubmitted}\n                    disabled={[slot.transferFrom, slot.name, slot.phone, slot.email, slot.amount].some(check => check === '')}\n                >\n                    Submit Application\n                </button>\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default CashFromCardForm;","export const Images = {\n    icon_shopping: require('../assets/images/Icon-Shopping.svg'),\n    icon_utilities: require('../assets/images/Icon-Utilities.svg'),\n    icon_groceries: require('../assets/images/Icon-Groceries.svg'),\n    icon_education: require('../assets/images/Icon-Education.svg'),\n    icon_travel: require('../assets/images/Icon-Travel.svg'),\n    icon_entertainment: require('../assets/images/Icon-Entertainment.svg'),\n    icon_dining: require('../assets/images/Icon-Dining.svg'),\n    icon_petrol: require('../assets/images/Icon-Petrol.svg'),\n    icon_health: require('../assets/images/Icon-Health.svg'),\n\n    image_submitted: require('../assets/images/Image-Submitted.svg'),\n}","import React from 'react';\nimport { Images } from '../../utils/Images';\n\ninterface SubmittedViewProps {\n    updateSubmitted: () => void;\n}\n\nconst SubmittedView: React.FC<SubmittedViewProps> = ({updateSubmitted}) => {\n    return (\n        <>\n            <section className=\"Leftbox-Submitted\">\n                <p>Application Form Submitted</p>\n                <img\n                    src={Images.image_submitted}\n                    alt=\"Submitted\"\n                />\n                <button\n                    className=\"Button Button-FitContent\"\n                    onClick={updateSubmitted}\n                >\n                    Back to Main Menu\n                </button>\n            </section>\n        </>\n    );\n}\n\nexport default SubmittedView;","import React from 'react';\nimport CashFromCardForm from './CashFromCardForm';\nimport SubmittedView from '../SubmittedView';\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\nconst CashFromCard: React.FC = () => {\n    const [userSlot, setUserSlot] = React.useState({\n        transferFrom: '',\n        name: '',\n        phone: '',\n        email: '',\n        amount: '',\n    });\n    const [submitted, setSubmitted] = React.useState(false);\n\n    const handleInputChange = (value: string, stateName: string) => {\n        setUserSlot(() => {return {...userSlot, [stateName]: value}});\n    };\n\n    const handleSubmit = () => {\n        setSubmitted(prevState => { return !prevState});\n    };\n\n    if (!submitted) return <CashFromCardForm\n                                slot={userSlot}\n                                updateSubmitted={handleSubmit}\n                                handleInputChange={handleInputChange}\n                            />\n    else return <SubmittedView updateSubmitted={handleSubmit} />\n}\n\nexport default CashFromCard;","import React from 'react';\nimport {\n    MultipleCheckbox,\n} from '../../CustomComponent';\n\ninterface AvailableCardProps {\n    selectedOptions: string[];\n    updateSelectedOptions: (selected: string[]) => void;\n    optionLimit: number;\n}\n\nconst AvailableCard: React.FC<AvailableCardProps> = ({selectedOptions, updateSelectedOptions, optionLimit}) => {\n    const optionList = [\n        {\n            name: 'CIMB Bank',\n            label: 'CIMB Bank',\n        },\n        {\n            name: 'Alliance Bank',\n            label: 'Alliance Bank',\n        },\n        {\n            name: 'Maybank',\n            label: 'Maybank',\n        },\n        {\n            name: 'OCBC',\n            label: 'OCBC',\n        },\n        {\n            name: 'RHB Bank',\n            label: 'RHB Bank',\n        },\n        {\n            name: 'Public Bank',\n            label: 'Public Bank',\n        },\n        {\n            name: 'BSN',\n            label: 'BSN',\n        },\n        {\n            name: 'Bank Rakyat',\n            label: 'Bank Rakyat',\n        },\n        {\n            name: 'Affin Bank',\n            label: 'Affin Bank',\n        },\n        {\n            name: 'Standard Chartered',\n            label: 'Standard Chartered',\n        },\n        {\n            name: 'Citibank',\n            label: 'Citibank',\n        },\n        {\n            name: 'UOB Malaysia',\n            label: 'UOB Malaysia',\n        },\n        {\n            name: 'Hong Leong Bank',\n            label: 'Hong Leong Bank',\n        },\n        {\n            name: 'AEON Credit Service',\n            label: 'AEON Credit Service',\n        },\n        {\n            name: 'HSBC',\n            label: 'HSBC',\n        },\n        {\n            name: 'Paydee',\n            label: 'Paydee',\n        },\n    ];\n    const tempRef = React.useRef<HTMLDivElement>(null);\n    const [rowSpan, setRowSpan] = React.useState(2);\n\n    const handleModifySelectedOptions = (selected: string[]) => {\n        updateSelectedOptions(selected);\n    }\n    \n    React.useEffect(() => {\n        setRowSpan(prevState => {\n            if (tempRef.current) {\n                if (tempRef.current.scrollWidth > 450) return 2\n                else return 1;\n            }\n            else return prevState;\n        });\n    }, [tempRef]);\n\n    return (\n        <React.Fragment>\n            <div ref={tempRef}>\n                <MultipleCheckbox\n                    optionList={optionList}\n                    selectedOptions={selectedOptions}\n                    updateSelected={handleModifySelectedOptions}\n                    maxOption={3}\n                    rows={rowSpan}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default AvailableCard;","import React from 'react';\n// import {\n//     RangeSlider,\n// } from '../../CustomComponent';\nimport ReactSlider from 'react-slider';\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n};\n\ninterface ExpenseItemProps {\n    name?: string;\n    expenseRange: number[];\n    updateRange: (value: number[]) => void;\n}\n\ninterface ExpenseCategoryProps {\n    details: ExpenseDetails;\n    updateExpenseItem: (expenseItem: ExpenseDetails) => void;\n}\n\ninterface ExpenseDetailsProps {\n    details: ExpenseDetails[];\n    updateExpenseObject: (expenseObject: ExpenseDetails[]) => void;\n}\n\nconst ExpenseItem: React.FC<ExpenseItemProps> = ({name, expenseRange, updateRange}) => {\n    const minRange = 200;\n    const maxRange = 10000;\n    const sliderStep = 100;\n    const sliderMinDistance = 500;\n\n    const handleRangeChange = (value: number[]) => {\n        updateRange(value);\n    }\n\n    const handleInputChange = (value: string, index: number) => {\n        const adjustedRange = expenseRange;\n        adjustedRange[index] = parseInt(value);\n        handleRangeChange(adjustedRange);\n    }\n\n    return (\n        <div className=\"ExpenseDetails-Item\">\n            <input\n                className=\"ExpenseDetails-Input ExpenseDetails-InputMin\"\n                type=\"number\"\n                min={minRange}\n                max={maxRange}\n                step={sliderStep}\n                value={expenseRange[0]}\n                onChange={({ currentTarget: { value } }) => handleInputChange(value, 0)}\n                readOnly={true}\n            ></input>\n            <div className=\"ExpenseDetails-Slider\">\n                {\n                    name && <p className=\"ExpenseDetails-Label\">{name}</p>\n                }\n                {/* <RangeSlider\n                    min={minRange}\n                    max={maxRange}\n                    step={sliderStep}\n                    minDistance={sliderMinDistance}\n                    defaultValue={expenseRange}\n                    value={expenseRange}\n                    handleChange={handleRangeChange}\n                /> */}\n                <ReactSlider\n                    className=\"RangeSlider-Item\"\n                    thumbClassName=\"RangeSlider-Thumb\"\n                    trackClassName=\"RangeSlider-Track\"\n                    defaultValue={expenseRange}\n                    step={sliderStep}\n                    minDistance={sliderMinDistance}\n                    pearling={true}\n                    min={minRange}\n                    max={maxRange}\n                    onChange={(value) => handleRangeChange(value as number[])}\n                />\n            </div>\n            <input\n                className=\"ExpenseDetails-Input ExpenseDetails-InputMax\"\n                type=\"number\"\n                min={minRange}\n                max={maxRange}\n                step={sliderStep}\n                value={expenseRange[1]}\n                onChange={({ currentTarget: { value } }) => handleInputChange(value, 1)}\n                readOnly={true}\n            ></input>\n        </div>\n    );\n}\n\nconst ExpenseCategory: React.FC<ExpenseCategoryProps> = ({details, updateExpenseItem}) => {\n    const handleRangeUpdate = (value: number[], subcategoryIndex?: number) => {\n        const adjustedDetails = details;\n        if (adjustedDetails.subcategory) {\n            adjustedDetails.subcategory[subcategoryIndex as number].expenseRange = value;\n        }\n        else {\n            adjustedDetails.expenseRange = value;\n        }\n        updateExpenseItem(adjustedDetails);\n    };\n\n    return (\n        <React.Fragment>\n            <div className=\"ExpenseDetails-Wrapper\">\n                <p className=\"ExpenseDetails-Title\">{details.category}</p>\n                <div className=\"ExpenseDetails-Container\">\n                    {\n                        details.subcategory\n                        ? details.subcategory.map((subcategoryItem, index) => (\n                            <ExpenseItem\n                                name={subcategoryItem.name}\n                                expenseRange={subcategoryItem.expenseRange}\n                                updateRange={value => handleRangeUpdate(value, index)}\n                                key={index}\n                            />\n                        ))\n                        : <ExpenseItem\n                            expenseRange={details.expenseRange as number[]}\n                            updateRange={value => handleRangeUpdate(value)}\n                        />\n                    }\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nconst ExpensesDetails: React.FC<ExpenseDetailsProps> = ({details, updateExpenseObject}) => {\n    const handleExpenseUpdate = (expenseItem: ExpenseDetails) => {\n        const adjustedDetails = details.map(detailItem => (detailItem.category === expenseItem.category) ? expenseItem : detailItem);\n        updateExpenseObject(adjustedDetails);\n    }\n\n    return (\n        <React.Fragment>\n            {\n                details.map((detailItem, index) => (\n                    <ExpenseCategory\n                        details={detailItem}\n                        updateExpenseItem={handleExpenseUpdate}\n                        key={index}\n                    />\n                ))\n            }\n        </React.Fragment>\n    );\n};\n\nexport default ExpensesDetails;","import React from 'react';\nimport {\n    MultiImageSelect,\n} from '../../CustomComponent';\nimport ExpensesDetails from './ExpensesDetails';\nimport { Images } from '../../../utils/Images';\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n}[];\n\ninterface ExpensesProps {\n    selectedOptions: string[];\n    updateSelectedOptions: (selected: string[]) => void;\n    optionLimit: number;\n    expenseDetails: ExpenseDetails;\n    generateExpenseObject: () => void;\n    updateExpenseObject: (expenseObject: ExpenseDetails) => void;\n}\n\nconst Expenses: React.FC<ExpensesProps> = ({selectedOptions, updateSelectedOptions, optionLimit, expenseDetails, generateExpenseObject, updateExpenseObject}) => {\n    const [optionDetailRender, setOptionDetailRender] = React.useState<boolean>(false);\n    const optionList = [\n        {\n            name: 'Shopping',\n            label: 'Shopping',\n            image: Images.icon_shopping,\n        },\n        {\n            name: 'Utilities',\n            label: 'Utilities',\n            image: Images.icon_utilities,\n        },\n        {\n            name: 'Groceries',\n            label: 'Groceries',\n            image: Images.icon_groceries,\n        },\n        {\n            name: 'Education',\n            label: 'Education',\n            image: Images.icon_education,\n        },\n        {\n            name: 'Travel',\n            label: 'Travel',\n            image: Images.icon_travel,\n        },\n        {\n            name: 'Entertainment',\n            label: 'Entertainment',\n            image: Images.icon_entertainment,\n        },\n        {\n            name: 'Dining',\n            label: 'Dining',\n            image: Images.icon_dining,\n        },\n        {\n            name: 'Petrol',\n            label: 'Petrol',\n            image: Images.icon_petrol,\n        },\n        {\n            name: 'Health & Insurance',\n            label: 'Health & Insurance',\n            image: Images.icon_health,\n        },\n    ];\n\n    const handleOptionDetails = () => {\n        if (!optionDetailRender) {\n            generateExpenseObject();\n        }\n\n        setOptionDetailRender(prevState => { return !prevState });\n    }\n\n    const handleModifySelectedOptions = (selected: string[]) => {\n        updateSelectedOptions(selected);\n    }\n\n    const handleExpenseDetailsUpdate = (expenseDetails: ExpenseDetails) => {\n        updateExpenseObject(expenseDetails);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"Expenses\">\n                {\n                    !optionDetailRender\n                    ? (\n                        <div className=\"Expenses-SelectWrapper\">\n                            <MultiImageSelect\n                                optionList={optionList}\n                                selectedOptions={selectedOptions}\n                                updateSelected={handleModifySelectedOptions}\n                                maxOption={optionLimit}\n                            />\n                        </div>\n                    )\n                    : (\n                        <ExpensesDetails\n                            details={expenseDetails}\n                            updateExpenseObject={handleExpenseDetailsUpdate}\n                        />\n                    )\n                }\n                <div className=\"Expenses-Proceed\">\n                    <button\n                        disabled={selectedOptions.length !== optionLimit}\n                        onClick={handleOptionDetails}\n                    >{optionDetailRender ? `Repick Category` : `Proceed`}</button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Expenses;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n    ToggleText,\n} from '../../CustomComponent';\nimport {\n    IoIosAdd,\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype IncomeSourceType = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n};\n\ninterface IncomeSourceItemProps {\n    incomeSource: IncomeSourceType;\n    incomeNo: number;\n    handleIncomeSourceItemUpdate: (incomeSourceItem: IncomeSourceType) => void;\n}\n\ninterface MonthlyIncomeProps {\n    incomeSources: IncomeSourceType[];\n    handleIncomeSourceUpdate: (updatedIncomeSource: IncomeSourceType[]) => void;\n}\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    dropdownOption?: {\n        allowInput: boolean,\n        optionList: InputOptionType[],\n    },\n    remarks?: string[],\n};\n\nconst incomeSourceFormat: slotInputItemType[] = [\n    {\n        inputName: 'industry',\n        inputState: 'industry',\n        inputType: 'dropdown',\n        inputLabel: 'Industry',\n        dropdownOption: {\n            allowInput: true,\n            optionList: [\n                {\n                    name: 'Food',\n                    label: 'Food',\n                    value: 'Food',\n                },\n                {\n                    name: 'Hospitality',\n                    label: 'Hospitality',\n                    value: 'Hospitality',\n                },\n                {\n                    name: 'Technology',\n                    label: 'Technology',\n                    value: 'Technology',\n                },\n                {\n                    name: 'Tourism',\n                    label: 'Tourism',\n                    value: 'Tourism',\n                },\n                {\n                    name: 'Healthcare',\n                    label: 'Healthcare',\n                    value: 'Healthcare',\n                },\n                {\n                    name: 'Defense & Security',\n                    label: 'Defense & Security',\n                    value: 'Defense & Security',\n                },\n            ],\n        },\n        \n    },\n    {\n        inputName: 'level',\n        inputState: 'level',\n        inputType: 'dropdown',\n        inputLabel: 'Level',\n        dropdownOption: {\n            allowInput: false,\n            optionList: [\n                {\n                    name: 'Non-executive',\n                    label: 'Non-executive',\n                    value: 'Non-executive',\n                },\n                {\n                    name: 'Executive',\n                    label: 'Executive',\n                    value: 'Executive',\n                },\n                {\n                    name: 'Management',\n                    label: 'Management',\n                    value: 'Management',\n                },\n            ],\n        },\n    },\n    {\n        inputName: 'jobTitle',\n        inputState: 'jobTitle',\n        inputType: 'text',\n        inputLabel: 'Job Title',\n    },\n    {\n        inputName: 'income',\n        inputState: 'income',\n        inputType: 'number',\n        inputLabel: 'Income',\n        remarks: ['currency'],\n    },\n];\n\nconst categoryToggleOptions = ['Primary', 'Secondary'];\n\nconst MonthlyIncomeItem: React.FC<IncomeSourceItemProps> = ({incomeSource, incomeNo, handleIncomeSourceItemUpdate}) => {\n    const handleInputChange = (value: string, stateName: string) => {\n        const updatedIncomeSourceItem = {...incomeSource, [stateName]: value};\n        handleIncomeSourceItemUpdate(updatedIncomeSourceItem);\n    }\n\n    return (\n        <div className=\"MonthlyIncome-Container\">\n            <div className=\"MonthlyIncome-SectionHeader\">\n                <p className=\"MonthlyIncome-SectionTitle\">Income {incomeNo}</p>\n                <ToggleText\n                    optionList={categoryToggleOptions}\n                    selected={incomeSource.category}\n                    handleToggleUpdate={(value: string) => handleInputChange(value, 'category')}\n                />\n            </div>\n            {\n                incomeSourceFormat.map((incomeSourceItem, index) => (\n                    incomeSourceItem.inputType === 'dropdown'\n                    ? (\n                        <InputDropdown\n                            slot={incomeSource}\n                            inputProps={incomeSourceItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                    : (\n                        <InputBox\n                            slot={incomeSource}\n                            inputProps={incomeSourceItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                ))\n            }\n        </div>\n    );\n}\n\nconst MonthlyIncome: React.FC<MonthlyIncomeProps> = ({ incomeSources, handleIncomeSourceUpdate }) => {\n    const updateIncomeSources = (incomeSourceItem: IncomeSourceType, index: number) => {\n        const updatedIncomeSource = [...incomeSources];\n        updatedIncomeSource[index] = incomeSourceItem;\n        handleIncomeSourceUpdate(updatedIncomeSource);\n    };\n\n    const addIncomeSource = () => {\n        const emptyIncomeSource = {\n            category: 'Secondary',\n            industry: '',\n            level: '',\n            jobTitle: '',\n            income: '',\n        };\n        handleIncomeSourceUpdate([...incomeSources, emptyIncomeSource])\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"MonthlyIncome-Wrapper\">\n                {\n                    incomeSources.map((incomeSourceItem, index) => (\n                        <MonthlyIncomeItem\n                            incomeSource={incomeSourceItem}\n                            incomeNo={index + 1}\n                            handleIncomeSourceItemUpdate={(incomeSourceItem) => updateIncomeSources(incomeSourceItem, index)}\n                            key={index}\n                        />\n                    ))\n                }\n                <div className=\"MonthlyIncome-Action\">\n                    <button className=\"MonthlyIncome-AddButton\" onClick={addIncomeSource}>\n                        <IconContext.Provider value={{ className: 'Icon Icon-AddIncome' }} >\n                            <IoIosAdd />\n                        </IconContext.Provider>\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default MonthlyIncome;","import React from 'react';\nimport {\n    TabBar,\n} from '../../CustomComponent';\nimport AvailableCard from './AvailableCard';\nimport Expenses from './Expenses';\nimport MonthlyIncome from './MonthlyIncome';\n\ntype optionList = {\n    label: string,\n    name: string,\n    content: JSX.Element;\n};\n\ntype ExpenseDetails = {\n    category: string,\n    subcategory?: {\n        name: string,\n        expenseRange: number[],\n    }[],\n    expenseRange?: number[],\n}[];\n\ntype IncomeSource = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n}[];\n\nconst CreditCard: React.FC = () => {\n    // AVAILABLE BANKS CONFIGURATION\n    const [selectedBanks, setSelectedBanks] = React.useState<string[]>([]);\n    const banksLimit = 3;\n\n    const handleSelectedBanks = (selected: string[]) => {\n        setSelectedBanks(() => { return selected; });\n    };\n\n    // EXPENSES CONFIGURATION\n    const [selectedExpenses, setSelectedExpenses] = React.useState<string[]>([]);\n    const expensesLimit = 3;\n\n    const handleSelectedExpenses = (selected: string[]) => {\n        setSelectedExpenses(() => { return selected; });\n    };\n\n    const [expenseObject, setExpenseObject] = React.useState<any[]>([]);\n\n    const generateExpenseObject = () => {\n        const generatedExpenseObject = selectedExpenses.map(option => {\n            let optionDetail = {};\n            if (['Shopping', 'Groceries', 'Travel'].includes(option)) {\n                optionDetail = {\n                    category: option,\n                    subcategory: [\n                        {\n                            name: 'Online',\n                            expenseRange: [2200, 8800],\n                        },\n                        {\n                            name: 'Traditional',\n                            expenseRange: [3000, 7000],\n                        },\n                    ],\n                };                    \n            }\n            else {\n                optionDetail = {\n                    category: option,\n                    expenseRange: [1000, 8100],\n                };  \n            }\n            return optionDetail;\n        });\n\n        setExpenseObject(generatedExpenseObject);\n    }\n\n    const updateExpenseObject = (newExpenseObject: ExpenseDetails) => {\n        setExpenseObject(() => {  return newExpenseObject; });\n    }\n\n    // MONTHLY INCOME CONFIGURATION\n    const [incomeSource, setIncomeSource] = React.useState<IncomeSource>([\n        {\n            category: 'Primary',\n            industry: '',\n            level: '',\n            jobTitle: '',\n            income: '',\n        },\n    ]);\n\n    const updateIncomeSource = (updatedIncomeSource: IncomeSource) => {\n        setIncomeSource(() => { return updatedIncomeSource; });\n    }\n    \n    // TAB CONFIGURATION\n    const [currentTab, setCurrentTab] = React.useState('Available Card');\n    const tabMenuList = [\n        {\n            label: 'Available Card',\n            name: 'Available Card',\n            content: <AvailableCard\n                        selectedOptions={selectedBanks}\n                        updateSelectedOptions={handleSelectedBanks}\n                        optionLimit={banksLimit}\n                    />,\n            enabled: true,\n        },\n        {\n            label: 'Expenses',\n            name: 'Expenses',\n            content: <Expenses\n                        selectedOptions={selectedExpenses}\n                        updateSelectedOptions={handleSelectedExpenses}\n                        optionLimit={expensesLimit}\n                        expenseDetails={expenseObject}\n                        generateExpenseObject={generateExpenseObject}\n                        updateExpenseObject={updateExpenseObject}\n                    />,\n            enabled: false,\n        },\n        {\n            label: 'Monthly Income',\n            name: 'Monthly Income',\n            content: <MonthlyIncome\n                        incomeSources={incomeSource}\n                        handleIncomeSourceUpdate={updateIncomeSource}\n                    />,\n            enabled: false,\n        },\n    ];\n    const [enabledTab, setEnabledTab] = React.useState([true, false, false]);\n\n    const handleChangeTab = (selectedTab: string) => {\n        setCurrentTab(() => { return selectedTab });\n    }\n\n    const handleProceedTab = (updatedEnabledTab: boolean[] | undefined, nextActiveTab: string) => {\n        // setTabMenuList(() => { return updatedOptionList });\n        setEnabledTab(() => { return updatedEnabledTab as boolean[] });\n        handleChangeTab(nextActiveTab);\n    }\n\n    return (\n        <React.Fragment>\n            <div className=\"CreditCard-Content\">\n                <TabBar\n                    currentTab={currentTab}\n                    updateTab={handleChangeTab}\n                    optionList={tabMenuList}\n                    progressStrict={true}\n                    updateStrictTab={handleProceedTab}\n                    enabledTab={enabledTab}\n                />\n            </div>\n            <div className=\"CreditCard-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                >\n                    Submit Application\n                </button>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CreditCard;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\nimport {\n    IoIosArrowRoundForward\n} from 'react-icons/io';\nimport { IconContext } from 'react-icons/lib';\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n};\n\ntype slotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ninterface BalanceTransferProps {\n    slot: slotType;\n    updateSubmitted: () => void;\n    handleInputChange: (value: string, stateName: string) => void;\n}\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    dropdownOption?: {\n        allowInput: boolean;\n        optionList: InputOptionType[];\n    }\n};\n\nconst dualDropdown: slotInputType[] = [\n    {\n        inputName: 'transferFrom',\n        inputState: 'transferFrom',\n        inputType: 'dropdown',\n        inputLabel: 'Transfer from',\n        dropdownOption: {\n            allowInput: true,\n            optionList: [\n                {\n                    name: 'Hello',\n                    label: 'Hello',\n                    value: 'Hello',\n                },\n                {\n                    name: 'World',\n                    label: 'World',\n                    value: 'World',\n                },\n                {\n                    name: 'React',\n                    label: 'React',\n                    value: 'React',\n                },\n            ],\n        },\n    },\n    {\n        inputName: 'transferTo',\n        inputState: 'transferTo',\n        inputType: 'dropdown',\n        inputLabel: 'Transfer to',\n        dropdownOption: {\n            allowInput: true,\n            optionList: [\n                {\n                    name: 'Hello',\n                    label: 'Hello',\n                    value: 'Hello',\n                },\n                {\n                    name: 'World',\n                    label: 'World',\n                    value: 'World',\n                },\n                {\n                    name: 'React',\n                    label: 'React',\n                    value: 'React',\n                },\n            ],\n        },\n    },\n];\n\nconst slotInput: slotInputType[] = [\n    {\n        inputName: 'name',\n        inputState: 'name',\n        inputType: 'text',\n        inputLabel: 'Name',\n    },\n    {\n        inputName: 'phone',\n        inputState: 'phone',\n        inputType: 'text',\n        inputLabel: 'Phone',\n    },\n    {\n        inputName: 'email',\n        inputState: 'email',\n        inputType: 'email',\n        inputLabel: 'Email',\n    },\n    {\n        inputName: 'amount',\n        inputState: 'amount',\n        inputType: 'number',\n        inputLabel: 'Amount',\n    },\n];\n\nconst BalanceTransferForm: React.FC<BalanceTransferProps> = ({slot, updateSubmitted, handleInputChange}) => {\n    return (\n        <React.Fragment>\n            <section className=\"AIVIForm-Content\">\n                <p className=\"AIVIForm-Title\">\n                    Application Status: In Progress\n                </p>\n                <p className=\"AIVIForm-Description\">\n                    You can view your progress so far here. Feel free to edit the information by clicking on the field.\n                </p>\n                <div className=\"AIVIForm-Details\">\n                    <div className=\"BalanceTransfer-DualDropdown-Wrapper\">\n                        <div className=\"BalanceTransfer-DualDropdown-Item\">\n                            <InputDropdown\n                                slot={slot}\n                                inputProps={dualDropdown[0]}\n                                handleInputChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"BalanceTransfer-DualDropdown-Arrow\">\n                            <IconContext.Provider value={{ className: 'Icon Icon-TransferTo' }} >\n                                <IoIosArrowRoundForward />\n                            </IconContext.Provider>\n                        </div>\n                        <div className=\"BalanceTransfer-DualDropdown-Item\">\n                            <InputDropdown\n                                slot={slot}\n                                inputProps={dualDropdown[1]}\n                                handleInputChange={handleInputChange}\n                            />\n                        </div>\n                    </div>\n                    {\n                        slotInput.map((slotInputItem: slotInputItemType, index: number) => (\n                            slotInputItem.inputType === 'dropdown'\n                            ? (\n                                <InputDropdown\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                            : (\n                                <InputBox\n                                    slot={slot}\n                                    inputProps={slotInputItem}\n                                    handleInputChange={handleInputChange}\n                                    key={index}\n                                />\n                            )\n                        ))\n                    }\n                </div>\n            </section>\n            <section className=\"AIVIForm-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                    onClick={updateSubmitted}\n                    // disabled={[slot.transferFrom, slot.name, slot.phone, slot.email, slot.amount].some(check => check === '')}\n                >\n                    Submit Application\n                </button>\n            </section>\n        </React.Fragment>\n    );\n};\n\nexport default BalanceTransferForm;","import React from 'react';\nimport BalanceTransferForm from './BalanceTransferForm';\nimport SubmittedView from '../SubmittedView';\n\nconst BalanceTransfer = () => {\n    const [userSlot, setUserSlot] = React.useState({\n        transferFrom: '',\n        transferTo: '',\n        name: '',\n        phone: '',\n        email: '',\n        amount: '',\n    });\n\n    const handleInputChange = (value: string, stateName: string) => {\n        setUserSlot(() => {return {...userSlot, [stateName]: value}});\n    };\n\n    const [submitted, setSubmitted] = React.useState(false);\n\n    const handleSubmit = () => {\n        setSubmitted(prevState => { return !prevState});\n    };\n\n    if (!submitted) return <BalanceTransferForm\n                                slot={userSlot}\n                                updateSubmitted={handleSubmit}\n                                handleInputChange={handleInputChange}\n                            />\n    else return <SubmittedView updateSubmitted={handleSubmit}/>\n};\n\nexport default BalanceTransfer;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\n\ntype LoanDetailsType = {\n    loanAmount: string,\n    repaymentPeriod: string,\n};\n\ninterface LoanDetailsProps {\n    loanDetails: LoanDetailsType;\n    handleLoanDetailsUpdate: (updatedLoanDetails: LoanDetailsType) => void;\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ntype slotInputItemType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    dropdownOption?: {\n        allowInput: boolean,\n        optionList: InputOptionType[],\n    },\n    remarks?: string[],\n};\n\nconst loanDetailsFormat: slotInputItemType[] = [\n    {\n        inputName: 'loanAmount',\n        inputState: 'loanAmount',\n        inputType: 'number',\n        inputLabel: 'Loan Amount',\n        remarks: ['currency'],\n    },\n    {\n        inputName: 'repaymentPeriod',\n        inputState: 'repaymentPeriod',\n        inputType: 'text',\n        inputLabel: 'Repayment Period',\n    },\n];\n\nconst LoanDetails: React.FC<LoanDetailsProps> = ({ loanDetails, handleLoanDetailsUpdate }) => {\n    const handleInputChange = (value: string, stateName: string) => {\n        const updatedLoanDetailsItem = {...loanDetails, [stateName]: value};\n        handleLoanDetailsUpdate(updatedLoanDetailsItem);\n    }\n\n    return (\n        <React.Fragment>\n            {\n                loanDetailsFormat.map((loanDetailsItem, index) => (\n                    loanDetailsItem.inputType === 'dropdown'\n                    ? (\n                        <InputDropdown\n                            slot={loanDetails}\n                            inputProps={loanDetailsItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                    : (\n                        <InputBox\n                            slot={loanDetails}\n                            inputProps={loanDetailsItem}\n                            handleInputChange={handleInputChange}\n                            key={index}\n                        />\n                    )\n                ))\n            }\n        </React.Fragment>\n    );\n};\n\nexport default LoanDetails;","import React from 'react';\nimport {\n    MultiChecklistBox,\n} from '../../CustomComponent';\n\ntype ChecklistItemType = {\n    checked: boolean,\n    name: string,\n    amount?: string,\n    remarks?: string[],\n};\n\ntype ChecklistType = ChecklistItemType[];\n\ninterface LoanCommitmentProps {\n    loanCommitments: ChecklistType;\n    updateLoanCommitments: (updatedLoanCommitments: ChecklistType) => void;\n};\n\nconst LoanCommitment: React.FC<LoanCommitmentProps> = ({ loanCommitments, updateLoanCommitments }) => {\n\n    const handleLoanCommitmentsUpdate = (updatedLoanCommitments: ChecklistType) => {\n        updateLoanCommitments(updatedLoanCommitments);\n    }\n\n    return (\n        <MultiChecklistBox\n            checklistList={loanCommitments}\n            updateChecklistList={handleLoanCommitmentsUpdate}\n        />\n    );\n};\n\nexport default LoanCommitment;","import React from 'react';\nimport {\n    InputBox,\n    InputDropdown,\n} from '../../CustomComponent';\nimport MonthlyIncome from '../Credit Card/MonthlyIncome';\n\ntype IncomeSourceType = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n}[];\n\ntype MaritalInfoType = {\n    maritalStatus: string,\n    spouseName?: string,\n    incomeInfo?: IncomeSourceType;\n}\n\ninterface MaritalStatusProps {\n    maritalInfo: MaritalInfoType;\n    updateMaritalInfo: (updatedMaritalStatus: MaritalInfoType) => void;\n}\n\nconst maritalInput = {\n    inputName: 'maritalStatus',\n    inputState: 'maritalStatus',\n    inputType: 'dropdown',\n    inputLabel: 'Marital Status',\n    dropdownOption: {\n        allowInput: false,\n        optionList: [\n            {\n                name: 'Single',\n                label: 'Single',\n                value: 'Single',\n            },\n            {\n                name: 'Married',\n                label: 'Married',\n                value: 'Married',\n            },\n            {\n                name: 'Divorced',\n                label: 'Divorced',\n                value: 'Divorced',\n            },\n            {\n                name: 'Widowed',\n                label: 'Widowed',\n                value: 'Widowed',\n            },\n        ],\n    },\n};\n\nconst spouseInput = {\n    inputName: 'spouseName',\n    inputState: 'spouseName',\n    inputType: 'text',\n    inputLabel: 'Name of Spouse',\n};\n\nconst MaritalStatus: React.FC<MaritalStatusProps> = ({ maritalInfo, updateMaritalInfo }) => {\n    const handleMaritalInfoUpdate = (value: string, stateName: string) => {\n        if (stateName === 'maritalStatus') {\n            if (value === 'Married') {\n                const updatedMaritalInfo: MaritalInfoType = {\n                    maritalStatus: 'Married',\n                    spouseName: '',\n                    incomeInfo: [\n                        {\n                            category: 'Primary',\n                            industry: '',\n                            level: '',\n                            jobTitle: '',\n                            income: '',\n                        },\n                    ],\n                }\n                updateMaritalInfo(updatedMaritalInfo);\n            }\n            else updateMaritalInfo({ maritalStatus: value });\n        }\n        else return updateMaritalInfo({...maritalInfo, [stateName]: value});\n    }\n\n    const handleIncomeInfoUpdate = (updatedIncomeInfo: IncomeSourceType) => {\n        updateMaritalInfo({...maritalInfo, incomeInfo: updatedIncomeInfo});\n    }\n\n    return (\n        <React.Fragment>\n            <InputDropdown\n                slot={maritalInfo}\n                inputProps={maritalInput}\n                handleInputChange={handleMaritalInfoUpdate}\n            />\n            {\n                maritalInfo.incomeInfo && maritalInfo.maritalStatus === 'Married' && (\n                    <>\n                        <InputBox\n                            slot={maritalInfo}\n                            inputProps={spouseInput}\n                            handleInputChange={handleMaritalInfoUpdate}\n                        />\n                        <MonthlyIncome\n                            incomeSources={maritalInfo.incomeInfo}\n                            handleIncomeSourceUpdate={handleIncomeInfoUpdate}\n                        />\n                    </>\n                )\n            }\n        </React.Fragment>\n    );\n};\n\nexport default MaritalStatus;","import React from 'react';\nimport {\n    TabBar,\n} from '../../CustomComponent';\nimport AvailableCard from '../Credit Card/AvailableCard';\nimport MonthlyIncome from '../Credit Card/MonthlyIncome';\nimport LoanDetails from './LoanDetails';\nimport LoanCommitment from './LoanCommitment';\nimport MaritalStatus from './MaritalStatus';\n\ntype IncomeSourceType = {\n    category: string,\n    industry: string,\n    level: string,\n    jobTitle: string,\n    income: string,\n}[];\n\ntype LoanDetailsType = {\n    loanAmount: string,\n    repaymentPeriod: string,\n};\n\ntype ChecklistItemType = {\n    checked: boolean,\n    name: string,\n    amount?: string,\n    remarks?: string[],\n};\n\ntype MaritalInfoType = {\n    maritalStatus: string,\n    spouseName?: string,\n    incomeInfo?: IncomeSourceType;\n}\n\ntype ChecklistType = ChecklistItemType[];\n\nconst PersonalLoan: React.FC = () => {\n    // AVAILABLE BANKS CONFIGURATION\n    const [selectedBanks, setSelectedBanks] = React.useState<string[]>([]);\n    const banksLimit = 3;\n\n    const handleSelectedBanks = (selected: string[]) => {\n        setSelectedBanks(() => { return selected; });\n    };\n\n    // LOAN DETAILS CONFIGURATION\n    const [loanDetails, setLoanDetails] = React.useState<LoanDetailsType>({\n        loanAmount: '',\n        repaymentPeriod: '',\n    });\n\n    const updateLoanDetails = (updatedLoanDetails: LoanDetailsType) => {\n        setLoanDetails(() => { return updatedLoanDetails; });\n    }\n\n    // MONTHLY INCOME CONFIGURATION\n    const [incomeSource, setIncomeSource] = React.useState<IncomeSourceType>([\n        {\n            category: 'Primary',\n            industry: '',\n            level: '',\n            jobTitle: '',\n            income: '',\n        },\n    ]);\n\n    const updateIncomeSource = (updatedIncomeSource: IncomeSourceType) => {\n        setIncomeSource(() => { return updatedIncomeSource; });\n    }\n\n    // MARITAL STATUS CONFIGURATION\n    const [maritalInfo, setMaritalInfo] = React.useState<MaritalInfoType>({\n        maritalStatus: 'Single',\n    });\n\n    const handleMaritalInfoUpdate = (updatedMaritalInfo: MaritalInfoType) => {\n        setMaritalInfo(() => { return updatedMaritalInfo; });\n    }\n\n    // LOAN COMMITMENTS CONFIGURATION\n    const [loanCommitments, setLoanCommitments] = React.useState<ChecklistType>([\n        {\n            checked: true,\n            name: 'Personal Loan',\n            amount: '0',\n            remarks: ['amount', 'readonly'],\n        },\n        {\n            checked: false,\n            name: 'Credit Card',\n            amount: '0',\n            remarks: ['amount', 'readonly'],\n        },\n        {\n            checked: false,\n            name: 'Property',\n            amount: '0',\n            remarks: ['amount', 'readonly'],\n        },\n        {\n            checked: false,\n            name: 'Car',\n            amount: '0',\n            remarks: ['amount', 'readonly'],\n        },\n    ]);\n\n    const handleLoanCommitmentsUpdate = (updatedLoanCommitments: ChecklistType) => {\n        setLoanCommitments(() => { return updatedLoanCommitments });\n    }\n\n    // TAB CONFIGURATION\n    const [currentTab, setCurrentTab] = React.useState('Marital Status');\n    const tabMenuList = [\n        {\n            label: 'Preferred Bank',\n            name: 'Preferred Bank',\n            content: <AvailableCard\n                        selectedOptions={selectedBanks}\n                        updateSelectedOptions={handleSelectedBanks}\n                        optionLimit={banksLimit}\n                    />,\n        },\n        {\n            label: 'Loan Details',\n            name: 'Loan Details',\n            content: <LoanDetails\n                        loanDetails={loanDetails}\n                        handleLoanDetailsUpdate={updateLoanDetails}\n                    />,\n        },\n        {\n            label: 'Monthly Income',\n            name: 'Monthly Income',\n            content: <MonthlyIncome\n                        incomeSources={incomeSource}\n                        handleIncomeSourceUpdate={updateIncomeSource}\n                    />,\n        },\n        {\n            label: 'Marital Status',\n            name: 'Marital Status',\n            content: <MaritalStatus\n                        maritalInfo={maritalInfo}\n                        updateMaritalInfo={handleMaritalInfoUpdate}\n                    />,\n        },\n        {\n            label: 'Loan Commitment',\n            name: 'Loan Commitment',\n            content: <LoanCommitment\n                        loanCommitments={loanCommitments}\n                        updateLoanCommitments={handleLoanCommitmentsUpdate}\n                    />,\n        },\n    ];\n\n    const handleChangeTab = (selectedTab: string) => {\n        setCurrentTab(() => { return selectedTab });\n    }\n\n    React.useEffect(() => {\n        console.log(maritalInfo);\n    }, [maritalInfo]);\n\n    return (\n        <React.Fragment>\n            <div className=\"CreditCard-Content\">\n                <TabBar\n                    currentTab={currentTab}\n                    updateTab={handleChangeTab}\n                    optionList={tabMenuList}\n                />\n            </div>\n            <div className=\"CreditCard-Button\">\n                <button\n                    className=\"Button Button-Full\"\n                >\n                    Submit Application\n                </button>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default PersonalLoan;","import React from 'react';\nimport './App.scss';\nimport {\n    MdMenu,\n} from 'react-icons/md';\nimport { IconContext } from 'react-icons/lib';\nimport moment from 'moment';\n\nimport {\n    Chatbox,\n    CashFromCard,\n    CreditCard,\n    BalanceTransfer,\n    PersonalLoan,\n} from './components';\n\n// import { validateData } from './utils/DataValidation';\n\ntype mockSlotType = {\n    [transferFrom: string]: string,\n    name: string,\n    phone: string,\n    email: string,\n    amount: string,\n};\n\ntype InputOptionType = {\n    name: string;\n    label: string;\n    value: string;\n};\n\ntype slotInputType = {\n    inputName: string,\n    inputState: string,\n    inputType: string,\n    inputLabel: string,\n    optionList?: InputOptionType[];\n};\n\ninterface conversationState {\n    user?: string;\n    timestamp?: string;\n    message?: string;\n}\n\nconst mockConversation = [\n    {\n        user: 'bot',\n        timestamp: '2020-09-09',\n        message: 'Welcome!',\n    },\n    {\n        user: 'user',\n        timestamp: '2020-09-09',\n        message: 'Hey!',\n    },\n    {\n        user: 'bot',\n        timestamp: '2020-09-09',\n        message: 'Are you interested in anything?',\n    },\n    {\n        user: 'user',\n        timestamp: '2020-09-09',\n        message: 'I would like to order an aglio e olio, with a freckle of cinnamon, and the cherry on top!',\n    },\n];\n\nfunction App() {\n    const [userChatInput, setUserChatInput] = React.useState('');\n    const [conversation, setConversation] = React.useState<conversationState[]>(mockConversation);\n    const [showChatInMobile, setShowChatInMobile] = React.useState(false);\n    const [renderSection, setRenderSection] = React.useState('Personal Loan');\n    const [renderModel, setRenderModel] = React.useState(false);\n\n    const sections = ['Cash From Card', 'Credit Card', 'Balance Transfer', 'Personal Loan'];\n\n    React.useEffect(() => {\n        // const rootStyle = document.documentElement.style;\n        // rootStyle.setProperty('--sidebar-width', '10px');\n        // console.log(validateData('Hello', 'email'));\n        // setInterval({}, 1000); // refresh every second - Is this a good practice?\n        // console.log(showChatInMobile);\n    }, [showChatInMobile]);\n\n    // Functions for chatbox\n    const handleChatInputUpdate = (value: string) => {\n        setUserChatInput(() => value);\n    };\n\n    const handleChatSubmit = () => {\n        if (userChatInput !== '') {\n            const conversationMap = {\n                user: 'User',\n                timestamp: moment().format(),\n                message: userChatInput,\n            };\n            setConversation(prevConversation => { return [...prevConversation, conversationMap] });\n            setUserChatInput('');\n        }\n    };\n\n    const handleChatboxModal = () => {\n        setShowChatInMobile(prevState => { return !prevState });\n    }\n\n    // FOR DEBUG PURPOSE ONLY\n    // START\n    const handleSectionsMenu = () => {\n        setRenderModel(prevState => { return !prevState });\n    }\n\n    const handleChangeSection = (section: string) => {\n        setRenderSection(() => { return section })\n        setRenderModel(prevState => { return !prevState });\n    }\n    // END\n\n    const handleSectionRendering = (sectionToRender: string) => {\n        switch (renderSection) {\n            case 'Cash From Card':\n                return <CashFromCard />;\n            case 'Credit Card':\n                return <CreditCard />;\n            case 'Balance Transfer':\n                return <BalanceTransfer />;\n            case 'Personal Loan':\n                return <PersonalLoan />\n            default:\n                return <>Not Found</>;\n        }\n    }\n\n    return (\n        <main className=\"AIVI-Page\">\n            <section className=\"AIVI-Sidebar\">\n                <div className=\"Button Button-Hamburger\">\n                    <IconContext.Provider value={{ className: 'Icon-Rotate Icon-Light Icon-Hamburger' }} >\n                        <MdMenu />\n                    </IconContext.Provider>\n                </div>\n            </section>\n            <section className=\"AIVI-Chatbox\">\n                <Chatbox\n                    userInput={userChatInput}\n                    updateInput={handleChatInputUpdate}\n                    submitInput={handleChatSubmit}\n                    conversation={conversation}\n                />\n            </section>\n            <section className=\"AIVI-Leftbox\">\n                { handleSectionRendering(renderSection) }\n            </section>\n\n            {/* FOR MOBILE VERSION ONLY */}\n            {/* START */}\n            <button\n                className=\"AIVI-Chatbox-Mobile-Button Button\"\n                onClick={handleChatboxModal}\n            >\n                C\n            </button>\n            <section\n                className={`AIVI-Chatbox-Mobile-Model ${showChatInMobile ? `AIVI-Chatbox-Mobile-Show` : `AIVI-Chatbox-Mobile-Hide`}`}\n            >\n                <Chatbox\n                    userInput={userChatInput}\n                    updateInput={handleChatInputUpdate}\n                    submitInput={handleChatSubmit}\n                    conversation={conversation}\n                />\n            </section>\n            {/* END */}\n\n\n            {/* FOR DEBUG PURPOSE ONLY */}\n            {/* START */}\n            <button className=\"Temporary-ChangeRender\" onClick={handleSectionsMenu}>\n                Change Section\n            </button>\n            <div className=\"Temporary-Sections\" data-visible={renderModel.toString()}>\n                <ul>\n                    {\n                        sections.map((section, index) => <li onClick={() => handleChangeSection(section)} key={index}>{section}</li>)\n                    }\n                </ul>\n            </div>\n            {/* END */}\n        </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}