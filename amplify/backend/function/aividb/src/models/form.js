const {
    Schema,
    model,
    ObjectId,
    Mixed,
} = require('mongoose');

// Note for mongoose
// There will be several predeclared parameter when creating document (object / row)
// id - this will be randomly generated, can be disabled by adding _id: false in config
// timestamps - can also be disabled by adding timestamps: false or any config in config

// Types of data (not same with nodejs types)
// String
// Number
// Date
// Buffer
// Boolean
// Mixed - Need to import from mongoose
// ObjectId - ID which generated by Mongoose, also need to import from mongoose
// Array
// Decimal128
// Map
// Schema
// For reference, visit https://mongoosejs.com/docs/schematypes.html

// Can remove when done

const formSchema = new Schema({
    user:           { type: String, required: true, ref: 'user' }, // ref used for creating relationship
    conversation:   { type: String, required: true, ref: 'conversation' },
    // conversation:   { type: String, required: true },
    formType:       { type: String, required: true, enum: [ "cash_from_card", "balance_transfer", "suggest_credit_card", "suggest_loan", "apply_credit_card", "apply_loan" ] },
    formContent:    { type: Mixed, required: true },
}, {
    // Mongoose Schema Configuration
    timestamps: { createdAt: 'created_at', updatedAt: 'updated_at' },
});

// Virtual for conversation, will not be stored inside database
formSchema
.virtual('url')
.get(function() { return `/form/${this._id}` }); // Return url for specific form with id

// formSchema
// .virtual('conversationDetail', {
//     ref:  'conversation',
//     localField: 'conversation',
//     foreignField: 'lexSessionID',
//     justOne: true,
// });

module.exports = model('form', formSchema);